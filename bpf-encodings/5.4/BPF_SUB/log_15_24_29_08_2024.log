Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_SUB
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_SUB
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0xf7f550
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_SUB'<<0xf7f550>>  #uses=1
  CS<0xde0c50> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_SUB /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_SUB
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_SUB'<<0x14f8490>>  #uses=1
  CS<0x133eca0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_SUB
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_SUB
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_SUB /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_SUB
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_SUB:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_SUB /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_SUB
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_SUB /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_SUB
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_SUB'<<0x125c1f0>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_SUB
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_SUB
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_SUB /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_SUB -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_SUB
GLOBAL_BITVECTOR_SUFFIX: 1
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_0
[lookInsideStruct] singleValueType:dst_reg_1_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_1
[lookInsideStruct] singleValueType:dst_reg_1_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_2
[lookInsideStruct] singleValueType:dst_reg_1_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_3
[lookInsideStruct] singleValueType:dst_reg_1_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_4
[lookInsideStruct] singleValueType:dst_reg_1_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_5
[lookInsideStruct] singleValueType:dst_reg_1_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_6
[lookInsideStruct] singleValueType:dst_reg_1_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_7
[lookInsideStruct] singleValueType:dst_reg_1_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_8
[lookInsideStruct] singleValueType:dst_reg_1_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_9
[lookInsideStruct] singleValueType:dst_reg_1_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_10
[lookInsideStruct] singleValueType:dst_reg_1_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_11
[lookInsideStruct] singleValueType:dst_reg_1_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_12
[lookInsideStruct] singleValueType:dst_reg_1_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_13
[lookInsideStruct] singleValueType:dst_reg_1_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_14
[lookInsideStruct] singleValueType:src_reg_1_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_15
[lookInsideStruct] singleValueType:src_reg_1_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_16
[lookInsideStruct] singleValueType:src_reg_1_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_17
[lookInsideStruct] singleValueType:src_reg_1_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_18
[lookInsideStruct] singleValueType:src_reg_1_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_19
[lookInsideStruct] singleValueType:src_reg_1_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_20
[lookInsideStruct] singleValueType:src_reg_1_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_21
[lookInsideStruct] singleValueType:src_reg_1_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_22
[lookInsideStruct] singleValueType:src_reg_1_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_23
[lookInsideStruct] singleValueType:src_reg_1_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_24
[lookInsideStruct] singleValueType:src_reg_1_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_25
[lookInsideStruct] singleValueType:src_reg_1_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_26
[lookInsideStruct] singleValueType:src_reg_1_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_27
[lookInsideStruct] singleValueType:src_reg_1_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_1_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_1_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_1_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleLoadInst] (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_1_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_1_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleLoadInst] (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_1_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_1_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleLoadInst] (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_1_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_1_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleLoadInst] (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_1_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_1_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleLoadInst] (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_1_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_1_35
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleLoadInst] (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_1_31
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_1_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_1_37
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_1_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_1_38
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleLoadInst] (= dst_reg_1_5 i215.i_1_38)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_1_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_1_33
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_1_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_1_39
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_1_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_1_35
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_1_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_1_40
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_1_39
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_1_40
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_1_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_1_42
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_1_39
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_1_40
[handleSelectInst] z3ExprRes: or.cond197.i_1_42
[handleSelectInst](ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_1_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_1_33
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_1_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_1_43
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_1_43
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_1_42
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_1_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_1_44
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_1_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_1_35
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_1_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_1_45
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_1_44
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_1_45
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_1_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_1_47
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_1_44
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_1_45
[handleSelectInst] z3ExprRes: or.cond199.i_1_47
[handleSelectInst](ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_1_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_1_33
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_1_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_1_48
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_1_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_1_35
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_1_49
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_1_49
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_1_48
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_1_49
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_1_51
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_1_51
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_1_48
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_1_49
[handleSelectInst] z3ExprRes: or.cond200.i_1_51
[handleSelectInst](ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i230.i = load i64, i64* %smin_value91.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i230.i = load i64, i64* %smin_value91.i, align 8
[handleLoadInst] pointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i230.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i230.i_1_60
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i230.i_1_60
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleLoadInst] (= dst_reg_1_6 i230.i_1_60)
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:1
  (= dst_reg_1_6 i230.i_1_60)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i230.i = load i64, i64* %smin_value91.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleBinaryOperatorInst] opResVal:   %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType]   %i230.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i230.i_1_60
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_1_33
[getBitVecSingValType]   %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i_1_61
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i_1_61
[handleBinaryOperatorInst] SUB instruction
(= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
-------------------
  %cmp.i42.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_1_33
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i42.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i42.i_1_63
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i42.i_1_63
[handleICmpInst] (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:3
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp1.i43.i = icmp slt i64 %sub.i.i, %i230.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i_1_61
[getBitVecSingValType]   %i230.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i230.i_1_60
[getBitVecSingValType]   %cmp1.i43.i = icmp slt i64 %sub.i.i, %i230.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i43.i_1_64
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i43.i_1_64
[handleICmpInst] (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:4
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp2.i44.i = icmp sgt i64 %sub.i.i, %i230.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i_1_61
[getBitVecSingValType]   %i230.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i230.i_1_60
[getBitVecSingValType]   %cmp2.i44.i = icmp sgt i64 %sub.i.i, %i230.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp2.i44.i_1_65
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp2.i44.i_1_65
[handleICmpInst] (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:5
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %retval.0.i45.i = select i1 %cmp.i42.i, i1 %cmp1.i43.i, i1 %cmp2.i44.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 10 = MemoryDef(9)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleSelectInst]SelectMap:
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i42.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i42.i_1_63
[getBitVecSingValType]   %cmp1.i43.i = icmp slt i64 %sub.i.i, %i230.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i43.i_1_64
[getBitVecSingValType]   %cmp2.i44.i = icmp sgt i64 %sub.i.i, %i230.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp2.i44.i_1_65
[getBitVecSingValType]   %retval.0.i45.i = select i1 %cmp.i42.i, i1 %cmp1.i43.i, i1 %cmp2.i44.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: retval.0.i45.i_1_66
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i45.i_1_66
[handleSelectInst] z3ExprSelectOp1: cmp.i42.i_1_63
[handleSelectInst] z3ExprSelectOp2: cmp1.i43.i_1_64
[handleSelectInst] z3ExprSelectOp3: cmp2.i44.i_1_65
[handleSelectInst] z3ExprRes: retval.0.i45.i_1_66
[handleSelectInst](ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
-------------------
  br i1 %retval.0.i45.i, label %if.then98.i, label %lor.lhs.false94.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false94.i
=========================
-------------------
  %smax_value95.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value95.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i231.i = load i64, i64* %smax_value95.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i231.i = load i64, i64* %smax_value95.i, align 8
[handleLoadInst] pointerValue:   %smax_value95.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i231.i = load i64, i64* %smax_value95.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i231.i_1_67
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i231.i_1_67
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleLoadInst] (= dst_reg_1_7 i231.i_1_67)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false94.i, Size:1
  (= dst_reg_1_7 i231.i_1_67)
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i231.i = load i64, i64* %smax_value95.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleBinaryOperatorInst] opResVal:   %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType]   %i231.i = load i64, i64* %smax_value95.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i231.i_1_67
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_1_32
[getBitVecSingValType]   %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i46.i_1_68
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i46.i_1_68
[handleBinaryOperatorInst] SUB instruction
(= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
-------------------
  %cmp.i47.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_1_32
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i47.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i47.i_1_70
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i47.i_1_70
[handleICmpInst] (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false94.i, Size:3
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp1.i48.i = icmp slt i64 %sub.i46.i, %i231.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i46.i_1_68
[getBitVecSingValType]   %i231.i = load i64, i64* %smax_value95.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i231.i_1_67
[getBitVecSingValType]   %cmp1.i48.i = icmp slt i64 %sub.i46.i, %i231.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i48.i_1_71
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i48.i_1_71
[handleICmpInst] (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false94.i, Size:4
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp2.i49.i = icmp sgt i64 %sub.i46.i, %i231.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i46.i_1_68
[getBitVecSingValType]   %i231.i = load i64, i64* %smax_value95.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i231.i_1_67
[getBitVecSingValType]   %cmp2.i49.i = icmp sgt i64 %sub.i46.i, %i231.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp2.i49.i_1_72
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp2.i49.i_1_72
[handleICmpInst] (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false94.i, Size:5
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %retval.0.i50.i = select i1 %cmp.i47.i, i1 %cmp1.i48.i, i1 %cmp2.i49.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 10 = MemoryDef(9)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleSelectInst]SelectMap:
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i47.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i47.i_1_70
[getBitVecSingValType]   %cmp1.i48.i = icmp slt i64 %sub.i46.i, %i231.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i48.i_1_71
[getBitVecSingValType]   %cmp2.i49.i = icmp sgt i64 %sub.i46.i, %i231.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp2.i49.i_1_72
[getBitVecSingValType]   %retval.0.i50.i = select i1 %cmp.i47.i, i1 %cmp1.i48.i, i1 %cmp2.i49.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: retval.0.i50.i_1_73
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i50.i_1_73
[handleSelectInst] z3ExprSelectOp1: cmp.i47.i_1_70
[handleSelectInst] z3ExprSelectOp2: cmp1.i48.i_1_71
[handleSelectInst] z3ExprSelectOp3: cmp2.i49.i_1_72
[handleSelectInst] z3ExprRes: retval.0.i50.i_1_73
[handleSelectInst](ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
-------------------
  br i1 %retval.0.i50.i, label %if.then98.i, label %if.else101.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then98.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value91.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %smax_value100.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value100.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value100.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value100.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value100.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  br label %if.end105.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else101.i
=========================
-------------------
  store i64 %sub.i.i, i64* %smin_value91.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i_1_61
[handleStoreInst] BVToStore: sub.i.i_1_61
[handleStoreInst] destPointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ sub.i.i_1_61 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  store i64 %sub.i46.i, i64* %smax_value95.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i46.i_1_68
[handleStoreInst] BVToStore: sub.i46.i_1_68
[handleStoreInst] destPointerValue:   %smax_value95.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value95.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ sub.i46.i_1_68 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  br label %if.end105.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end105.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_76
[lookInsideStruct] singleValueType:dst_reg_1_76
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_77
[lookInsideStruct] singleValueType:dst_reg_1_77
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_78
[lookInsideStruct] singleValueType:dst_reg_1_78
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_79
[lookInsideStruct] singleValueType:dst_reg_1_79
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_80
[lookInsideStruct] singleValueType:dst_reg_1_80
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_81
[lookInsideStruct] singleValueType:dst_reg_1_81
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_82
[lookInsideStruct] singleValueType:dst_reg_1_82
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_83
[lookInsideStruct] singleValueType:dst_reg_1_83
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_84
[lookInsideStruct] singleValueType:dst_reg_1_84
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_85
[lookInsideStruct] singleValueType:dst_reg_1_85
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_86
[lookInsideStruct] singleValueType:dst_reg_1_86
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_87
[lookInsideStruct] singleValueType:dst_reg_1_87
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_88
[lookInsideStruct] singleValueType:dst_reg_1_88
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_89
[lookInsideStruct] singleValueType:dst_reg_1_89
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_90
[lookInsideStruct] singleValueType:src_reg_1_90
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_91
[lookInsideStruct] singleValueType:src_reg_1_91
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_92
[lookInsideStruct] singleValueType:src_reg_1_92
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_93
[lookInsideStruct] singleValueType:src_reg_1_93
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_94
[lookInsideStruct] singleValueType:src_reg_1_94
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_95
[lookInsideStruct] singleValueType:src_reg_1_95
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_96
[lookInsideStruct] singleValueType:src_reg_1_96
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_97
[lookInsideStruct] singleValueType:src_reg_1_97
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_98
[lookInsideStruct] singleValueType:src_reg_1_98
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_99
[lookInsideStruct] singleValueType:src_reg_1_99
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_100
[lookInsideStruct] singleValueType:src_reg_1_100
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_101
[lookInsideStruct] singleValueType:src_reg_1_101
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_102
[lookInsideStruct] singleValueType:src_reg_1_102
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_103
[lookInsideStruct] singleValueType:src_reg_1_103
[setupBVTreeForArg] returning BVTree: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then98.i
[handleMemoryPhiNode] incomingAccessI: 12 = MemoryDef(11)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_1_90)
(= src_reg_1_15 src_reg_1_91)
(= src_reg_1_16 src_reg_1_92)
(= src_reg_1_17 src_reg_1_93)
(= src_reg_1_18 src_reg_1_94)
(= src_reg_1_19 src_reg_1_95)
(= src_reg_1_20 src_reg_1_96)
(= src_reg_1_21 src_reg_1_97)
(= src_reg_1_22 src_reg_1_98)
(= src_reg_1_23 src_reg_1_99)
(= src_reg_1_24 src_reg_1_100)
(= src_reg_1_25 src_reg_1_101)
(= src_reg_1_26 src_reg_1_102)
(= src_reg_1_27 src_reg_1_103)
(= #x00000001 dst_reg_1_76)
(= dst_reg_1_1 dst_reg_1_77)
(= dst_reg_1_2 dst_reg_1_78)
(= dst_reg_1_3 dst_reg_1_79)
(= dst_reg_1_4 dst_reg_1_80)
(= dst_reg_1_5 dst_reg_1_81)
(= #x8000000000000000 dst_reg_1_82)
(= #x7fffffffffffffff dst_reg_1_83)
(= dst_reg_1_8 dst_reg_1_84)
(= dst_reg_1_9 dst_reg_1_85)
(= dst_reg_1_10 dst_reg_1_86)
(= dst_reg_1_11 dst_reg_1_87)
(= dst_reg_1_12 dst_reg_1_88)
(= dst_reg_1_13 dst_reg_1_89)
]
[handleMemoryPhiNode] incomingBBI: if.else101.i
[handleMemoryPhiNode] incomingAccessI: 14 = MemoryDef(13)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_1_90)
(= src_reg_1_15 src_reg_1_91)
(= src_reg_1_16 src_reg_1_92)
(= src_reg_1_17 src_reg_1_93)
(= src_reg_1_18 src_reg_1_94)
(= src_reg_1_19 src_reg_1_95)
(= src_reg_1_20 src_reg_1_96)
(= src_reg_1_21 src_reg_1_97)
(= src_reg_1_22 src_reg_1_98)
(= src_reg_1_23 src_reg_1_99)
(= src_reg_1_24 src_reg_1_100)
(= src_reg_1_25 src_reg_1_101)
(= src_reg_1_26 src_reg_1_102)
(= src_reg_1_27 src_reg_1_103)
(= #x00000001 dst_reg_1_76)
(= dst_reg_1_1 dst_reg_1_77)
(= dst_reg_1_2 dst_reg_1_78)
(= dst_reg_1_3 dst_reg_1_79)
(= dst_reg_1_4 dst_reg_1_80)
(= dst_reg_1_5 dst_reg_1_81)
(= sub.i.i_1_61 dst_reg_1_82)
(= sub.i46.i_1_68 dst_reg_1_83)
(= dst_reg_1_8 dst_reg_1_84)
(= dst_reg_1_9 dst_reg_1_85)
(= dst_reg_1_10 dst_reg_1_86)
(= dst_reg_1_11 dst_reg_1_87)
(= dst_reg_1_12 dst_reg_1_88)
(= dst_reg_1_13 dst_reg_1_89)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else101.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= sub.i.i_1_61 dst_reg_1_82)
  (= sub.i46.i_1_68 dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
<if.then98.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= #x8000000000000000 dst_reg_1_82)
  (= #x7fffffffffffffff dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
-------------------
  %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i232.i = load i64, i64* %umin_value106.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i232.i = load i64, i64* %umin_value106.i, align 8
[handleLoadInst] pointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i232.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i232.i_1_104
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i232.i_1_104
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleLoadInst] (= dst_reg_1_8 i232.i_1_104)
[printBBAssertionsMap] 
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:1
  (= dst_reg_1_8 i232.i_1_104)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp107.i = icmp ult i64 %i232.i, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i232.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i232.i_1_104
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_1_35
[getBitVecSingValType]   %cmp107.i = icmp ult i64 %i232.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp107.i_1_105
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp107.i_1_105
[handleICmpInst] (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  br i1 %cmp107.i, label %if.then109.i, label %if.else112.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then109.i
=========================
-------------------
  store i64 0, i64* %umin_value106.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryPhi({if.then98.i,12},{if.else101.i,14})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_84 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %umax_value111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value111.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(35)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_85 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  br label %if.end117.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else112.i
=========================
-------------------
  %sub114.i = sub i64 %i232.i, %src_reg1.sroa.22.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i232.i = load i64, i64* %umin_value106.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] opResVal:   %sub114.i = sub i64 %i232.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType]   %i232.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i232.i_1_104
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_1_35
[getBitVecSingValType]   %sub114.i = sub i64 %i232.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub114.i_1_108
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub114.i_1_108
[handleBinaryOperatorInst] SUB instruction
(= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
-------------------
  store i64 %sub114.i, i64* %umin_value106.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %sub114.i = sub i64 %i232.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub114.i_1_108
[handleStoreInst] BVToStore: sub114.i_1_108
[handleStoreInst] destPointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryPhi({if.then98.i,12},{if.else101.i,14})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_84 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ sub114.i_1_108 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %umax_value115.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value115.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i233.i = load i64, i64* %umax_value115.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i233.i = load i64, i64* %umax_value115.i, align 8
[handleLoadInst] pointerValue:   %umax_value115.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i233.i = load i64, i64* %umax_value115.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i233.i_1_109
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i233.i_1_109
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleLoadInst] (= dst_reg_1_9 i233.i_1_109)
[printBBAssertionsMap] 
BasicBlock: if.else112.i, Size:2
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then109.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %sub116.i = sub i64 %i233.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i233.i = load i64, i64* %umax_value115.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %sub116.i = sub i64 %i233.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %i233.i = load i64, i64* %umax_value115.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i233.i_1_109
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_1_34
[getBitVecSingValType]   %sub116.i = sub i64 %i233.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub116.i_1_110
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub116.i_1_110
[handleBinaryOperatorInst] SUB instruction
(= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))
-------------------
  store i64 %sub116.i, i64* %umax_value115.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %sub116.i = sub i64 %i233.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub116.i_1_110
[handleStoreInst] BVToStore: sub116.i_1_110
[handleStoreInst] destPointerValue:   %umax_value115.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(35)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value115.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_85 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ sub116.i_1_110 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  br label %if.end117.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end117.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_111
[lookInsideStruct] singleValueType:dst_reg_1_111
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_112
[lookInsideStruct] singleValueType:dst_reg_1_112
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_113
[lookInsideStruct] singleValueType:dst_reg_1_113
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_114
[lookInsideStruct] singleValueType:dst_reg_1_114
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_115
[lookInsideStruct] singleValueType:dst_reg_1_115
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_116
[lookInsideStruct] singleValueType:dst_reg_1_116
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_117
[lookInsideStruct] singleValueType:dst_reg_1_117
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_118
[lookInsideStruct] singleValueType:dst_reg_1_118
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_119
[lookInsideStruct] singleValueType:dst_reg_1_119
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_120
[lookInsideStruct] singleValueType:dst_reg_1_120
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_121
[lookInsideStruct] singleValueType:dst_reg_1_121
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_122
[lookInsideStruct] singleValueType:dst_reg_1_122
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_123
[lookInsideStruct] singleValueType:dst_reg_1_123
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_124
[lookInsideStruct] singleValueType:dst_reg_1_124
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_125
[lookInsideStruct] singleValueType:src_reg_1_125
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_126
[lookInsideStruct] singleValueType:src_reg_1_126
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_127
[lookInsideStruct] singleValueType:src_reg_1_127
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_128
[lookInsideStruct] singleValueType:src_reg_1_128
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_129
[lookInsideStruct] singleValueType:src_reg_1_129
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_130
[lookInsideStruct] singleValueType:src_reg_1_130
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_131
[lookInsideStruct] singleValueType:src_reg_1_131
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_132
[lookInsideStruct] singleValueType:src_reg_1_132
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_133
[lookInsideStruct] singleValueType:src_reg_1_133
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_134
[lookInsideStruct] singleValueType:src_reg_1_134
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_135
[lookInsideStruct] singleValueType:src_reg_1_135
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_136
[lookInsideStruct] singleValueType:src_reg_1_136
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_137
[lookInsideStruct] singleValueType:src_reg_1_137
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_138
[lookInsideStruct] singleValueType:src_reg_1_138
[setupBVTreeForArg] returning BVTree: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then109.i
[handleMemoryPhiNode] incomingAccessI: 16 = MemoryDef(15)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_90 src_reg_1_125)
(= src_reg_1_91 src_reg_1_126)
(= src_reg_1_92 src_reg_1_127)
(= src_reg_1_93 src_reg_1_128)
(= src_reg_1_94 src_reg_1_129)
(= src_reg_1_95 src_reg_1_130)
(= src_reg_1_96 src_reg_1_131)
(= src_reg_1_97 src_reg_1_132)
(= src_reg_1_98 src_reg_1_133)
(= src_reg_1_99 src_reg_1_134)
(= src_reg_1_100 src_reg_1_135)
(= src_reg_1_101 src_reg_1_136)
(= src_reg_1_102 src_reg_1_137)
(= src_reg_1_103 src_reg_1_138)
(= dst_reg_1_76 dst_reg_1_111)
(= dst_reg_1_77 dst_reg_1_112)
(= dst_reg_1_78 dst_reg_1_113)
(= dst_reg_1_79 dst_reg_1_114)
(= dst_reg_1_80 dst_reg_1_115)
(= dst_reg_1_81 dst_reg_1_116)
(= dst_reg_1_82 dst_reg_1_117)
(= dst_reg_1_83 dst_reg_1_118)
(= #x0000000000000000 dst_reg_1_119)
(= #xffffffffffffffff dst_reg_1_120)
(= dst_reg_1_86 dst_reg_1_121)
(= dst_reg_1_87 dst_reg_1_122)
(= dst_reg_1_88 dst_reg_1_123)
(= dst_reg_1_89 dst_reg_1_124)
]
[handleMemoryPhiNode] incomingBBI: if.else112.i
[handleMemoryPhiNode] incomingAccessI: 18 = MemoryDef(17)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_90 src_reg_1_125)
(= src_reg_1_91 src_reg_1_126)
(= src_reg_1_92 src_reg_1_127)
(= src_reg_1_93 src_reg_1_128)
(= src_reg_1_94 src_reg_1_129)
(= src_reg_1_95 src_reg_1_130)
(= src_reg_1_96 src_reg_1_131)
(= src_reg_1_97 src_reg_1_132)
(= src_reg_1_98 src_reg_1_133)
(= src_reg_1_99 src_reg_1_134)
(= src_reg_1_100 src_reg_1_135)
(= src_reg_1_101 src_reg_1_136)
(= src_reg_1_102 src_reg_1_137)
(= src_reg_1_103 src_reg_1_138)
(= dst_reg_1_76 dst_reg_1_111)
(= dst_reg_1_77 dst_reg_1_112)
(= dst_reg_1_78 dst_reg_1_113)
(= dst_reg_1_79 dst_reg_1_114)
(= dst_reg_1_80 dst_reg_1_115)
(= dst_reg_1_81 dst_reg_1_116)
(= dst_reg_1_82 dst_reg_1_117)
(= dst_reg_1_83 dst_reg_1_118)
(= sub114.i_1_108 dst_reg_1_119)
(= sub116.i_1_110 dst_reg_1_120)
(= dst_reg_1_86 dst_reg_1_121)
(= dst_reg_1_87 dst_reg_1_122)
(= dst_reg_1_88 dst_reg_1_123)
(= dst_reg_1_89 dst_reg_1_124)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else112.i, if.end117.i> :
  (= src_reg_1_90 src_reg_1_125)
  (= src_reg_1_91 src_reg_1_126)
  (= src_reg_1_92 src_reg_1_127)
  (= src_reg_1_93 src_reg_1_128)
  (= src_reg_1_94 src_reg_1_129)
  (= src_reg_1_95 src_reg_1_130)
  (= src_reg_1_96 src_reg_1_131)
  (= src_reg_1_97 src_reg_1_132)
  (= src_reg_1_98 src_reg_1_133)
  (= src_reg_1_99 src_reg_1_134)
  (= src_reg_1_100 src_reg_1_135)
  (= src_reg_1_101 src_reg_1_136)
  (= src_reg_1_102 src_reg_1_137)
  (= src_reg_1_103 src_reg_1_138)
  (= dst_reg_1_76 dst_reg_1_111)
  (= dst_reg_1_77 dst_reg_1_112)
  (= dst_reg_1_78 dst_reg_1_113)
  (= dst_reg_1_79 dst_reg_1_114)
  (= dst_reg_1_80 dst_reg_1_115)
  (= dst_reg_1_81 dst_reg_1_116)
  (= dst_reg_1_82 dst_reg_1_117)
  (= dst_reg_1_83 dst_reg_1_118)
  (= sub114.i_1_108 dst_reg_1_119)
  (= sub116.i_1_110 dst_reg_1_120)
  (= dst_reg_1_86 dst_reg_1_121)
  (= dst_reg_1_87 dst_reg_1_122)
  (= dst_reg_1_88 dst_reg_1_123)
  (= dst_reg_1_89 dst_reg_1_124)
<if.then109.i, if.end117.i> :
  (= src_reg_1_90 src_reg_1_125)
  (= src_reg_1_91 src_reg_1_126)
  (= src_reg_1_92 src_reg_1_127)
  (= src_reg_1_93 src_reg_1_128)
  (= src_reg_1_94 src_reg_1_129)
  (= src_reg_1_95 src_reg_1_130)
  (= src_reg_1_96 src_reg_1_131)
  (= src_reg_1_97 src_reg_1_132)
  (= src_reg_1_98 src_reg_1_133)
  (= src_reg_1_99 src_reg_1_134)
  (= src_reg_1_100 src_reg_1_135)
  (= src_reg_1_101 src_reg_1_136)
  (= src_reg_1_102 src_reg_1_137)
  (= src_reg_1_103 src_reg_1_138)
  (= dst_reg_1_76 dst_reg_1_111)
  (= dst_reg_1_77 dst_reg_1_112)
  (= dst_reg_1_78 dst_reg_1_113)
  (= dst_reg_1_79 dst_reg_1_114)
  (= dst_reg_1_80 dst_reg_1_115)
  (= dst_reg_1_81 dst_reg_1_116)
  (= dst_reg_1_82 dst_reg_1_117)
  (= dst_reg_1_83 dst_reg_1_118)
  (= #x0000000000000000 dst_reg_1_119)
  (= #xffffffffffffffff dst_reg_1_120)
  (= dst_reg_1_86 dst_reg_1_121)
  (= dst_reg_1_87 dst_reg_1_122)
  (= dst_reg_1_88 dst_reg_1_123)
  (= dst_reg_1_89 dst_reg_1_124)
<if.else101.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= sub.i.i_1_61 dst_reg_1_82)
  (= sub.i46.i_1_68 dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
<if.then98.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= #x8000000000000000 dst_reg_1_82)
  (= #x7fffffffffffffff dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
-------------------
  %i234.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i234.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i234.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i234.i_1_139
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i234.i_1_139
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleLoadInst] (= dst_reg_1_4 i234.i_1_139)
[printBBAssertionsMap] 
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end117.i, Size:1
  (= dst_reg_1_4 i234.i_1_139)
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then109.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i234.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %i234.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i234.i_1_139
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_1_30
[getBitVecSingValType]   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i51.i_1_140
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i51.i_1_140
[handleBinaryOperatorInst] SUB instruction
(= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
-------------------
  %add.i52.i = add i64 %sub.i51.i, %i215.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] opResVal:   %add.i52.i = add i64 %sub.i51.i, %i215.i
[getBitVecSingValType]   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i51.i_1_140
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_1_38
[getBitVecSingValType]   %add.i52.i = add i64 %sub.i51.i, %i215.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i52.i_1_141
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i52.i_1_141
[handleBinaryOperatorInst] ADD instruction
(= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
-------------------
  %sub3.i.i = sub i64 %sub.i51.i, %src_reg1.sroa.10.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] opResVal:   %sub3.i.i = sub i64 %sub.i51.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType]   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i51.i_1_140
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_1_31
[getBitVecSingValType]   %sub3.i.i = sub i64 %sub.i51.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub3.i.i_1_142
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub3.i.i_1_142
[handleBinaryOperatorInst] SUB instruction
(= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
-------------------
  %xor.i53.i = xor i64 %add.i52.i, %sub3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i52.i = add i64 %sub.i51.i, %i215.i
[handleBinaryOperatorInst] op1Val:   %sub3.i.i = sub i64 %sub.i51.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] opResVal:   %xor.i53.i = xor i64 %add.i52.i, %sub3.i.i
[getBitVecSingValType]   %add.i52.i = add i64 %sub.i51.i, %i215.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i52.i_1_141
[getBitVecSingValType]   %sub3.i.i = sub i64 %sub.i51.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub3.i.i_1_142
[getBitVecSingValType]   %xor.i53.i = xor i64 %add.i52.i, %sub3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i53.i_1_143
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i53.i_1_143
[handleBinaryOperatorInst] XOR instruction
(= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
-------------------
  %or.i54.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] opResVal:   %or.i54.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_1_38
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_1_31
[getBitVecSingValType]   %or.i54.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i54.i_1_144
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i54.i_1_144
[handleBinaryOperatorInst] OR instruction
(= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
-------------------
  %or6.i.i = or i64 %or.i54.i, %xor.i53.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i54.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] op1Val:   %xor.i53.i = xor i64 %add.i52.i, %sub3.i.i
[handleBinaryOperatorInst] opResVal:   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[getBitVecSingValType]   %or.i54.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i54.i_1_144
[getBitVecSingValType]   %xor.i53.i = xor i64 %add.i52.i, %sub3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i53.i_1_143
[getBitVecSingValType]   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or6.i.i_1_145
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or6.i.i_1_145
[handleBinaryOperatorInst] OR instruction
(= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
-------------------
  %neg.i55.i = xor i64 %or6.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i55.i = xor i64 %or6.i.i, -1
[getBitVecSingValType]   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or6.i.i_1_145
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i55.i = xor i64 %or6.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i55.i_1_147
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i55.i_1_147
[handleBinaryOperatorInst] XOR instruction
(= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
-------------------
  %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val:   %neg.i55.i = xor i64 %or6.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
[getBitVecSingValType]   %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i51.i_1_140
[getBitVecSingValType]   %neg.i55.i = xor i64 %or6.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i55.i_1_147
[getBitVecSingValType]   %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i56.i_1_148
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i56.i_1_148
[handleBinaryOperatorInst] AND instruction
(= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
-------------------
  store i64 %and.i56.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i56.i_1_148
[handleStoreInst] BVToStore: and.i56.i_1_148
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryPhi({if.then109.i,16},{if.else112.i,18})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_115 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i56.i_1_148 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  store i64 %or6.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or6.i.i_1_145
[handleStoreInst] BVToStore: or6.i.i_1_145
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or6.i.i_1_145 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %i.i322.i = load i64, i64* %smin_value91.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[handleLoadInst] pointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then98.i,12},{if.else101.i,14})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i322.i_1_149
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i322.i_1_149
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleLoadInst] (= dst_reg_1_82 i.i322.i_1_149)
[printBBAssertionsMap] 
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end117.i, Size:10
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then109.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_1_149
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i323.i_1_151
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i323.i_1_151
[handleICmpInst] (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then109.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then98.i,12},{if.else101.i,14})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i.i_1_152
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i.i_1_152
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleLoadInst] (= dst_reg_1_83 i33.i.i_1_152)
[printBBAssertionsMap] 
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false.i.i, Size:1
  (= dst_reg_1_83 i33.i.i_1_152)
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then109.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_1_152
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i325.i_1_154
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i325.i_1_154
[handleICmpInst] (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))
BasicBlock: if.else101.i, Size:0
BasicBlock: if.then98.i, Size:0
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then109.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)

-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i329.i
=========================
-------------------
  %i34.i.i = load i64, i64* %umin_value106.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i.i = load i64, i64* %umin_value106.i, align 8
[handleLoadInst] pointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then109.i,16},{if.else112.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i.i_1_155
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i.i_1_155
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleLoadInst] (= dst_reg_1_119 i34.i.i_1_155)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:1
  (= dst_reg_1_119 i34.i.i_1_155)
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_1_149
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_1_155
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i.i_1_156
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i.i_1_156
[handleICmpInst] (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:2
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 20 = MemoryDef(19)
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i.i_1_156
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_1_149
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_1_155
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i327.i_1_157
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i327.i_1_157
[handleSelectInst] z3ExprSelectOp1: cmp3.i.i_1_156
[handleSelectInst] z3ExprSelectOp2: i.i322.i_1_149
[handleSelectInst] z3ExprSelectOp3: i34.i.i_1_155
[handleSelectInst] z3ExprRes: cond.i327.i_1_157
[handleSelectInst](ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
-------------------
  store i64 %cond.i327.i, i64* %umin_value106.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_1_157
[handleStoreInst] BVToStore: cond.i327.i_1_157
[handleStoreInst] destPointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_119 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_1_157 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  store i64 %cond.i327.i, i64* %smin_value91.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_1_157
[handleStoreInst] BVToStore: cond.i327.i_1_157
[handleStoreInst] destPointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_117 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_1_157 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then98.i,12},{if.else101.i,14})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i.i_1_158
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i.i_1_158
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
[handleLoadInst] (= dst_reg_1_83 i35.i.i_1_158)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:4
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then109.i,16},{if.else112.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i.i_1_159
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i.i_1_159
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleLoadInst] (= dst_reg_1_120 i36.i.i_1_159)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:5
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_1_158
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_1_159
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i.i_1_160
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i.i_1_160
[handleICmpInst] (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:6
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 22 = MemoryDef(21)
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleSelectInst]SelectMap:
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i.i_1_160
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_1_158
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_1_159
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i.i_1_161
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i.i_1_161
[handleSelectInst] z3ExprSelectOp1: cmp8.i.i_1_160
[handleSelectInst] z3ExprSelectOp2: i35.i.i_1_158
[handleSelectInst] z3ExprSelectOp3: i36.i.i_1_159
[handleSelectInst] z3ExprRes: cond12.i.i_1_161
[handleSelectInst](ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_1_161
[handleStoreInst] BVToStore: cond12.i.i_1_161
[handleStoreInst] destPointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_1_161 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_1_161
[handleStoreInst] BVToStore: cond12.i.i_1_161
[handleStoreInst] destPointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_118 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_1_161 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
umax_value15.i.i, dst_reg, [9]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then109.i,16},{if.else112.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
umax_value15.i.i, dst_reg, [9]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i.i_1_162
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i.i_1_162
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleLoadInst] (= dst_reg_1_120 i37.i.i_1_162)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:1
  (= dst_reg_1_120 i37.i.i_1_162)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_1_162
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i.i_1_164
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i.i_1_164
[handleICmpInst] (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:2
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %i38.i.i = load i64, i64* %umin_value106.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i.i = load i64, i64* %umin_value106.i, align 8
[handleLoadInst] pointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then109.i,16},{if.else112.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
umax_value15.i.i, dst_reg, [9]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i.i_1_165
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i.i_1_165
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleLoadInst] (= dst_reg_1_119 i38.i.i_1_165)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value91.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_1_165
[handleStoreInst] BVToStore: i38.i.i_1_165
[handleStoreInst] destPointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_117 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i.i_1_165 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_1_152
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_1_162
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i.i_1_166
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i.i_1_166
[handleICmpInst] (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:1
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 25 = MemoryDef(20)
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 

[handleSelectInst]SelectMap:
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i.i_1_166
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_1_152
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_1_162
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i.i_1_167
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i.i_1_167
[handleSelectInst] z3ExprSelectOp1: cmp23.i.i_1_166
[handleSelectInst] z3ExprSelectOp2: i33.i.i_1_152
[handleSelectInst] z3ExprSelectOp3: i37.i.i_1_162
[handleSelectInst] z3ExprRes: cond27.i.i_1_167
[handleSelectInst](ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_1_167
[handleStoreInst] BVToStore: cond27.i.i_1_167
[handleStoreInst] destPointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] definingMemoryAccess: 25 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_1_167 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}

-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_1_167
[handleStoreInst] BVToStore: cond27.i.i_1_167
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_118 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_1_167 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_1_165
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i330.i_1_169
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i330.i_1_169
[handleICmpInst] (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_1_149
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_1_165
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i.i_1_170
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i.i_1_170
[handleICmpInst] (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:1
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 27 = MemoryDef(26)
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 

[handleSelectInst]SelectMap:
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i.i_1_170
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value91.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_1_149
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_1_165
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i.i_1_171
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i.i_1_171
[handleSelectInst] z3ExprSelectOp1: cmp36.i.i_1_170
[handleSelectInst] z3ExprSelectOp2: i.i322.i_1_149
[handleSelectInst] z3ExprSelectOp3: i38.i.i_1_165
[handleSelectInst] z3ExprRes: cond40.i.i_1_171
[handleSelectInst](ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
-------------------
  store i64 %cond40.i.i, i64* %umin_value106.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_1_171
[handleStoreInst] BVToStore: cond40.i.i_1_171
[handleStoreInst] destPointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_119 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_1_171 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

-------------------
  store i64 %cond40.i.i, i64* %smin_value91.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_1_171
[handleStoreInst] BVToStore: cond40.i.i_1_171
[handleStoreInst] destPointerValue:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_117 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_1_171 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_1_162
[handleStoreInst] BVToStore: i37.i.i_1_162
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_118 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i.i_1_162 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_172
[lookInsideStruct] singleValueType:dst_reg_1_172
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_173
[lookInsideStruct] singleValueType:dst_reg_1_173
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_174
[lookInsideStruct] singleValueType:dst_reg_1_174
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_175
[lookInsideStruct] singleValueType:dst_reg_1_175
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_176
[lookInsideStruct] singleValueType:dst_reg_1_176
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_177
[lookInsideStruct] singleValueType:dst_reg_1_177
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_178
[lookInsideStruct] singleValueType:dst_reg_1_178
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_179
[lookInsideStruct] singleValueType:dst_reg_1_179
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_180
[lookInsideStruct] singleValueType:dst_reg_1_180
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_181
[lookInsideStruct] singleValueType:dst_reg_1_181
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_182
[lookInsideStruct] singleValueType:dst_reg_1_182
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_183
[lookInsideStruct] singleValueType:dst_reg_1_183
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_184
[lookInsideStruct] singleValueType:dst_reg_1_184
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_185
[lookInsideStruct] singleValueType:dst_reg_1_185
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_186
[lookInsideStruct] singleValueType:src_reg_1_186
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_187
[lookInsideStruct] singleValueType:src_reg_1_187
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_188
[lookInsideStruct] singleValueType:src_reg_1_188
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_189
[lookInsideStruct] singleValueType:src_reg_1_189
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_190
[lookInsideStruct] singleValueType:src_reg_1_190
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_191
[lookInsideStruct] singleValueType:src_reg_1_191
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_192
[lookInsideStruct] singleValueType:src_reg_1_192
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_193
[lookInsideStruct] singleValueType:src_reg_1_193
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_194
[lookInsideStruct] singleValueType:src_reg_1_194
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_195
[lookInsideStruct] singleValueType:src_reg_1_195
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_196
[lookInsideStruct] singleValueType:src_reg_1_196
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_197
[lookInsideStruct] singleValueType:src_reg_1_197
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_198
[lookInsideStruct] singleValueType:src_reg_1_198
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_199
[lookInsideStruct] singleValueType:src_reg_1_199
[setupBVTreeForArg] returning BVTree: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i329.i
[handleMemoryPhiNode] incomingAccessI: 24 = MemoryDef(23)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_125 src_reg_1_186)
(= src_reg_1_126 src_reg_1_187)
(= src_reg_1_127 src_reg_1_188)
(= src_reg_1_128 src_reg_1_189)
(= src_reg_1_129 src_reg_1_190)
(= src_reg_1_130 src_reg_1_191)
(= src_reg_1_131 src_reg_1_192)
(= src_reg_1_132 src_reg_1_193)
(= src_reg_1_133 src_reg_1_194)
(= src_reg_1_134 src_reg_1_195)
(= src_reg_1_135 src_reg_1_196)
(= src_reg_1_136 src_reg_1_197)
(= src_reg_1_137 src_reg_1_198)
(= src_reg_1_138 src_reg_1_199)
(= dst_reg_1_111 dst_reg_1_172)
(= dst_reg_1_112 dst_reg_1_173)
(= dst_reg_1_113 dst_reg_1_174)
(= dst_reg_1_114 dst_reg_1_175)
(= and.i56.i_1_148 dst_reg_1_176)
(= or6.i.i_1_145 dst_reg_1_177)
(= cond.i327.i_1_157 dst_reg_1_178)
(= cond12.i.i_1_161 dst_reg_1_179)
(= cond.i327.i_1_157 dst_reg_1_180)
(= cond12.i.i_1_161 dst_reg_1_181)
(= dst_reg_1_121 dst_reg_1_182)
(= dst_reg_1_122 dst_reg_1_183)
(= dst_reg_1_123 dst_reg_1_184)
(= dst_reg_1_124 dst_reg_1_185)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i.i
[handleMemoryPhiNode] incomingAccessI: 27 = MemoryDef(26)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_125 src_reg_1_186)
(= src_reg_1_126 src_reg_1_187)
(= src_reg_1_127 src_reg_1_188)
(= src_reg_1_128 src_reg_1_189)
(= src_reg_1_129 src_reg_1_190)
(= src_reg_1_130 src_reg_1_191)
(= src_reg_1_131 src_reg_1_192)
(= src_reg_1_132 src_reg_1_193)
(= src_reg_1_133 src_reg_1_194)
(= src_reg_1_134 src_reg_1_195)
(= src_reg_1_135 src_reg_1_196)
(= src_reg_1_136 src_reg_1_197)
(= src_reg_1_137 src_reg_1_198)
(= src_reg_1_138 src_reg_1_199)
(= dst_reg_1_111 dst_reg_1_172)
(= dst_reg_1_112 dst_reg_1_173)
(= dst_reg_1_113 dst_reg_1_174)
(= dst_reg_1_114 dst_reg_1_175)
(= and.i56.i_1_148 dst_reg_1_176)
(= or6.i.i_1_145 dst_reg_1_177)
(= i38.i.i_1_165 dst_reg_1_178)
(= cond27.i.i_1_167 dst_reg_1_179)
(= dst_reg_1_119 dst_reg_1_180)
(= cond27.i.i_1_167 dst_reg_1_181)
(= dst_reg_1_121 dst_reg_1_182)
(= dst_reg_1_122 dst_reg_1_183)
(= dst_reg_1_123 dst_reg_1_184)
(= dst_reg_1_124 dst_reg_1_185)
]
[handleMemoryPhiNode] incomingBBI: if.else.i331.i
[handleMemoryPhiNode] incomingAccessI: 20 = MemoryDef(19)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_125 src_reg_1_186)
(= src_reg_1_126 src_reg_1_187)
(= src_reg_1_127 src_reg_1_188)
(= src_reg_1_128 src_reg_1_189)
(= src_reg_1_129 src_reg_1_190)
(= src_reg_1_130 src_reg_1_191)
(= src_reg_1_131 src_reg_1_192)
(= src_reg_1_132 src_reg_1_193)
(= src_reg_1_133 src_reg_1_194)
(= src_reg_1_134 src_reg_1_195)
(= src_reg_1_135 src_reg_1_196)
(= src_reg_1_136 src_reg_1_197)
(= src_reg_1_137 src_reg_1_198)
(= src_reg_1_138 src_reg_1_199)
(= dst_reg_1_111 dst_reg_1_172)
(= dst_reg_1_112 dst_reg_1_173)
(= dst_reg_1_113 dst_reg_1_174)
(= dst_reg_1_114 dst_reg_1_175)
(= and.i56.i_1_148 dst_reg_1_176)
(= or6.i.i_1_145 dst_reg_1_177)
(= dst_reg_1_117 dst_reg_1_178)
(= dst_reg_1_118 dst_reg_1_179)
(= dst_reg_1_119 dst_reg_1_180)
(= dst_reg_1_120 dst_reg_1_181)
(= dst_reg_1_121 dst_reg_1_182)
(= dst_reg_1_122 dst_reg_1_183)
(= dst_reg_1_123 dst_reg_1_184)
(= dst_reg_1_124 dst_reg_1_185)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i.i
[handleMemoryPhiNode] incomingAccessI: 30 = MemoryDef(29)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_125 src_reg_1_186)
(= src_reg_1_126 src_reg_1_187)
(= src_reg_1_127 src_reg_1_188)
(= src_reg_1_128 src_reg_1_189)
(= src_reg_1_129 src_reg_1_190)
(= src_reg_1_130 src_reg_1_191)
(= src_reg_1_131 src_reg_1_192)
(= src_reg_1_132 src_reg_1_193)
(= src_reg_1_133 src_reg_1_194)
(= src_reg_1_134 src_reg_1_195)
(= src_reg_1_135 src_reg_1_196)
(= src_reg_1_136 src_reg_1_197)
(= src_reg_1_137 src_reg_1_198)
(= src_reg_1_138 src_reg_1_199)
(= dst_reg_1_111 dst_reg_1_172)
(= dst_reg_1_112 dst_reg_1_173)
(= dst_reg_1_113 dst_reg_1_174)
(= dst_reg_1_114 dst_reg_1_175)
(= and.i56.i_1_148 dst_reg_1_176)
(= or6.i.i_1_145 dst_reg_1_177)
(= cond40.i.i_1_171 dst_reg_1_178)
(= i37.i.i_1_162 dst_reg_1_179)
(= cond40.i.i_1_171 dst_reg_1_180)
(= dst_reg_1_120 dst_reg_1_181)
(= dst_reg_1_121 dst_reg_1_182)
(= dst_reg_1_122 dst_reg_1_183)
(= dst_reg_1_123 dst_reg_1_184)
(= dst_reg_1_124 dst_reg_1_185)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= cond40.i.i_1_171 dst_reg_1_178)
  (= i37.i.i_1_162 dst_reg_1_179)
  (= cond40.i.i_1_171 dst_reg_1_180)
  (= dst_reg_1_120 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= cond.i327.i_1_157 dst_reg_1_178)
  (= cond12.i.i_1_161 dst_reg_1_179)
  (= cond.i327.i_1_157 dst_reg_1_180)
  (= cond12.i.i_1_161 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= dst_reg_1_117 dst_reg_1_178)
  (= dst_reg_1_118 dst_reg_1_179)
  (= dst_reg_1_119 dst_reg_1_180)
  (= dst_reg_1_120 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.else112.i, if.end117.i> :
  (= src_reg_1_90 src_reg_1_125)
  (= src_reg_1_91 src_reg_1_126)
  (= src_reg_1_92 src_reg_1_127)
  (= src_reg_1_93 src_reg_1_128)
  (= src_reg_1_94 src_reg_1_129)
  (= src_reg_1_95 src_reg_1_130)
  (= src_reg_1_96 src_reg_1_131)
  (= src_reg_1_97 src_reg_1_132)
  (= src_reg_1_98 src_reg_1_133)
  (= src_reg_1_99 src_reg_1_134)
  (= src_reg_1_100 src_reg_1_135)
  (= src_reg_1_101 src_reg_1_136)
  (= src_reg_1_102 src_reg_1_137)
  (= src_reg_1_103 src_reg_1_138)
  (= dst_reg_1_76 dst_reg_1_111)
  (= dst_reg_1_77 dst_reg_1_112)
  (= dst_reg_1_78 dst_reg_1_113)
  (= dst_reg_1_79 dst_reg_1_114)
  (= dst_reg_1_80 dst_reg_1_115)
  (= dst_reg_1_81 dst_reg_1_116)
  (= dst_reg_1_82 dst_reg_1_117)
  (= dst_reg_1_83 dst_reg_1_118)
  (= sub114.i_1_108 dst_reg_1_119)
  (= sub116.i_1_110 dst_reg_1_120)
  (= dst_reg_1_86 dst_reg_1_121)
  (= dst_reg_1_87 dst_reg_1_122)
  (= dst_reg_1_88 dst_reg_1_123)
  (= dst_reg_1_89 dst_reg_1_124)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= i38.i.i_1_165 dst_reg_1_178)
  (= cond27.i.i_1_167 dst_reg_1_179)
  (= dst_reg_1_119 dst_reg_1_180)
  (= cond27.i.i_1_167 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.then109.i, if.end117.i> :
  (= src_reg_1_90 src_reg_1_125)
  (= src_reg_1_91 src_reg_1_126)
  (= src_reg_1_92 src_reg_1_127)
  (= src_reg_1_93 src_reg_1_128)
  (= src_reg_1_94 src_reg_1_129)
  (= src_reg_1_95 src_reg_1_130)
  (= src_reg_1_96 src_reg_1_131)
  (= src_reg_1_97 src_reg_1_132)
  (= src_reg_1_98 src_reg_1_133)
  (= src_reg_1_99 src_reg_1_134)
  (= src_reg_1_100 src_reg_1_135)
  (= src_reg_1_101 src_reg_1_136)
  (= src_reg_1_102 src_reg_1_137)
  (= src_reg_1_103 src_reg_1_138)
  (= dst_reg_1_76 dst_reg_1_111)
  (= dst_reg_1_77 dst_reg_1_112)
  (= dst_reg_1_78 dst_reg_1_113)
  (= dst_reg_1_79 dst_reg_1_114)
  (= dst_reg_1_80 dst_reg_1_115)
  (= dst_reg_1_81 dst_reg_1_116)
  (= dst_reg_1_82 dst_reg_1_117)
  (= dst_reg_1_83 dst_reg_1_118)
  (= #x0000000000000000 dst_reg_1_119)
  (= #xffffffffffffffff dst_reg_1_120)
  (= dst_reg_1_86 dst_reg_1_121)
  (= dst_reg_1_87 dst_reg_1_122)
  (= dst_reg_1_88 dst_reg_1_123)
  (= dst_reg_1_89 dst_reg_1_124)
<if.else101.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= sub.i.i_1_61 dst_reg_1_82)
  (= sub.i46.i_1_68 dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
<if.then98.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= #x8000000000000000 dst_reg_1_82)
  (= #x7fffffffffffffff dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
-------------------
  %i.i333.i = load i64, i64* %umin_value106.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value106.i, align 8
[handleLoadInst] pointerValue:   %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
umax_value15.i.i, dst_reg, [9]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_1_200
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_1_200
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleLoadInst] (= dst_reg_1_180 i.i333.i_1_200)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:1
  (= dst_reg_1_180 i.i333.i_1_200)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
umax_value15.i.i, dst_reg, [9]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value115.i, dst_reg, [9]
umax_value111.i, dst_reg, [9]
smax_value100.i, dst_reg, [7]
umax_value15.i.i, dst_reg, [9]
smax_value95.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value6.i.i, dst_reg, [7]
umin_value106.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smax_value.i324.i, dst_reg, [7]
smin_value91.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i.i_1_201
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i.i_1_201
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleLoadInst] (= dst_reg_1_181 i5.i.i_1_201)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:2
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value106.i, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i.i_1_201
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_1_200
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_1_202
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_1_202
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_1_202
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_1_204
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_1_204
[handleICmpInst] (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_1_202
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_1_206
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_1_206
[handleICmpInst] (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_1_202
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_1_208
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_1_208
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_1_206
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_1_208
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_1_202
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_1_209
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_1_209
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_1_206
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_1_208
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_1_202
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_1_209
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_1_206
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_1_212
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_1_212
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_1_206
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_1_212
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_1_209
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_1_214
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_1_214
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
  (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_1_212
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_1_216
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_1_216
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_1_209
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_1_218
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_1_218
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_1_214
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_1_218
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_1_209
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_1_219
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_1_219
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_1_214
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_1_218
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_1_209
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_1_219
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218)
     (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_1_214
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_1_216
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_1_212
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_1_220
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_1_220
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_1_214
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_1_216
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_1_212
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_1_220
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216)
     (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_1_219
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_1_222
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_1_222
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_1_219 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= tobool8.not.i.i.i.i.i_1_222 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
  (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
  (= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 #xfffffff0))
  (= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218)
     (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216)
     (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))
  (ite (bvult word.addr.1.i.i.i.i.i_1_219 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= tobool8.not.i.i.i.i.i_1_222 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_1_220
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_1_224
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_1_224
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_1_224 (bvadd num.1.i.i.i.i.i_1_220 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_1_219
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_1_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_1_226
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_1_226 (bvshl word.addr.1.i.i.i.i.i_1_219 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_1_222
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_1_226
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_1_219
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_1_227
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_1_227
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_1_222
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_1_226
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_1_219
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_1_227
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= word.addr.2.i.i.i.i.i_1_227 shl11.i.i.i.i.i_1_226)
     (= word.addr.2.i.i.i.i.i_1_227 word.addr.1.i.i.i.i.i_1_219))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_1_222
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_1_224
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_1_220
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_1_228
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_1_228
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_1_222
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_1_224
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_1_220
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_1_228
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= num.2.i.i.i.i.i_1_228 sub10.i.i.i.i.i_1_224)
     (= num.2.i.i.i.i.i_1_228 num.1.i.i.i.i.i_1_220))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_1_227
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_1_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_1_230
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_1_227 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= tobool14.not.i.i.i.i.i_1_230 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
  (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
  (= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 #xfffffff0))
  (= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218)
     (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216)
     (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))
  (ite (bvult word.addr.1.i.i.i.i.i_1_219 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= tobool8.not.i.i.i.i.i_1_222 #b0))
  (= sub10.i.i.i.i.i_1_224 (bvadd num.1.i.i.i.i.i_1_220 #xfffffff8))
  (= shl11.i.i.i.i.i_1_226 (bvshl word.addr.1.i.i.i.i.i_1_219 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= word.addr.2.i.i.i.i.i_1_227 shl11.i.i.i.i.i_1_226)
     (= word.addr.2.i.i.i.i.i_1_227 word.addr.1.i.i.i.i.i_1_219))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= num.2.i.i.i.i.i_1_228 sub10.i.i.i.i.i_1_224)
     (= num.2.i.i.i.i.i_1_228 num.1.i.i.i.i.i_1_220))
  (ite (bvult word.addr.2.i.i.i.i.i_1_227 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= tobool14.not.i.i.i.i.i_1_230 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_1_228
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_1_232
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_1_232
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_1_232 (bvadd num.2.i.i.i.i.i_1_228 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_1_227
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_1_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_1_234
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_1_234 (bvshl word.addr.2.i.i.i.i.i_1_227 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_1_230
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_1_234
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_1_227
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_1_235
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_1_235
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_1_230
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_1_234
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_1_227
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_1_235
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= word.addr.3.i.i.i.i.i_1_235 shl17.i.i.i.i.i_1_234)
     (= word.addr.3.i.i.i.i.i_1_235 word.addr.2.i.i.i.i.i_1_227))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_1_230
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_1_232
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_1_228
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_1_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_1_236
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_1_230
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_1_232
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_1_228
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_1_236
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= num.3.i.i.i.i.i_1_236 sub16.i.i.i.i.i_1_232)
     (= num.3.i.i.i.i.i_1_236 num.2.i.i.i.i.i_1_228))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_1_235
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_1_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_1_238
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_1_235 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= tobool20.not.i.i.i.i.i_1_238 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
  (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
  (= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 #xfffffff0))
  (= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218)
     (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216)
     (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))
  (ite (bvult word.addr.1.i.i.i.i.i_1_219 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= tobool8.not.i.i.i.i.i_1_222 #b0))
  (= sub10.i.i.i.i.i_1_224 (bvadd num.1.i.i.i.i.i_1_220 #xfffffff8))
  (= shl11.i.i.i.i.i_1_226 (bvshl word.addr.1.i.i.i.i.i_1_219 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= word.addr.2.i.i.i.i.i_1_227 shl11.i.i.i.i.i_1_226)
     (= word.addr.2.i.i.i.i.i_1_227 word.addr.1.i.i.i.i.i_1_219))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= num.2.i.i.i.i.i_1_228 sub10.i.i.i.i.i_1_224)
     (= num.2.i.i.i.i.i_1_228 num.1.i.i.i.i.i_1_220))
  (ite (bvult word.addr.2.i.i.i.i.i_1_227 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= tobool14.not.i.i.i.i.i_1_230 #b0))
  (= sub16.i.i.i.i.i_1_232 (bvadd num.2.i.i.i.i.i_1_228 #xfffffffc))
  (= shl17.i.i.i.i.i_1_234 (bvshl word.addr.2.i.i.i.i.i_1_227 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= word.addr.3.i.i.i.i.i_1_235 shl17.i.i.i.i.i_1_234)
     (= word.addr.3.i.i.i.i.i_1_235 word.addr.2.i.i.i.i.i_1_227))
  (ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= num.3.i.i.i.i.i_1_236 sub16.i.i.i.i.i_1_232)
     (= num.3.i.i.i.i.i_1_236 num.2.i.i.i.i.i_1_228))
  (ite (bvult word.addr.3.i.i.i.i.i_1_235 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= tobool20.not.i.i.i.i.i_1_238 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_1_236
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_1_240
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_1_240
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_1_240 (bvadd num.3.i.i.i.i.i_1_236 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_1_235
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_1_242
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_1_242
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_1_242 (bvshl word.addr.3.i.i.i.i.i_1_235 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_1_238
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_1_242
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_1_235
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_1_243
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_1_243
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_1_238
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_1_242
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_1_235
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_1_243
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= word.addr.4.i.i.i.i.i_1_243 shl23.i.i.i.i.i_1_242)
     (= word.addr.4.i.i.i.i.i_1_243 word.addr.3.i.i.i.i.i_1_235))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_1_238
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_1_240
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_1_236
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_1_244
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_1_244
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_1_238
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_1_240
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_1_236
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_1_244
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= num.4.i.i.i.i.i_1_244 sub22.i.i.i.i.i_1_240)
     (= num.4.i.i.i.i.i_1_244 num.3.i.i.i.i.i_1_236))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_1_243
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_1_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_1_246
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_1_246
   (bvlshr word.addr.4.i.i.i.i.i_1_243 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_1_246
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_1_247
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_1_247
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_1_247
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_1_246))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_1_244
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_1_247
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_1_248
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_1_248
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_1_248 (bvadd num.4.i.i.i.i.i_1_244 i.i.i.i.i.i.neg_1_247))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_1_248
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_1_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_1_250
[handleBinaryOperatorInst] AND instruction
(= phi.bo_1_250 (bvand add.i.i.i335.i_1_248 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, __reg_deduce_bounds.exit.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_1_253
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_1_253
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_1_250
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
    (= retval.0.i.i.i.i_1_253 phi.bo_1_250))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
    (= retval.0.i.i.i.i_1_253 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
    (= retval.0.i.i.i.i_1_253 phi.bo_1_250))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
    (= retval.0.i.i.i.i_1_253 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_1_253
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_1_256
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_1_256
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_1_253 #x0000003f)
     (= cmp.i.i.i_1_256 #b1)
     (= cmp.i.i.i_1_256 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
    (= retval.0.i.i.i.i_1_253 phi.bo_1_250))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
    (= retval.0.i.i.i.i_1_253 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_1_253 #x0000003f)
     (= cmp.i.i.i_1_256 #b1)
     (= cmp.i.i.i_1_256 #b0))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
  (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
  (= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 #xfffffff0))
  (= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218)
     (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216)
     (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))
  (ite (bvult word.addr.1.i.i.i.i.i_1_219 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= tobool8.not.i.i.i.i.i_1_222 #b0))
  (= sub10.i.i.i.i.i_1_224 (bvadd num.1.i.i.i.i.i_1_220 #xfffffff8))
  (= shl11.i.i.i.i.i_1_226 (bvshl word.addr.1.i.i.i.i.i_1_219 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= word.addr.2.i.i.i.i.i_1_227 shl11.i.i.i.i.i_1_226)
     (= word.addr.2.i.i.i.i.i_1_227 word.addr.1.i.i.i.i.i_1_219))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= num.2.i.i.i.i.i_1_228 sub10.i.i.i.i.i_1_224)
     (= num.2.i.i.i.i.i_1_228 num.1.i.i.i.i.i_1_220))
  (ite (bvult word.addr.2.i.i.i.i.i_1_227 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= tobool14.not.i.i.i.i.i_1_230 #b0))
  (= sub16.i.i.i.i.i_1_232 (bvadd num.2.i.i.i.i.i_1_228 #xfffffffc))
  (= shl17.i.i.i.i.i_1_234 (bvshl word.addr.2.i.i.i.i.i_1_227 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= word.addr.3.i.i.i.i.i_1_235 shl17.i.i.i.i.i_1_234)
     (= word.addr.3.i.i.i.i.i_1_235 word.addr.2.i.i.i.i.i_1_227))
  (ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= num.3.i.i.i.i.i_1_236 sub16.i.i.i.i.i_1_232)
     (= num.3.i.i.i.i.i_1_236 num.2.i.i.i.i.i_1_228))
  (ite (bvult word.addr.3.i.i.i.i.i_1_235 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= tobool20.not.i.i.i.i.i_1_238 #b0))
  (= sub22.i.i.i.i.i_1_240 (bvadd num.3.i.i.i.i.i_1_236 #x000000fe))
  (= shl23.i.i.i.i.i_1_242 (bvshl word.addr.3.i.i.i.i.i_1_235 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= word.addr.4.i.i.i.i.i_1_243 shl23.i.i.i.i.i_1_242)
     (= word.addr.4.i.i.i.i.i_1_243 word.addr.3.i.i.i.i.i_1_235))
  (ite (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= num.4.i.i.i.i.i_1_244 sub22.i.i.i.i.i_1_240)
     (= num.4.i.i.i.i.i_1_244 num.3.i.i.i.i.i_1_236))
  (= word.addr.4.lobit.i.i.i.i.i.neg_1_246
   (bvlshr word.addr.4.i.i.i.i.i_1_243 #x000000000000003f))
  (= i.i.i.i.i.i.neg_1_247
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_1_246))
  (= add.i.i.i335.i_1_248 (bvadd num.4.i.i.i.i.i_1_244 i.i.i.i.i.i.neg_1_247))
  (= phi.bo_1_250 (bvand add.i.i.i335.i_1_248 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:2
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
BasicBlock: if.end117.i, Size:11
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_1_253
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_1_257
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_1_257
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_1_257 ((_ zero_extend 32) retval.0.i.i.i.i_1_253))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_1_257
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_1_259
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_1_259
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_1_259 (bvshl #xffffffffffffffff sh_prom.i.i.i_1_257))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_1_259
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_1_261
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_1_261
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_1_261 (bvxor notmask.i.i.i_1_259 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value106.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_1_259
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value106.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_1_200
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_1_262
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_1_262
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_1_262 (bvand notmask.i.i.i_1_259 i.i333.i_1_200))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_1_256
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_1_262
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_1_264
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_1_264
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_1_256
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_1_262
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_1_264
[handleSelectInst](ite (= cmp.i.i.i_1_256 #b1)
     (= retval.sroa.0.0.i.i.i_1_264 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_1_264 and.i.i336.i_1_262))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
cond40.i.i,i.i322.i,i38.i.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i45.i,cmp1.i43.i,cmp2.i44.i
retval.0.i50.i,cmp1.i48.i,cmp2.i49.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_1_256
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_1_261
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_1_266
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_1_266
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_1_256
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_1_261
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_1_266
[handleSelectInst](ite (= cmp.i.i.i_1_256 #b1)
     (= retval.sroa.3.0.i.i.i_1_266 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_1_266 sub.i.i.i_1_261))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i56.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i56.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_1_264
[getBitVecSingValType]   %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i56.i_1_148
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i56.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_1_267
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_1_267
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_1_267 (bvor retval.sroa.0.0.i.i.i_1_264 and.i56.i_1_148))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_1_266
[getBitVecSingValType]   %or6.i.i = or i64 %or.i54.i, %xor.i53.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or6.i.i_1_145
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_1_268
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_1_268
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_1_268 (bvand retval.sroa.3.0.i.i.i_1_266 or6.i.i_1_145))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_1_268
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_1_270
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_1_270
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_1_270 (bvxor and.i1.i.i_1_268 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i56.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i56.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_1_267
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_1_270
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_1_271
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_1_271
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_1_271 (bvand or.i.i.i_1_267 neg.i.i.i_1_270))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_1_271
[handleStoreInst] BVToStore: and4.i.i.i_1_271
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_176 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_1_271 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_1_268
[handleStoreInst] BVToStore: and.i1.i.i_1_268
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_1_177 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_1_268 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ and.i1.i.i_1_268 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_272
[lookInsideStruct] singleValueType:dst_reg_1_272
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_273
[lookInsideStruct] singleValueType:dst_reg_1_273
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_274
[lookInsideStruct] singleValueType:dst_reg_1_274
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_275
[lookInsideStruct] singleValueType:dst_reg_1_275
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_276
[lookInsideStruct] singleValueType:dst_reg_1_276
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_277
[lookInsideStruct] singleValueType:dst_reg_1_277
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_278
[lookInsideStruct] singleValueType:dst_reg_1_278
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_279
[lookInsideStruct] singleValueType:dst_reg_1_279
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_280
[lookInsideStruct] singleValueType:dst_reg_1_280
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_281
[lookInsideStruct] singleValueType:dst_reg_1_281
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_282
[lookInsideStruct] singleValueType:dst_reg_1_282
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_283
[lookInsideStruct] singleValueType:dst_reg_1_283
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_284
[lookInsideStruct] singleValueType:dst_reg_1_284
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_285
[lookInsideStruct] singleValueType:dst_reg_1_285
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_286
[lookInsideStruct] singleValueType:src_reg_1_286
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_287
[lookInsideStruct] singleValueType:src_reg_1_287
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_288
[lookInsideStruct] singleValueType:src_reg_1_288
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_289
[lookInsideStruct] singleValueType:src_reg_1_289
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_290
[lookInsideStruct] singleValueType:src_reg_1_290
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_291
[lookInsideStruct] singleValueType:src_reg_1_291
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_292
[lookInsideStruct] singleValueType:src_reg_1_292
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_293
[lookInsideStruct] singleValueType:src_reg_1_293
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_294
[lookInsideStruct] singleValueType:src_reg_1_294
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_295
[lookInsideStruct] singleValueType:src_reg_1_295
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_296
[lookInsideStruct] singleValueType:src_reg_1_296
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_297
[lookInsideStruct] singleValueType:src_reg_1_297
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_298
[lookInsideStruct] singleValueType:src_reg_1_298
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_299
[lookInsideStruct] singleValueType:src_reg_1_299
[setupBVTreeForArg] returning BVTree: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
- dst_reg: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_1_286)
(= src_reg_1_15 src_reg_1_287)
(= src_reg_1_16 src_reg_1_288)
(= src_reg_1_17 src_reg_1_289)
(= src_reg_1_18 src_reg_1_290)
(= src_reg_1_19 src_reg_1_291)
(= src_reg_1_20 src_reg_1_292)
(= src_reg_1_21 src_reg_1_293)
(= src_reg_1_22 src_reg_1_294)
(= src_reg_1_23 src_reg_1_295)
(= src_reg_1_24 src_reg_1_296)
(= src_reg_1_25 src_reg_1_297)
(= src_reg_1_26 src_reg_1_298)
(= src_reg_1_27 src_reg_1_299)
(= #x00000001 dst_reg_1_272)
(= dst_reg_1_1 dst_reg_1_273)
(= dst_reg_1_2 dst_reg_1_274)
(= dst_reg_1_3 dst_reg_1_275)
(= #x0000000000000000 dst_reg_1_276)
(= #xffffffffffffffff dst_reg_1_277)
(= #x8000000000000000 dst_reg_1_278)
(= #x7fffffffffffffff dst_reg_1_279)
(= #x0000000000000000 dst_reg_1_280)
(= #xffffffffffffffff dst_reg_1_281)
(= #x00000000 dst_reg_1_282)
(= dst_reg_1_11 dst_reg_1_283)
(= dst_reg_1_12 dst_reg_1_284)
(= dst_reg_1_13 dst_reg_1_285)
]
[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 32 = MemoryDef(31)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ and.i1.i.i_1_268 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ and.i1.i.i_1_268 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_1_186 src_reg_1_286)
(= src_reg_1_187 src_reg_1_287)
(= src_reg_1_188 src_reg_1_288)
(= src_reg_1_189 src_reg_1_289)
(= src_reg_1_190 src_reg_1_290)
(= src_reg_1_191 src_reg_1_291)
(= src_reg_1_192 src_reg_1_292)
(= src_reg_1_193 src_reg_1_293)
(= src_reg_1_194 src_reg_1_294)
(= src_reg_1_195 src_reg_1_295)
(= src_reg_1_196 src_reg_1_296)
(= src_reg_1_197 src_reg_1_297)
(= src_reg_1_198 src_reg_1_298)
(= src_reg_1_199 src_reg_1_299)
(= dst_reg_1_172 dst_reg_1_272)
(= dst_reg_1_173 dst_reg_1_273)
(= dst_reg_1_174 dst_reg_1_274)
(= dst_reg_1_175 dst_reg_1_275)
(= and4.i.i.i_1_271 dst_reg_1_276)
(= and.i1.i.i_1_268 dst_reg_1_277)
(= dst_reg_1_178 dst_reg_1_278)
(= dst_reg_1_179 dst_reg_1_279)
(= dst_reg_1_180 dst_reg_1_280)
(= dst_reg_1_181 dst_reg_1_281)
(= dst_reg_1_182 dst_reg_1_282)
(= dst_reg_1_183 dst_reg_1_283)
(= dst_reg_1_184 dst_reg_1_284)
(= dst_reg_1_185 dst_reg_1_285)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_1_186 src_reg_1_286)
  (= src_reg_1_187 src_reg_1_287)
  (= src_reg_1_188 src_reg_1_288)
  (= src_reg_1_189 src_reg_1_289)
  (= src_reg_1_190 src_reg_1_290)
  (= src_reg_1_191 src_reg_1_291)
  (= src_reg_1_192 src_reg_1_292)
  (= src_reg_1_193 src_reg_1_293)
  (= src_reg_1_194 src_reg_1_294)
  (= src_reg_1_195 src_reg_1_295)
  (= src_reg_1_196 src_reg_1_296)
  (= src_reg_1_197 src_reg_1_297)
  (= src_reg_1_198 src_reg_1_298)
  (= src_reg_1_199 src_reg_1_299)
  (= dst_reg_1_172 dst_reg_1_272)
  (= dst_reg_1_173 dst_reg_1_273)
  (= dst_reg_1_174 dst_reg_1_274)
  (= dst_reg_1_175 dst_reg_1_275)
  (= and4.i.i.i_1_271 dst_reg_1_276)
  (= and.i1.i.i_1_268 dst_reg_1_277)
  (= dst_reg_1_178 dst_reg_1_278)
  (= dst_reg_1_179 dst_reg_1_279)
  (= dst_reg_1_180 dst_reg_1_280)
  (= dst_reg_1_181 dst_reg_1_281)
  (= dst_reg_1_182 dst_reg_1_282)
  (= dst_reg_1_183 dst_reg_1_283)
  (= dst_reg_1_184 dst_reg_1_284)
  (= dst_reg_1_185 dst_reg_1_285)
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_1_286)
  (= src_reg_1_15 src_reg_1_287)
  (= src_reg_1_16 src_reg_1_288)
  (= src_reg_1_17 src_reg_1_289)
  (= src_reg_1_18 src_reg_1_290)
  (= src_reg_1_19 src_reg_1_291)
  (= src_reg_1_20 src_reg_1_292)
  (= src_reg_1_21 src_reg_1_293)
  (= src_reg_1_22 src_reg_1_294)
  (= src_reg_1_23 src_reg_1_295)
  (= src_reg_1_24 src_reg_1_296)
  (= src_reg_1_25 src_reg_1_297)
  (= src_reg_1_26 src_reg_1_298)
  (= src_reg_1_27 src_reg_1_299)
  (= #x00000001 dst_reg_1_272)
  (= dst_reg_1_1 dst_reg_1_273)
  (= dst_reg_1_2 dst_reg_1_274)
  (= dst_reg_1_3 dst_reg_1_275)
  (= #x0000000000000000 dst_reg_1_276)
  (= #xffffffffffffffff dst_reg_1_277)
  (= #x8000000000000000 dst_reg_1_278)
  (= #x7fffffffffffffff dst_reg_1_279)
  (= #x0000000000000000 dst_reg_1_280)
  (= #xffffffffffffffff dst_reg_1_281)
  (= #x00000000 dst_reg_1_282)
  (= dst_reg_1_11 dst_reg_1_283)
  (= dst_reg_1_12 dst_reg_1_284)
  (= dst_reg_1_13 dst_reg_1_285)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= cond40.i.i_1_171 dst_reg_1_178)
  (= i37.i.i_1_162 dst_reg_1_179)
  (= cond40.i.i_1_171 dst_reg_1_180)
  (= dst_reg_1_120 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= cond.i327.i_1_157 dst_reg_1_178)
  (= cond12.i.i_1_161 dst_reg_1_179)
  (= cond.i327.i_1_157 dst_reg_1_180)
  (= cond12.i.i_1_161 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= dst_reg_1_117 dst_reg_1_178)
  (= dst_reg_1_118 dst_reg_1_179)
  (= dst_reg_1_119 dst_reg_1_180)
  (= dst_reg_1_120 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.else112.i, if.end117.i> :
  (= src_reg_1_90 src_reg_1_125)
  (= src_reg_1_91 src_reg_1_126)
  (= src_reg_1_92 src_reg_1_127)
  (= src_reg_1_93 src_reg_1_128)
  (= src_reg_1_94 src_reg_1_129)
  (= src_reg_1_95 src_reg_1_130)
  (= src_reg_1_96 src_reg_1_131)
  (= src_reg_1_97 src_reg_1_132)
  (= src_reg_1_98 src_reg_1_133)
  (= src_reg_1_99 src_reg_1_134)
  (= src_reg_1_100 src_reg_1_135)
  (= src_reg_1_101 src_reg_1_136)
  (= src_reg_1_102 src_reg_1_137)
  (= src_reg_1_103 src_reg_1_138)
  (= dst_reg_1_76 dst_reg_1_111)
  (= dst_reg_1_77 dst_reg_1_112)
  (= dst_reg_1_78 dst_reg_1_113)
  (= dst_reg_1_79 dst_reg_1_114)
  (= dst_reg_1_80 dst_reg_1_115)
  (= dst_reg_1_81 dst_reg_1_116)
  (= dst_reg_1_82 dst_reg_1_117)
  (= dst_reg_1_83 dst_reg_1_118)
  (= sub114.i_1_108 dst_reg_1_119)
  (= sub116.i_1_110 dst_reg_1_120)
  (= dst_reg_1_86 dst_reg_1_121)
  (= dst_reg_1_87 dst_reg_1_122)
  (= dst_reg_1_88 dst_reg_1_123)
  (= dst_reg_1_89 dst_reg_1_124)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_1_125 src_reg_1_186)
  (= src_reg_1_126 src_reg_1_187)
  (= src_reg_1_127 src_reg_1_188)
  (= src_reg_1_128 src_reg_1_189)
  (= src_reg_1_129 src_reg_1_190)
  (= src_reg_1_130 src_reg_1_191)
  (= src_reg_1_131 src_reg_1_192)
  (= src_reg_1_132 src_reg_1_193)
  (= src_reg_1_133 src_reg_1_194)
  (= src_reg_1_134 src_reg_1_195)
  (= src_reg_1_135 src_reg_1_196)
  (= src_reg_1_136 src_reg_1_197)
  (= src_reg_1_137 src_reg_1_198)
  (= src_reg_1_138 src_reg_1_199)
  (= dst_reg_1_111 dst_reg_1_172)
  (= dst_reg_1_112 dst_reg_1_173)
  (= dst_reg_1_113 dst_reg_1_174)
  (= dst_reg_1_114 dst_reg_1_175)
  (= and.i56.i_1_148 dst_reg_1_176)
  (= or6.i.i_1_145 dst_reg_1_177)
  (= i38.i.i_1_165 dst_reg_1_178)
  (= cond27.i.i_1_167 dst_reg_1_179)
  (= dst_reg_1_119 dst_reg_1_180)
  (= cond27.i.i_1_167 dst_reg_1_181)
  (= dst_reg_1_121 dst_reg_1_182)
  (= dst_reg_1_122 dst_reg_1_183)
  (= dst_reg_1_123 dst_reg_1_184)
  (= dst_reg_1_124 dst_reg_1_185)
<if.then109.i, if.end117.i> :
  (= src_reg_1_90 src_reg_1_125)
  (= src_reg_1_91 src_reg_1_126)
  (= src_reg_1_92 src_reg_1_127)
  (= src_reg_1_93 src_reg_1_128)
  (= src_reg_1_94 src_reg_1_129)
  (= src_reg_1_95 src_reg_1_130)
  (= src_reg_1_96 src_reg_1_131)
  (= src_reg_1_97 src_reg_1_132)
  (= src_reg_1_98 src_reg_1_133)
  (= src_reg_1_99 src_reg_1_134)
  (= src_reg_1_100 src_reg_1_135)
  (= src_reg_1_101 src_reg_1_136)
  (= src_reg_1_102 src_reg_1_137)
  (= src_reg_1_103 src_reg_1_138)
  (= dst_reg_1_76 dst_reg_1_111)
  (= dst_reg_1_77 dst_reg_1_112)
  (= dst_reg_1_78 dst_reg_1_113)
  (= dst_reg_1_79 dst_reg_1_114)
  (= dst_reg_1_80 dst_reg_1_115)
  (= dst_reg_1_81 dst_reg_1_116)
  (= dst_reg_1_82 dst_reg_1_117)
  (= dst_reg_1_83 dst_reg_1_118)
  (= #x0000000000000000 dst_reg_1_119)
  (= #xffffffffffffffff dst_reg_1_120)
  (= dst_reg_1_86 dst_reg_1_121)
  (= dst_reg_1_87 dst_reg_1_122)
  (= dst_reg_1_88 dst_reg_1_123)
  (= dst_reg_1_89 dst_reg_1_124)
<if.else101.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= sub.i.i_1_61 dst_reg_1_82)
  (= sub.i46.i_1_68 dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
<if.then98.i, if.end105.i> :
  (= #x00000001 src_reg_1_90)
  (= src_reg_1_15 src_reg_1_91)
  (= src_reg_1_16 src_reg_1_92)
  (= src_reg_1_17 src_reg_1_93)
  (= src_reg_1_18 src_reg_1_94)
  (= src_reg_1_19 src_reg_1_95)
  (= src_reg_1_20 src_reg_1_96)
  (= src_reg_1_21 src_reg_1_97)
  (= src_reg_1_22 src_reg_1_98)
  (= src_reg_1_23 src_reg_1_99)
  (= src_reg_1_24 src_reg_1_100)
  (= src_reg_1_25 src_reg_1_101)
  (= src_reg_1_26 src_reg_1_102)
  (= src_reg_1_27 src_reg_1_103)
  (= #x00000001 dst_reg_1_76)
  (= dst_reg_1_1 dst_reg_1_77)
  (= dst_reg_1_2 dst_reg_1_78)
  (= dst_reg_1_3 dst_reg_1_79)
  (= dst_reg_1_4 dst_reg_1_80)
  (= dst_reg_1_5 dst_reg_1_81)
  (= #x8000000000000000 dst_reg_1_82)
  (= #x7fffffffffffffff dst_reg_1_83)
  (= dst_reg_1_8 dst_reg_1_84)
  (= dst_reg_1_9 dst_reg_1_85)
  (= dst_reg_1_10 dst_reg_1_86)
  (= dst_reg_1_11 dst_reg_1_87)
  (= dst_reg_1_12 dst_reg_1_88)
  (= dst_reg_1_13 dst_reg_1_89)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_1_37
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_1_37 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_1_37 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_1_37 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_1_37 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_1_47
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
if.then26.i
  (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
if.then26.i
  (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_1_51
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.end27.i
=========================
-------------------
  %smin_value91.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i230.i = load i64, i64* %smin_value91.i, align 8
-------------------
-------------------
  %sub.i.i = sub i64 %i230.i, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp.i42.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
-------------------
-------------------
  %cmp1.i43.i = icmp slt i64 %sub.i.i, %i230.i
-------------------
-------------------
  %cmp2.i44.i = icmp sgt i64 %sub.i.i, %i230.i
-------------------
-------------------
  %retval.0.i45.i = select i1 %cmp.i42.i, i1 %cmp1.i43.i, i1 %cmp2.i44.i
-------------------
-------------------
  br i1 %retval.0.i45.i, label %if.then98.i, label %lor.lhs.false94.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %retval.0.i45.i = select i1 %cmp.i42.i, i1 %cmp1.i43.i, i1 %cmp2.i44.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i45.i_1_66
[handleBranchInst] Edge Assertions:
<if.end27.i, if.then98.i>: (and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i>: (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then98.i: (and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] lor.lhs.false94.i: (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] <if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] <if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
lor.lhs.false94.i
=========================
-------------------
  %smax_value95.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i231.i = load i64, i64* %smax_value95.i, align 8
-------------------
-------------------
  %sub.i46.i = sub i64 %i231.i, %src_reg1.sroa.13.0.copyload
-------------------
-------------------
  %cmp.i47.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
-------------------
  %cmp1.i48.i = icmp slt i64 %sub.i46.i, %i231.i
-------------------
-------------------
  %cmp2.i49.i = icmp sgt i64 %sub.i46.i, %i231.i
-------------------
-------------------
  %retval.0.i50.i = select i1 %cmp.i47.i, i1 %cmp1.i48.i, i1 %cmp2.i49.i
-------------------
-------------------
  br i1 %retval.0.i50.i, label %if.then98.i, label %if.else101.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %retval.0.i50.i = select i1 %cmp.i47.i, i1 %cmp1.i48.i, i1 %cmp2.i49.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i50.i_1_73
[handleBranchInst] Edge Assertions:
<lor.lhs.false94.i, if.then98.i>: (and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i>: (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then98.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
[handleBranchInst] if.else101.i: (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] <lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] <lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.then98.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value91.i, align 8
-------------------
-------------------
  %smax_value100.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value100.i, align 8
-------------------
-------------------
  br label %if.end105.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end105.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
[handleBranchInst] if.end105.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
[handleBranchInst] <if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
[handleBranchInst] EdgeAssertionsMap:
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.else101.i
=========================
-------------------
  store i64 %sub.i.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 %sub.i46.i, i64* %smax_value95.i, align 8
-------------------
-------------------
  br label %if.end105.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end105.i
[handleBranchInst] newPathCond: (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] if.end105.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
[handleBranchInst] <if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.end105.i
=========================
-------------------
  %umin_value106.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i232.i = load i64, i64* %umin_value106.i, align 8
-------------------
-------------------
  %cmp107.i = icmp ult i64 %i232.i, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  br i1 %cmp107.i, label %if.then109.i, label %if.else112.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp107.i = icmp ult i64 %i232.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp107.i_1_105
[handleBranchInst] Edge Assertions:
<if.end105.i, if.then109.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then109.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
[handleBranchInst] if.else112.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] <if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
[handleBranchInst] <if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.then109.i
=========================
-------------------
  store i64 0, i64* %umin_value106.i, align 8
-------------------
-------------------
  %umax_value111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value111.i, align 8
-------------------
-------------------
  br label %if.end117.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end117.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
[handleBranchInst] if.end117.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
[handleBranchInst] <if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.else112.i
=========================
-------------------
  %sub114.i = sub i64 %i232.i, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  store i64 %sub114.i, i64* %umin_value106.i, align 8
-------------------
-------------------
  %umax_value115.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i233.i = load i64, i64* %umax_value115.i, align 8
-------------------
-------------------
  %sub116.i = sub i64 %i233.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  store i64 %sub116.i, i64* %umax_value115.i, align 8
-------------------
-------------------
  br label %if.end117.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end117.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] if.end117.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
[handleBranchInst] <if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
=========================
if.end117.i
=========================
-------------------
  %i234.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %sub.i51.i = sub i64 %i234.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  %add.i52.i = add i64 %sub.i51.i, %i215.i
-------------------
-------------------
  %sub3.i.i = sub i64 %sub.i51.i, %src_reg1.sroa.10.0.copyload
-------------------
-------------------
  %xor.i53.i = xor i64 %add.i52.i, %sub3.i.i
-------------------
-------------------
  %or.i54.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
-------------------
  %or6.i.i = or i64 %or.i54.i, %xor.i53.i
-------------------
-------------------
  %neg.i55.i = xor i64 %or6.i.i, -1
-------------------
-------------------
  %and.i56.i = and i64 %sub.i51.i, %neg.i55.i
-------------------
-------------------
  store i64 %and.i56.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %or6.i.i, i64* %i214.i, align 8
-------------------
-------------------
  %i.i322.i = load i64, i64* %smin_value91.i, align 8
-------------------
-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i323.i_1_151
[handleBranchInst] Edge Assertions:
<if.end117.i, if.then.i329.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] lor.lhs.false.i.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i325.i_1_154
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i.i, if.then.i329.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false.i.i, if.end.i.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
[handleBranchInst] if.end.i.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
if.then.i329.i
=========================
-------------------
  %i34.i.i = load i64, i64* %umin_value106.i, align 8
-------------------
-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
-------------------
  store i64 %cond.i327.i, i64* %umin_value106.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
[handleBranchInst] <if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
-------------------
  %i38.i.i = load i64, i64* %umin_value106.i, align 8
-------------------
-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i.i_1_164
[handleBranchInst] Edge Assertions:
<if.end.i.i, if.then17.i.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] if.else.i331.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp16.i.i_1_164 #b1)
           (= cmp1.i325.i_1_154 #b0)
           (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
[handleBranchInst] <if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp16.i.i_1_164 #b1)
           (= cmp1.i325.i_1_154 #b0)
           (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp16.i.i_1_164 #b1)
           (= cmp1.i325.i_1_154 #b0)
           (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i330.i_1_169
[handleBranchInst] Edge Assertions:
<if.else.i331.i, if.then32.i.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp31.i330.i_1_169 #b0)
                (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or a!4
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
[handleBranchInst] <if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] <if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp31.i330.i_1_169 #b0)
                (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or a!4
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
-------------------
  store i64 %cond40.i.i, i64* %umin_value106.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp31.i330.i_1_169 #b0)
                (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or a!4
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
[handleBranchInst] <if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
__reg_deduce_bounds.exit.i
=========================
-------------------
  %i.i333.i = load i64, i64* %umin_value106.i, align 8
-------------------
-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_1_204
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i56.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or6.i.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6)
      (and (= cmp.i.i.i.i_1_204 #b1) a!6)
      (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
      (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
[handleBranchInst] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6)
      (and (= cmp.i.i.i.i_1_204 #b1) a!6)
      (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
      (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))))))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
lor.lhs.false94.i
=========================
=========================
if.then98.i
=========================
=========================
if.else101.i
=========================
=========================
if.end105.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (=> (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
          (and (= retval.0.i45.i_1_66 #b1) a!1))
      (and (= #x00000001 src_reg_1_90)
           (= src_reg_1_15 src_reg_1_91)
           (= src_reg_1_16 src_reg_1_92)
           (= src_reg_1_17 src_reg_1_93)
           (= src_reg_1_18 src_reg_1_94)
           (= src_reg_1_19 src_reg_1_95)
           (= src_reg_1_20 src_reg_1_96)
           (= src_reg_1_21 src_reg_1_97)
           (= src_reg_1_22 src_reg_1_98)
           (= src_reg_1_23 src_reg_1_99)
           (= src_reg_1_24 src_reg_1_100)
           (= src_reg_1_25 src_reg_1_101)
           (= src_reg_1_26 src_reg_1_102)
           (= src_reg_1_27 src_reg_1_103)
           (= #x00000001 dst_reg_1_76)
           (= dst_reg_1_1 dst_reg_1_77)
           (= dst_reg_1_2 dst_reg_1_78)
           (= dst_reg_1_3 dst_reg_1_79)
           (= dst_reg_1_4 dst_reg_1_80)
           (= dst_reg_1_5 dst_reg_1_81)
           (= #x8000000000000000 dst_reg_1_82)
           (= #x7fffffffffffffff dst_reg_1_83)
           (= dst_reg_1_8 dst_reg_1_84)
           (= dst_reg_1_9 dst_reg_1_85)
           (= dst_reg_1_10 dst_reg_1_86)
           (= dst_reg_1_11 dst_reg_1_87)
           (= dst_reg_1_12 dst_reg_1_88)
           (= dst_reg_1_13 dst_reg_1_89))))
phiResolveI (i=1) (let ((a!1 (and (= retval.0.i50.i_1_73 #b0)
                (= retval.0.i45.i_1_66 #b0)
                (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
                    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_1_90)
           (= src_reg_1_15 src_reg_1_91)
           (= src_reg_1_16 src_reg_1_92)
           (= src_reg_1_17 src_reg_1_93)
           (= src_reg_1_18 src_reg_1_94)
           (= src_reg_1_19 src_reg_1_95)
           (= src_reg_1_20 src_reg_1_96)
           (= src_reg_1_21 src_reg_1_97)
           (= src_reg_1_22 src_reg_1_98)
           (= src_reg_1_23 src_reg_1_99)
           (= src_reg_1_24 src_reg_1_100)
           (= src_reg_1_25 src_reg_1_101)
           (= src_reg_1_26 src_reg_1_102)
           (= src_reg_1_27 src_reg_1_103)
           (= #x00000001 dst_reg_1_76)
           (= dst_reg_1_1 dst_reg_1_77)
           (= dst_reg_1_2 dst_reg_1_78)
           (= dst_reg_1_3 dst_reg_1_79)
           (= dst_reg_1_4 dst_reg_1_80)
           (= dst_reg_1_5 dst_reg_1_81)
           (= sub.i.i_1_61 dst_reg_1_82)
           (= sub.i46.i_1_68 dst_reg_1_83)
           (= dst_reg_1_8 dst_reg_1_84)
           (= dst_reg_1_9 dst_reg_1_85)
           (= dst_reg_1_10 dst_reg_1_86)
           (= dst_reg_1_11 dst_reg_1_87)
           (= dst_reg_1_12 dst_reg_1_88)
           (= dst_reg_1_13 dst_reg_1_89))))
=========================
if.then109.i
=========================
=========================
if.else112.i
=========================
=========================
if.end117.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (=> (and (= cmp107.i_1_105 #b1) a!2)
      (and (= src_reg_1_90 src_reg_1_125)
           (= src_reg_1_91 src_reg_1_126)
           (= src_reg_1_92 src_reg_1_127)
           (= src_reg_1_93 src_reg_1_128)
           (= src_reg_1_94 src_reg_1_129)
           (= src_reg_1_95 src_reg_1_130)
           (= src_reg_1_96 src_reg_1_131)
           (= src_reg_1_97 src_reg_1_132)
           (= src_reg_1_98 src_reg_1_133)
           (= src_reg_1_99 src_reg_1_134)
           (= src_reg_1_100 src_reg_1_135)
           (= src_reg_1_101 src_reg_1_136)
           (= src_reg_1_102 src_reg_1_137)
           (= src_reg_1_103 src_reg_1_138)
           (= dst_reg_1_76 dst_reg_1_111)
           (= dst_reg_1_77 dst_reg_1_112)
           (= dst_reg_1_78 dst_reg_1_113)
           (= dst_reg_1_79 dst_reg_1_114)
           (= dst_reg_1_80 dst_reg_1_115)
           (= dst_reg_1_81 dst_reg_1_116)
           (= dst_reg_1_82 dst_reg_1_117)
           (= dst_reg_1_83 dst_reg_1_118)
           (= #x0000000000000000 dst_reg_1_119)
           (= #xffffffffffffffff dst_reg_1_120)
           (= dst_reg_1_86 dst_reg_1_121)
           (= dst_reg_1_87 dst_reg_1_122)
           (= dst_reg_1_88 dst_reg_1_123)
           (= dst_reg_1_89 dst_reg_1_124)))))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (=> (and (= cmp107.i_1_105 #b0) a!2)
      (and (= src_reg_1_90 src_reg_1_125)
           (= src_reg_1_91 src_reg_1_126)
           (= src_reg_1_92 src_reg_1_127)
           (= src_reg_1_93 src_reg_1_128)
           (= src_reg_1_94 src_reg_1_129)
           (= src_reg_1_95 src_reg_1_130)
           (= src_reg_1_96 src_reg_1_131)
           (= src_reg_1_97 src_reg_1_132)
           (= src_reg_1_98 src_reg_1_133)
           (= src_reg_1_99 src_reg_1_134)
           (= src_reg_1_100 src_reg_1_135)
           (= src_reg_1_101 src_reg_1_136)
           (= src_reg_1_102 src_reg_1_137)
           (= src_reg_1_103 src_reg_1_138)
           (= dst_reg_1_76 dst_reg_1_111)
           (= dst_reg_1_77 dst_reg_1_112)
           (= dst_reg_1_78 dst_reg_1_113)
           (= dst_reg_1_79 dst_reg_1_114)
           (= dst_reg_1_80 dst_reg_1_115)
           (= dst_reg_1_81 dst_reg_1_116)
           (= dst_reg_1_82 dst_reg_1_117)
           (= dst_reg_1_83 dst_reg_1_118)
           (= sub114.i_1_108 dst_reg_1_119)
           (= sub116.i_1_110 dst_reg_1_120)
           (= dst_reg_1_86 dst_reg_1_121)
           (= dst_reg_1_87 dst_reg_1_122)
           (= dst_reg_1_88 dst_reg_1_123)
           (= dst_reg_1_89 dst_reg_1_124)))))
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (=> (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
          (and (= cmp.i323.i_1_151 #b1) a!3))
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= cond.i327.i_1_157 dst_reg_1_178)
           (= cond12.i.i_1_161 dst_reg_1_179)
           (= cond.i327.i_1_157 dst_reg_1_180)
           (= cond12.i.i_1_161 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_1_164 #b1)
                (= cmp1.i325.i_1_154 #b0)
                (= cmp.i323.i_1_151 #b0)
                (or (and (= cmp107.i_1_105 #b0) a!2)
                    (and (= cmp107.i_1_105 #b1) a!2)))))
  (=> a!3
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= i38.i.i_1_165 dst_reg_1_178)
           (= cond27.i.i_1_167 dst_reg_1_179)
           (= dst_reg_1_119 dst_reg_1_180)
           (= cond27.i.i_1_167 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
phiResolveI (i=2) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_1_169 #b0)
                (= cmp16.i.i_1_164 #b0)
                (= cmp1.i325.i_1_154 #b0)
                (= cmp.i323.i_1_151 #b0)
                (or (and (= cmp107.i_1_105 #b0) a!2)
                    (and (= cmp107.i_1_105 #b1) a!2)))))
  (=> a!3
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= dst_reg_1_117 dst_reg_1_178)
           (= dst_reg_1_118 dst_reg_1_179)
           (= dst_reg_1_119 dst_reg_1_180)
           (= dst_reg_1_120 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
phiResolveI (i=3) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_1_169 #b1)
                (= cmp16.i.i_1_164 #b0)
                (= cmp1.i325.i_1_154 #b0)
                (= cmp.i323.i_1_151 #b0)
                (or (and (= cmp107.i_1_105 #b0) a!2)
                    (and (= cmp107.i_1_105 #b1) a!2)))))
  (=> a!3
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= cond40.i.i_1_171 dst_reg_1_178)
           (= i37.i.i_1_162 dst_reg_1_179)
           (= cond40.i.i_1_171 dst_reg_1_180)
           (= dst_reg_1_120 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
     (and (= cmp.i.i.i.i_1_204 #b0) a!6)))))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit.i
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
     (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
    (= retval.0.i.i.i.i_1_253 phi.bo_1_250))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
    (= retval.0.i.i.i.i_1_253 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_1_253 #x0000003f)
     (= cmp.i.i.i_1_256 #b1)
     (= cmp.i.i.i_1_256 #b0))
  (= sh_prom.i.i.i_1_257 ((_ zero_extend 32) retval.0.i.i.i.i_1_253))
  (= notmask.i.i.i_1_259 (bvshl #xffffffffffffffff sh_prom.i.i.i_1_257))
  (= sub.i.i.i_1_261 (bvxor notmask.i.i.i_1_259 #xffffffffffffffff))
  (= and.i.i336.i_1_262 (bvand notmask.i.i.i_1_259 i.i333.i_1_200))
  (ite (= cmp.i.i.i_1_256 #b1)
     (= retval.sroa.0.0.i.i.i_1_264 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_1_264 and.i.i336.i_1_262))
  (ite (= cmp.i.i.i_1_256 #b1)
     (= retval.sroa.3.0.i.i.i_1_266 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_1_266 sub.i.i.i_1_261))
  (= or.i.i.i_1_267 (bvor retval.sroa.0.0.i.i.i_1_264 and.i56.i_1_148))
  (= and.i1.i.i_1_268 (bvand retval.sroa.3.0.i.i.i_1_266 or6.i.i_1_145))
  (= neg.i.i.i_1_270 (bvxor and.i1.i.i_1_268 #xffffffffffffffff))
  (= and4.i.i.i_1_271 (bvand or.i.i.i_1_267 neg.i.i.i_1_270))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
     (and (= cmp.i.i.i.i_1_204 #b0) a!6)))))))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
     (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
        (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
    (and (= #x00000001 src_reg_1_286)
         (= src_reg_1_15 src_reg_1_287)
         (= src_reg_1_16 src_reg_1_288)
         (= src_reg_1_17 src_reg_1_289)
         (= src_reg_1_18 src_reg_1_290)
         (= src_reg_1_19 src_reg_1_291)
         (= src_reg_1_20 src_reg_1_292)
         (= src_reg_1_21 src_reg_1_293)
         (= src_reg_1_22 src_reg_1_294)
         (= src_reg_1_23 src_reg_1_295)
         (= src_reg_1_24 src_reg_1_296)
         (= src_reg_1_25 src_reg_1_297)
         (= src_reg_1_26 src_reg_1_298)
         (= src_reg_1_27 src_reg_1_299)
         (= #x00000001 dst_reg_1_272)
         (= dst_reg_1_1 dst_reg_1_273)
         (= dst_reg_1_2 dst_reg_1_274)
         (= dst_reg_1_3 dst_reg_1_275)
         (= #x0000000000000000 dst_reg_1_276)
         (= #xffffffffffffffff dst_reg_1_277)
         (= #x8000000000000000 dst_reg_1_278)
         (= #x7fffffffffffffff dst_reg_1_279)
         (= #x0000000000000000 dst_reg_1_280)
         (= #xffffffffffffffff dst_reg_1_281)
         (= #x00000000 dst_reg_1_282)
         (= dst_reg_1_11 dst_reg_1_283)
         (= dst_reg_1_12 dst_reg_1_284)
         (= dst_reg_1_13 dst_reg_1_285)))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (=> (or (and (= cmp.i.i.i.i_1_204 #b0) a!6)
          (and (= cmp.i.i.i.i_1_204 #b1) a!6))
      (and (= src_reg_1_186 src_reg_1_286)
           (= src_reg_1_187 src_reg_1_287)
           (= src_reg_1_188 src_reg_1_288)
           (= src_reg_1_189 src_reg_1_289)
           (= src_reg_1_190 src_reg_1_290)
           (= src_reg_1_191 src_reg_1_291)
           (= src_reg_1_192 src_reg_1_292)
           (= src_reg_1_193 src_reg_1_293)
           (= src_reg_1_194 src_reg_1_294)
           (= src_reg_1_195 src_reg_1_295)
           (= src_reg_1_196 src_reg_1_296)
           (= src_reg_1_197 src_reg_1_297)
           (= src_reg_1_198 src_reg_1_298)
           (= src_reg_1_199 src_reg_1_299)
           (= dst_reg_1_172 dst_reg_1_272)
           (= dst_reg_1_173 dst_reg_1_273)
           (= dst_reg_1_174 dst_reg_1_274)
           (= dst_reg_1_175 dst_reg_1_275)
           (= and4.i.i.i_1_271 dst_reg_1_276)
           (= and.i1.i.i_1_268 dst_reg_1_277)
           (= dst_reg_1_178 dst_reg_1_278)
           (= dst_reg_1_179 dst_reg_1_279)
           (= dst_reg_1_180 dst_reg_1_280)
           (= dst_reg_1_181 dst_reg_1_281)
           (= dst_reg_1_182 dst_reg_1_282)
           (= dst_reg_1_183 dst_reg_1_283)
           (= dst_reg_1_184 dst_reg_1_284)
           (= dst_reg_1_185 dst_reg_1_285))))))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
lor.lhs.false94.i
=========================
=========================
if.then98.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value100.i, align 8
-------------------
=========================
if.else101.i
=========================
-------------------
  store i64 %sub.i.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 %sub.i46.i, i64* %smax_value95.i, align 8
-------------------
=========================
if.end105.i
=========================
=========================
if.then109.i
=========================
-------------------
  store i64 0, i64* %umin_value106.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value111.i, align 8
-------------------
=========================
if.else112.i
=========================
-------------------
  store i64 %sub114.i, i64* %umin_value106.i, align 8
-------------------
-------------------
  store i64 %sub116.i, i64* %umax_value115.i, align 8
-------------------
=========================
if.end117.i
=========================
-------------------
  store i64 %and.i56.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %or6.i.i, i64* %i214.i, align 8
-------------------
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
-------------------
  store i64 %cond.i327.i, i64* %umin_value106.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
-------------------
  store i64 %cond40.i.i, i64* %umin_value106.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value91.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32}) : {
- src_reg: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
- dst_reg: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 
}
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ and.i1.i.i_1_268 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_300
[lookInsideStruct] singleValueType:dst_reg_1_300
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_301
[lookInsideStruct] singleValueType:dst_reg_1_301
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_302
[lookInsideStruct] singleValueType:dst_reg_1_302
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_303
[lookInsideStruct] singleValueType:dst_reg_1_303
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_304
[lookInsideStruct] singleValueType:dst_reg_1_304
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_305
[lookInsideStruct] singleValueType:dst_reg_1_305
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_306
[lookInsideStruct] singleValueType:dst_reg_1_306
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_307
[lookInsideStruct] singleValueType:dst_reg_1_307
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_308
[lookInsideStruct] singleValueType:dst_reg_1_308
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_309
[lookInsideStruct] singleValueType:dst_reg_1_309
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_310
[lookInsideStruct] singleValueType:dst_reg_1_310
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_311
[lookInsideStruct] singleValueType:dst_reg_1_311
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_312
[lookInsideStruct] singleValueType:dst_reg_1_312
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_1_313
[lookInsideStruct] singleValueType:dst_reg_1_313
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_1_300 ] [ ] [ dst_reg_1_301 ] [ dst_reg_1_302 ] [ dst_reg_1_303 ] [ [ dst_reg_1_304 ] [ dst_reg_1_305 ] ] [ dst_reg_1_306 ] [ dst_reg_1_307 ] [ dst_reg_1_308 ] [ dst_reg_1_309 ] [ ] [ dst_reg_1_310 ] [ dst_reg_1_311 ] [ dst_reg_1_312 ] [ dst_reg_1_313 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_1_272 dst_reg_1_300)
(= dst_reg_1_273 dst_reg_1_301)
(= dst_reg_1_274 dst_reg_1_302)
(= dst_reg_1_275 dst_reg_1_303)
(= dst_reg_1_276 dst_reg_1_304)
(= dst_reg_1_277 dst_reg_1_305)
(= dst_reg_1_278 dst_reg_1_306)
(= dst_reg_1_279 dst_reg_1_307)
(= dst_reg_1_280 dst_reg_1_308)
(= dst_reg_1_281 dst_reg_1_309)
(= dst_reg_1_282 dst_reg_1_310)
(= dst_reg_1_283 dst_reg_1_311)
(= dst_reg_1_284 dst_reg_1_312)
(= dst_reg_1_285 dst_reg_1_313)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_314
[lookInsideStruct] singleValueType:src_reg_1_314
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_315
[lookInsideStruct] singleValueType:src_reg_1_315
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_316
[lookInsideStruct] singleValueType:src_reg_1_316
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_317
[lookInsideStruct] singleValueType:src_reg_1_317
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_318
[lookInsideStruct] singleValueType:src_reg_1_318
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_319
[lookInsideStruct] singleValueType:src_reg_1_319
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_320
[lookInsideStruct] singleValueType:src_reg_1_320
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_321
[lookInsideStruct] singleValueType:src_reg_1_321
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_322
[lookInsideStruct] singleValueType:src_reg_1_322
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_323
[lookInsideStruct] singleValueType:src_reg_1_323
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_324
[lookInsideStruct] singleValueType:src_reg_1_324
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_325
[lookInsideStruct] singleValueType:src_reg_1_325
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_326
[lookInsideStruct] singleValueType:src_reg_1_326
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_1_327
[lookInsideStruct] singleValueType:src_reg_1_327
[setupBVTreeForArg] returning BVTree: [ [ src_reg_1_314 ] [ ] [ src_reg_1_315 ] [ src_reg_1_316 ] [ src_reg_1_317 ] [ [ src_reg_1_318 ] [ src_reg_1_319 ] ] [ src_reg_1_320 ] [ src_reg_1_321 ] [ src_reg_1_322 ] [ src_reg_1_323 ] [ ] [ src_reg_1_324 ] [ src_reg_1_325 ] [ src_reg_1_326 ] [ src_reg_1_327 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_1_286 src_reg_1_314)
(= src_reg_1_287 src_reg_1_315)
(= src_reg_1_288 src_reg_1_316)
(= src_reg_1_289 src_reg_1_317)
(= src_reg_1_290 src_reg_1_318)
(= src_reg_1_291 src_reg_1_319)
(= src_reg_1_292 src_reg_1_320)
(= src_reg_1_293 src_reg_1_321)
(= src_reg_1_294 src_reg_1_322)
(= src_reg_1_295 src_reg_1_323)
(= src_reg_1_296 src_reg_1_324)
(= src_reg_1_297 src_reg_1_325)
(= src_reg_1_298 src_reg_1_326)
(= src_reg_1_299 src_reg_1_327)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_1_314 ] [ ] [ src_reg_1_315 ] [ src_reg_1_316 ] [ src_reg_1_317 ] [ [ src_reg_1_318 ] [ src_reg_1_319 ] ] [ src_reg_1_320 ] [ src_reg_1_321 ] [ src_reg_1_322 ] [ src_reg_1_323 ] [ ] [ src_reg_1_324 ] [ src_reg_1_325 ] [ src_reg_1_326 ] [ src_reg_1_327 ] ] 
- dst_reg: [ [ dst_reg_1_300 ] [ ] [ dst_reg_1_301 ] [ dst_reg_1_302 ] [ dst_reg_1_303 ] [ [ dst_reg_1_304 ] [ dst_reg_1_305 ] ] [ dst_reg_1_306 ] [ dst_reg_1_307 ] [ dst_reg_1_308 ] [ dst_reg_1_309 ] [ ] [ dst_reg_1_310 ] [ dst_reg_1_311 ] [ dst_reg_1_312 ] [ dst_reg_1_313 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
        (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
    (and (= #x00000001 src_reg_1_286)
         (= src_reg_1_15 src_reg_1_287)
         (= src_reg_1_16 src_reg_1_288)
         (= src_reg_1_17 src_reg_1_289)
         (= src_reg_1_18 src_reg_1_290)
         (= src_reg_1_19 src_reg_1_291)
         (= src_reg_1_20 src_reg_1_292)
         (= src_reg_1_21 src_reg_1_293)
         (= src_reg_1_22 src_reg_1_294)
         (= src_reg_1_23 src_reg_1_295)
         (= src_reg_1_24 src_reg_1_296)
         (= src_reg_1_25 src_reg_1_297)
         (= src_reg_1_26 src_reg_1_298)
         (= src_reg_1_27 src_reg_1_299)
         (= #x00000001 dst_reg_1_272)
         (= dst_reg_1_1 dst_reg_1_273)
         (= dst_reg_1_2 dst_reg_1_274)
         (= dst_reg_1_3 dst_reg_1_275)
         (= #x0000000000000000 dst_reg_1_276)
         (= #xffffffffffffffff dst_reg_1_277)
         (= #x8000000000000000 dst_reg_1_278)
         (= #x7fffffffffffffff dst_reg_1_279)
         (= #x0000000000000000 dst_reg_1_280)
         (= #xffffffffffffffff dst_reg_1_281)
         (= #x00000000 dst_reg_1_282)
         (= dst_reg_1_11 dst_reg_1_283)
         (= dst_reg_1_12 dst_reg_1_284)
         (= dst_reg_1_13 dst_reg_1_285)))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (=> (or (and (= cmp.i.i.i.i_1_204 #b0) a!6)
          (and (= cmp.i.i.i.i_1_204 #b1) a!6))
      (and (= src_reg_1_186 src_reg_1_286)
           (= src_reg_1_187 src_reg_1_287)
           (= src_reg_1_188 src_reg_1_288)
           (= src_reg_1_189 src_reg_1_289)
           (= src_reg_1_190 src_reg_1_290)
           (= src_reg_1_191 src_reg_1_291)
           (= src_reg_1_192 src_reg_1_292)
           (= src_reg_1_193 src_reg_1_293)
           (= src_reg_1_194 src_reg_1_294)
           (= src_reg_1_195 src_reg_1_295)
           (= src_reg_1_196 src_reg_1_296)
           (= src_reg_1_197 src_reg_1_297)
           (= src_reg_1_198 src_reg_1_298)
           (= src_reg_1_199 src_reg_1_299)
           (= dst_reg_1_172 dst_reg_1_272)
           (= dst_reg_1_173 dst_reg_1_273)
           (= dst_reg_1_174 dst_reg_1_274)
           (= dst_reg_1_175 dst_reg_1_275)
           (= and4.i.i.i_1_271 dst_reg_1_276)
           (= and.i1.i.i_1_268 dst_reg_1_277)
           (= dst_reg_1_178 dst_reg_1_278)
           (= dst_reg_1_179 dst_reg_1_279)
           (= dst_reg_1_180 dst_reg_1_280)
           (= dst_reg_1_181 dst_reg_1_281)
           (= dst_reg_1_182 dst_reg_1_282)
           (= dst_reg_1_183 dst_reg_1_283)
           (= dst_reg_1_184 dst_reg_1_284)
           (= dst_reg_1_185 dst_reg_1_285))))))))
  (= dst_reg_1_272 dst_reg_1_300)
  (= dst_reg_1_273 dst_reg_1_301)
  (= dst_reg_1_274 dst_reg_1_302)
  (= dst_reg_1_275 dst_reg_1_303)
  (= dst_reg_1_276 dst_reg_1_304)
  (= dst_reg_1_277 dst_reg_1_305)
  (= dst_reg_1_278 dst_reg_1_306)
  (= dst_reg_1_279 dst_reg_1_307)
  (= dst_reg_1_280 dst_reg_1_308)
  (= dst_reg_1_281 dst_reg_1_309)
  (= dst_reg_1_282 dst_reg_1_310)
  (= dst_reg_1_283 dst_reg_1_311)
  (= dst_reg_1_284 dst_reg_1_312)
  (= dst_reg_1_285 dst_reg_1_313)
  (= src_reg_1_286 src_reg_1_314)
  (= src_reg_1_287 src_reg_1_315)
  (= src_reg_1_288 src_reg_1_316)
  (= src_reg_1_289 src_reg_1_317)
  (= src_reg_1_290 src_reg_1_318)
  (= src_reg_1_291 src_reg_1_319)
  (= src_reg_1_292 src_reg_1_320)
  (= src_reg_1_293 src_reg_1_321)
  (= src_reg_1_294 src_reg_1_322)
  (= src_reg_1_295 src_reg_1_323)
  (= src_reg_1_296 src_reg_1_324)
  (= src_reg_1_297 src_reg_1_325)
  (= src_reg_1_298 src_reg_1_326)
  (= src_reg_1_299 src_reg_1_327)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: adjust_scalar_min_max_vals.exit, Size:30
  (=> (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
        (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
    (and (= #x00000001 src_reg_1_286)
         (= src_reg_1_15 src_reg_1_287)
         (= src_reg_1_16 src_reg_1_288)
         (= src_reg_1_17 src_reg_1_289)
         (= src_reg_1_18 src_reg_1_290)
         (= src_reg_1_19 src_reg_1_291)
         (= src_reg_1_20 src_reg_1_292)
         (= src_reg_1_21 src_reg_1_293)
         (= src_reg_1_22 src_reg_1_294)
         (= src_reg_1_23 src_reg_1_295)
         (= src_reg_1_24 src_reg_1_296)
         (= src_reg_1_25 src_reg_1_297)
         (= src_reg_1_26 src_reg_1_298)
         (= src_reg_1_27 src_reg_1_299)
         (= #x00000001 dst_reg_1_272)
         (= dst_reg_1_1 dst_reg_1_273)
         (= dst_reg_1_2 dst_reg_1_274)
         (= dst_reg_1_3 dst_reg_1_275)
         (= #x0000000000000000 dst_reg_1_276)
         (= #xffffffffffffffff dst_reg_1_277)
         (= #x8000000000000000 dst_reg_1_278)
         (= #x7fffffffffffffff dst_reg_1_279)
         (= #x0000000000000000 dst_reg_1_280)
         (= #xffffffffffffffff dst_reg_1_281)
         (= #x00000000 dst_reg_1_282)
         (= dst_reg_1_11 dst_reg_1_283)
         (= dst_reg_1_12 dst_reg_1_284)
         (= dst_reg_1_13 dst_reg_1_285)))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (=> (or (and (= cmp.i.i.i.i_1_204 #b0) a!6)
          (and (= cmp.i.i.i.i_1_204 #b1) a!6))
      (and (= src_reg_1_186 src_reg_1_286)
           (= src_reg_1_187 src_reg_1_287)
           (= src_reg_1_188 src_reg_1_288)
           (= src_reg_1_189 src_reg_1_289)
           (= src_reg_1_190 src_reg_1_290)
           (= src_reg_1_191 src_reg_1_291)
           (= src_reg_1_192 src_reg_1_292)
           (= src_reg_1_193 src_reg_1_293)
           (= src_reg_1_194 src_reg_1_294)
           (= src_reg_1_195 src_reg_1_295)
           (= src_reg_1_196 src_reg_1_296)
           (= src_reg_1_197 src_reg_1_297)
           (= src_reg_1_198 src_reg_1_298)
           (= src_reg_1_199 src_reg_1_299)
           (= dst_reg_1_172 dst_reg_1_272)
           (= dst_reg_1_173 dst_reg_1_273)
           (= dst_reg_1_174 dst_reg_1_274)
           (= dst_reg_1_175 dst_reg_1_275)
           (= and4.i.i.i_1_271 dst_reg_1_276)
           (= and.i1.i.i_1_268 dst_reg_1_277)
           (= dst_reg_1_178 dst_reg_1_278)
           (= dst_reg_1_179 dst_reg_1_279)
           (= dst_reg_1_180 dst_reg_1_280)
           (= dst_reg_1_181 dst_reg_1_281)
           (= dst_reg_1_182 dst_reg_1_282)
           (= dst_reg_1_183 dst_reg_1_283)
           (= dst_reg_1_184 dst_reg_1_284)
           (= dst_reg_1_185 dst_reg_1_285))))))))
  (= dst_reg_1_272 dst_reg_1_300)
  (= dst_reg_1_273 dst_reg_1_301)
  (= dst_reg_1_274 dst_reg_1_302)
  (= dst_reg_1_275 dst_reg_1_303)
  (= dst_reg_1_276 dst_reg_1_304)
  (= dst_reg_1_277 dst_reg_1_305)
  (= dst_reg_1_278 dst_reg_1_306)
  (= dst_reg_1_279 dst_reg_1_307)
  (= dst_reg_1_280 dst_reg_1_308)
  (= dst_reg_1_281 dst_reg_1_309)
  (= dst_reg_1_282 dst_reg_1_310)
  (= dst_reg_1_283 dst_reg_1_311)
  (= dst_reg_1_284 dst_reg_1_312)
  (= dst_reg_1_285 dst_reg_1_313)
  (= src_reg_1_286 src_reg_1_314)
  (= src_reg_1_287 src_reg_1_315)
  (= src_reg_1_288 src_reg_1_316)
  (= src_reg_1_289 src_reg_1_317)
  (= src_reg_1_290 src_reg_1_318)
  (= src_reg_1_291 src_reg_1_319)
  (= src_reg_1_292 src_reg_1_320)
  (= src_reg_1_293 src_reg_1_321)
  (= src_reg_1_294 src_reg_1_322)
  (= src_reg_1_295 src_reg_1_323)
  (= src_reg_1_296 src_reg_1_324)
  (= src_reg_1_297 src_reg_1_325)
  (= src_reg_1_298 src_reg_1_326)
  (= src_reg_1_299 src_reg_1_327)
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
    (= retval.0.i.i.i.i_1_253 phi.bo_1_250))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
    (= retval.0.i.i.i.i_1_253 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_1_253 #x0000003f)
     (= cmp.i.i.i_1_256 #b1)
     (= cmp.i.i.i_1_256 #b0))
  (= sh_prom.i.i.i_1_257 ((_ zero_extend 32) retval.0.i.i.i.i_1_253))
  (= notmask.i.i.i_1_259 (bvshl #xffffffffffffffff sh_prom.i.i.i_1_257))
  (= sub.i.i.i_1_261 (bvxor notmask.i.i.i_1_259 #xffffffffffffffff))
  (= and.i.i336.i_1_262 (bvand notmask.i.i.i_1_259 i.i333.i_1_200))
  (ite (= cmp.i.i.i_1_256 #b1)
     (= retval.sroa.0.0.i.i.i_1_264 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_1_264 and.i.i336.i_1_262))
  (ite (= cmp.i.i.i_1_256 #b1)
     (= retval.sroa.3.0.i.i.i_1_266 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_1_266 sub.i.i.i_1_261))
  (= or.i.i.i_1_267 (bvor retval.sroa.0.0.i.i.i_1_264 and.i56.i_1_148))
  (= and.i1.i.i_1_268 (bvand retval.sroa.3.0.i.i.i_1_266 or6.i.i_1_145))
  (= neg.i.i.i_1_270 (bvxor and.i1.i.i_1_268 #xffffffffffffffff))
  (= and4.i.i.i_1_271 (bvand or.i.i.i_1_267 neg.i.i.i_1_270))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_1_251
     (and (= cmp.i.i.i.i_1_204 #b0) a!6)))))))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252
     (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_1_202 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= tobool.not.i.i.i.i.i_1_206 #b0))
  (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208)
     (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))
  (ite (= tobool.not.i.i.i.i.i_1_206 #b1)
     (= spec.select17.i.i.i.i.i_1_212 #x0000001f)
     (= spec.select17.i.i.i.i.i_1_212 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_1_209 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= tobool2.not.i.i.i.i.i_1_214 #b0))
  (= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 #xfffffff0))
  (= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218)
     (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))
  (ite (= tobool2.not.i.i.i.i.i_1_214 #b1)
     (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216)
     (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))
  (ite (bvult word.addr.1.i.i.i.i.i_1_219 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= tobool8.not.i.i.i.i.i_1_222 #b0))
  (= sub10.i.i.i.i.i_1_224 (bvadd num.1.i.i.i.i.i_1_220 #xfffffff8))
  (= shl11.i.i.i.i.i_1_226 (bvshl word.addr.1.i.i.i.i.i_1_219 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= word.addr.2.i.i.i.i.i_1_227 shl11.i.i.i.i.i_1_226)
     (= word.addr.2.i.i.i.i.i_1_227 word.addr.1.i.i.i.i.i_1_219))
  (ite (= tobool8.not.i.i.i.i.i_1_222 #b1)
     (= num.2.i.i.i.i.i_1_228 sub10.i.i.i.i.i_1_224)
     (= num.2.i.i.i.i.i_1_228 num.1.i.i.i.i.i_1_220))
  (ite (bvult word.addr.2.i.i.i.i.i_1_227 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= tobool14.not.i.i.i.i.i_1_230 #b0))
  (= sub16.i.i.i.i.i_1_232 (bvadd num.2.i.i.i.i.i_1_228 #xfffffffc))
  (= shl17.i.i.i.i.i_1_234 (bvshl word.addr.2.i.i.i.i.i_1_227 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= word.addr.3.i.i.i.i.i_1_235 shl17.i.i.i.i.i_1_234)
     (= word.addr.3.i.i.i.i.i_1_235 word.addr.2.i.i.i.i.i_1_227))
  (ite (= tobool14.not.i.i.i.i.i_1_230 #b1)
     (= num.3.i.i.i.i.i_1_236 sub16.i.i.i.i.i_1_232)
     (= num.3.i.i.i.i.i_1_236 num.2.i.i.i.i.i_1_228))
  (ite (bvult word.addr.3.i.i.i.i.i_1_235 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= tobool20.not.i.i.i.i.i_1_238 #b0))
  (= sub22.i.i.i.i.i_1_240 (bvadd num.3.i.i.i.i.i_1_236 #x000000fe))
  (= shl23.i.i.i.i.i_1_242 (bvshl word.addr.3.i.i.i.i.i_1_235 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= word.addr.4.i.i.i.i.i_1_243 shl23.i.i.i.i.i_1_242)
     (= word.addr.4.i.i.i.i.i_1_243 word.addr.3.i.i.i.i.i_1_235))
  (ite (= tobool20.not.i.i.i.i.i_1_238 #b1)
     (= num.4.i.i.i.i.i_1_244 sub22.i.i.i.i.i_1_240)
     (= num.4.i.i.i.i.i_1_244 num.3.i.i.i.i.i_1_236))
  (= word.addr.4.lobit.i.i.i.i.i.neg_1_246
   (bvlshr word.addr.4.i.i.i.i.i_1_243 #x000000000000003f))
  (= i.i.i.i.i.i.neg_1_247
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_1_246))
  (= add.i.i.i335.i_1_248 (bvadd num.4.i.i.i.i.i_1_244 i.i.i.i.i.i.neg_1_247))
  (= phi.bo_1_250 (bvand add.i.i.i335.i_1_248 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit.i, Size:8
  (= dst_reg_1_180 i.i333.i_1_200)
  (= dst_reg_1_181 i5.i.i_1_201)
  (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))
  (ite (= xor.i.i.i_1_202 #x0000000000000000)
     (= cmp.i.i.i.i_1_204 #b1)
     (= cmp.i.i.i.i_1_204 #b0))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (=> (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
          (and (= cmp.i323.i_1_151 #b1) a!3))
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= cond.i327.i_1_157 dst_reg_1_178)
           (= cond12.i.i_1_161 dst_reg_1_179)
           (= cond.i327.i_1_157 dst_reg_1_180)
           (= cond12.i.i_1_161 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_1_164 #b1)
                (= cmp1.i325.i_1_154 #b0)
                (= cmp.i323.i_1_151 #b0)
                (or (and (= cmp107.i_1_105 #b0) a!2)
                    (and (= cmp107.i_1_105 #b1) a!2)))))
  (=> a!3
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= i38.i.i_1_165 dst_reg_1_178)
           (= cond27.i.i_1_167 dst_reg_1_179)
           (= dst_reg_1_119 dst_reg_1_180)
           (= cond27.i.i_1_167 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_1_169 #b0)
                (= cmp16.i.i_1_164 #b0)
                (= cmp1.i325.i_1_154 #b0)
                (= cmp.i323.i_1_151 #b0)
                (or (and (= cmp107.i_1_105 #b0) a!2)
                    (and (= cmp107.i_1_105 #b1) a!2)))))
  (=> a!3
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= dst_reg_1_117 dst_reg_1_178)
           (= dst_reg_1_118 dst_reg_1_179)
           (= dst_reg_1_119 dst_reg_1_180)
           (= dst_reg_1_120 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_1_169 #b1)
                (= cmp16.i.i_1_164 #b0)
                (= cmp1.i325.i_1_154 #b0)
                (= cmp.i323.i_1_151 #b0)
                (or (and (= cmp107.i_1_105 #b0) a!2)
                    (and (= cmp107.i_1_105 #b1) a!2)))))
  (=> a!3
      (and (= src_reg_1_125 src_reg_1_186)
           (= src_reg_1_126 src_reg_1_187)
           (= src_reg_1_127 src_reg_1_188)
           (= src_reg_1_128 src_reg_1_189)
           (= src_reg_1_129 src_reg_1_190)
           (= src_reg_1_130 src_reg_1_191)
           (= src_reg_1_131 src_reg_1_192)
           (= src_reg_1_132 src_reg_1_193)
           (= src_reg_1_133 src_reg_1_194)
           (= src_reg_1_134 src_reg_1_195)
           (= src_reg_1_135 src_reg_1_196)
           (= src_reg_1_136 src_reg_1_197)
           (= src_reg_1_137 src_reg_1_198)
           (= src_reg_1_138 src_reg_1_199)
           (= dst_reg_1_111 dst_reg_1_172)
           (= dst_reg_1_112 dst_reg_1_173)
           (= dst_reg_1_113 dst_reg_1_174)
           (= dst_reg_1_114 dst_reg_1_175)
           (= and.i56.i_1_148 dst_reg_1_176)
           (= or6.i.i_1_145 dst_reg_1_177)
           (= cond40.i.i_1_171 dst_reg_1_178)
           (= i37.i.i_1_162 dst_reg_1_179)
           (= cond40.i.i_1_171 dst_reg_1_180)
           (= dst_reg_1_120 dst_reg_1_181)
           (= dst_reg_1_121 dst_reg_1_182)
           (= dst_reg_1_122 dst_reg_1_183)
           (= dst_reg_1_123 dst_reg_1_184)
           (= dst_reg_1_124 dst_reg_1_185))))))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_1_149 i38.i.i_1_165)
     (= cmp36.i.i_1_170 #b1)
     (= cmp36.i.i_1_170 #b0))
  (ite (= cmp36.i.i_1_170 #b1)
     (= cond40.i.i_1_171 i.i322.i_1_149)
     (= cond40.i.i_1_171 i38.i.i_1_165))
BasicBlock: entry, Size:36
  (= dst_reg_1_0 dst_reg_1_0)
  (= dst_reg_1_1 dst_reg_1_1)
  (= dst_reg_1_2 dst_reg_1_2)
  (= dst_reg_1_3 dst_reg_1_3)
  (= dst_reg_1_4 dst_reg_1_4)
  (= dst_reg_1_5 dst_reg_1_5)
  (= dst_reg_1_6 dst_reg_1_6)
  (= dst_reg_1_7 dst_reg_1_7)
  (= dst_reg_1_8 dst_reg_1_8)
  (= dst_reg_1_9 dst_reg_1_9)
  (= dst_reg_1_10 dst_reg_1_10)
  (= dst_reg_1_11 dst_reg_1_11)
  (= dst_reg_1_12 dst_reg_1_12)
  (= dst_reg_1_13 dst_reg_1_13)
  (= src_reg_1_14 src_reg_1_14)
  (= src_reg_1_15 src_reg_1_15)
  (= src_reg_1_16 src_reg_1_16)
  (= src_reg_1_17 src_reg_1_17)
  (= src_reg_1_18 src_reg_1_18)
  (= src_reg_1_19 src_reg_1_19)
  (= src_reg_1_20 src_reg_1_20)
  (= src_reg_1_21 src_reg_1_21)
  (= src_reg_1_22 src_reg_1_22)
  (= src_reg_1_23 src_reg_1_23)
  (= src_reg_1_24 src_reg_1_24)
  (= src_reg_1_25 src_reg_1_25)
  (= src_reg_1_26 src_reg_1_26)
  (= src_reg_1_27 src_reg_1_27)
  (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)
  (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)
  (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)
  (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)
  (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)
  (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)
  (ite (= src_reg1.sroa.10.0.copyload_1_31 #x0000000000000000)
     (= tobool.not.i.i_1_37 #b1)
     (= tobool.not.i.i_1_37 #b0))
  (= dst_reg_1_5 i215.i_1_38)
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_1_152 i37.i.i_1_162)
     (= cmp23.i.i_1_166 #b1)
     (= cmp23.i.i_1_166 #b0))
  (ite (= cmp23.i.i_1_166 #b1)
     (= cond27.i.i_1_167 i33.i.i_1_152)
     (= cond27.i.i_1_167 i37.i.i_1_162))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_1_32
               src_reg1.sroa.15.0.copyload_1_33)
     (= cmp16.not.i_1_39 #b1)
     (= cmp16.not.i_1_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_1_34
               src_reg1.sroa.22.0.copyload_1_35)
     (= cmp18.not.i_1_40 #b1)
     (= cmp18.not.i_1_40 #b0))
  (ite (= cmp16.not.i_1_39 #b1)
     (= or.cond197.i_1_42 #b1)
     (= or.cond197.i_1_42 cmp18.not.i_1_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.i_1_43 #b1)
     (= cmp21.i_1_43 #b0))
  (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.i_1_45 #b1)
     (= cmp24.i_1_45 #b0))
  (ite (= or.cond198.i_1_44 #b1)
     (= or.cond199.i_1_47 #b1)
     (= or.cond199.i_1_47 cmp24.i_1_45))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_1_165 #x0000000000000000)
     (= cmp31.i330.i_1_169 #b1)
     (= cmp31.i330.i_1_169 #b0))
BasicBlock: if.then109.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)
     (= cmp21.old.i_1_48 #b1)
     (= cmp21.old.i_1_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp24.old.i_1_49 #b1)
     (= cmp24.old.i_1_49 #b0))
  (ite (= cmp21.old.i_1_48 #b1)
     (= or.cond200.i_1_51 #b1)
     (= or.cond200.i_1_51 cmp24.old.i_1_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_1_120 i37.i.i_1_162)
  (ite (bvsgt i37.i.i_1_162 #xffffffffffffffff)
     (= cmp16.i.i_1_164 #b1)
     (= cmp16.i.i_1_164 #b0))
  (= dst_reg_1_119 i38.i.i_1_165)
BasicBlock: if.end105.i, Size:4
  (= dst_reg_1_8 i232.i_1_104)
  (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35)
     (= cmp107.i_1_105 #b1)
     (= cmp107.i_1_105 #b0))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (=> (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
          (and (= retval.0.i45.i_1_66 #b1) a!1))
      (and (= #x00000001 src_reg_1_90)
           (= src_reg_1_15 src_reg_1_91)
           (= src_reg_1_16 src_reg_1_92)
           (= src_reg_1_17 src_reg_1_93)
           (= src_reg_1_18 src_reg_1_94)
           (= src_reg_1_19 src_reg_1_95)
           (= src_reg_1_20 src_reg_1_96)
           (= src_reg_1_21 src_reg_1_97)
           (= src_reg_1_22 src_reg_1_98)
           (= src_reg_1_23 src_reg_1_99)
           (= src_reg_1_24 src_reg_1_100)
           (= src_reg_1_25 src_reg_1_101)
           (= src_reg_1_26 src_reg_1_102)
           (= src_reg_1_27 src_reg_1_103)
           (= #x00000001 dst_reg_1_76)
           (= dst_reg_1_1 dst_reg_1_77)
           (= dst_reg_1_2 dst_reg_1_78)
           (= dst_reg_1_3 dst_reg_1_79)
           (= dst_reg_1_4 dst_reg_1_80)
           (= dst_reg_1_5 dst_reg_1_81)
           (= #x8000000000000000 dst_reg_1_82)
           (= #x7fffffffffffffff dst_reg_1_83)
           (= dst_reg_1_8 dst_reg_1_84)
           (= dst_reg_1_9 dst_reg_1_85)
           (= dst_reg_1_10 dst_reg_1_86)
           (= dst_reg_1_11 dst_reg_1_87)
           (= dst_reg_1_12 dst_reg_1_88)
           (= dst_reg_1_13 dst_reg_1_89))))
  (let ((a!1 (and (= retval.0.i50.i_1_73 #b0)
                (= retval.0.i45.i_1_66 #b0)
                (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
                    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_1_90)
           (= src_reg_1_15 src_reg_1_91)
           (= src_reg_1_16 src_reg_1_92)
           (= src_reg_1_17 src_reg_1_93)
           (= src_reg_1_18 src_reg_1_94)
           (= src_reg_1_19 src_reg_1_95)
           (= src_reg_1_20 src_reg_1_96)
           (= src_reg_1_21 src_reg_1_97)
           (= src_reg_1_22 src_reg_1_98)
           (= src_reg_1_23 src_reg_1_99)
           (= src_reg_1_24 src_reg_1_100)
           (= src_reg_1_25 src_reg_1_101)
           (= src_reg_1_26 src_reg_1_102)
           (= src_reg_1_27 src_reg_1_103)
           (= #x00000001 dst_reg_1_76)
           (= dst_reg_1_1 dst_reg_1_77)
           (= dst_reg_1_2 dst_reg_1_78)
           (= dst_reg_1_3 dst_reg_1_79)
           (= dst_reg_1_4 dst_reg_1_80)
           (= dst_reg_1_5 dst_reg_1_81)
           (= sub.i.i_1_61 dst_reg_1_82)
           (= sub.i46.i_1_68 dst_reg_1_83)
           (= dst_reg_1_8 dst_reg_1_84)
           (= dst_reg_1_9 dst_reg_1_85)
           (= dst_reg_1_10 dst_reg_1_86)
           (= dst_reg_1_11 dst_reg_1_87)
           (= dst_reg_1_12 dst_reg_1_88)
           (= dst_reg_1_13 dst_reg_1_89))))
BasicBlock: if.end117.i, Size:13
  (= dst_reg_1_4 i234.i_1_139)
  (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))
  (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))
  (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))
  (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))
  (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))
  (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))
  (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 #xffffffffffffffff))
  (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))
  (= dst_reg_1_82 i.i322.i_1_149)
  (ite (bvsgt i.i322.i_1_149 #xffffffffffffffff)
     (= cmp.i323.i_1_151 #b1)
     (= cmp.i323.i_1_151 #b0))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (=> (and (= cmp107.i_1_105 #b1) a!2)
      (and (= src_reg_1_90 src_reg_1_125)
           (= src_reg_1_91 src_reg_1_126)
           (= src_reg_1_92 src_reg_1_127)
           (= src_reg_1_93 src_reg_1_128)
           (= src_reg_1_94 src_reg_1_129)
           (= src_reg_1_95 src_reg_1_130)
           (= src_reg_1_96 src_reg_1_131)
           (= src_reg_1_97 src_reg_1_132)
           (= src_reg_1_98 src_reg_1_133)
           (= src_reg_1_99 src_reg_1_134)
           (= src_reg_1_100 src_reg_1_135)
           (= src_reg_1_101 src_reg_1_136)
           (= src_reg_1_102 src_reg_1_137)
           (= src_reg_1_103 src_reg_1_138)
           (= dst_reg_1_76 dst_reg_1_111)
           (= dst_reg_1_77 dst_reg_1_112)
           (= dst_reg_1_78 dst_reg_1_113)
           (= dst_reg_1_79 dst_reg_1_114)
           (= dst_reg_1_80 dst_reg_1_115)
           (= dst_reg_1_81 dst_reg_1_116)
           (= dst_reg_1_82 dst_reg_1_117)
           (= dst_reg_1_83 dst_reg_1_118)
           (= #x0000000000000000 dst_reg_1_119)
           (= #xffffffffffffffff dst_reg_1_120)
           (= dst_reg_1_86 dst_reg_1_121)
           (= dst_reg_1_87 dst_reg_1_122)
           (= dst_reg_1_88 dst_reg_1_123)
           (= dst_reg_1_89 dst_reg_1_124)))))
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (=> (and (= cmp107.i_1_105 #b0) a!2)
      (and (= src_reg_1_90 src_reg_1_125)
           (= src_reg_1_91 src_reg_1_126)
           (= src_reg_1_92 src_reg_1_127)
           (= src_reg_1_93 src_reg_1_128)
           (= src_reg_1_94 src_reg_1_129)
           (= src_reg_1_95 src_reg_1_130)
           (= src_reg_1_96 src_reg_1_131)
           (= src_reg_1_97 src_reg_1_132)
           (= src_reg_1_98 src_reg_1_133)
           (= src_reg_1_99 src_reg_1_134)
           (= src_reg_1_100 src_reg_1_135)
           (= src_reg_1_101 src_reg_1_136)
           (= src_reg_1_102 src_reg_1_137)
           (= src_reg_1_103 src_reg_1_138)
           (= dst_reg_1_76 dst_reg_1_111)
           (= dst_reg_1_77 dst_reg_1_112)
           (= dst_reg_1_78 dst_reg_1_113)
           (= dst_reg_1_79 dst_reg_1_114)
           (= dst_reg_1_80 dst_reg_1_115)
           (= dst_reg_1_81 dst_reg_1_116)
           (= dst_reg_1_82 dst_reg_1_117)
           (= dst_reg_1_83 dst_reg_1_118)
           (= sub114.i_1_108 dst_reg_1_119)
           (= sub116.i_1_110 dst_reg_1_120)
           (= dst_reg_1_86 dst_reg_1_121)
           (= dst_reg_1_87 dst_reg_1_122)
           (= dst_reg_1_88 dst_reg_1_123)
           (= dst_reg_1_89 dst_reg_1_124)))))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_1_6 i230.i_1_60)
  (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 #x0000000000000000)
     (= cmp.i42.i_1_63 #b1)
     (= cmp.i42.i_1_63 #b0))
  (ite (bvslt sub.i.i_1_61 i230.i_1_60)
     (= cmp1.i43.i_1_64 #b1)
     (= cmp1.i43.i_1_64 #b0))
  (ite (bvsgt sub.i.i_1_61 i230.i_1_60)
     (= cmp2.i44.i_1_65 #b1)
     (= cmp2.i44.i_1_65 #b0))
  (ite (= cmp.i42.i_1_63 #b1)
     (= retval.0.i45.i_1_66 cmp1.i43.i_1_64)
     (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_1_119 i34.i.i_1_155)
  (ite (bvugt i.i322.i_1_149 i34.i.i_1_155)
     (= cmp3.i.i_1_156 #b1)
     (= cmp3.i.i_1_156 #b0))
  (ite (= cmp3.i.i_1_156 #b1)
     (= cond.i327.i_1_157 i.i322.i_1_149)
     (= cond.i327.i_1_157 i34.i.i_1_155))
  (= dst_reg_1_83 i35.i.i_1_158)
  (= dst_reg_1_120 i36.i.i_1_159)
  (ite (bvult i35.i.i_1_158 i36.i.i_1_159)
     (= cmp8.i.i_1_160 #b1)
     (= cmp8.i.i_1_160 #b0))
  (ite (= cmp8.i.i_1_160 #b1)
     (= cond12.i.i_1_161 i35.i.i_1_158)
     (= cond12.i.i_1_161 i36.i.i_1_159))
BasicBlock: lor.lhs.false94.i, Size:6
  (= dst_reg_1_7 i231.i_1_67)
  (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 #x0000000000000000)
     (= cmp.i47.i_1_70 #b1)
     (= cmp.i47.i_1_70 #b0))
  (ite (bvslt sub.i46.i_1_68 i231.i_1_67)
     (= cmp1.i48.i_1_71 #b1)
     (= cmp1.i48.i_1_71 #b0))
  (ite (bvsgt sub.i46.i_1_68 i231.i_1_67)
     (= cmp2.i49.i_1_72 #b1)
     (= cmp2.i49.i_1_72 #b0))
  (ite (= cmp.i47.i_1_70 #b1)
     (= retval.0.i50.i_1_73 cmp1.i48.i_1_71)
     (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_1_83 i33.i.i_1_152)
  (ite (bvslt i33.i.i_1_152 #x0000000000000000)
     (= cmp1.i325.i_1_154 #b1)
     (= cmp1.i325.i_1_154 #b0))
BasicBlock: if.then98.i, Size:0
BasicBlock: if.else101.i, Size:0
BasicBlock: if.else112.i, Size:3
  (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))
  (= dst_reg_1_9 i233.i_1_109)
  (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
  (or (and (= cmp31.i330.i_1_169 #b1) a!4)
      (and (= cmp31.i330.i_1_169 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_1_154 #b1) (and (= cmp.i323.i_1_151 #b0) a!3))
      (and (= cmp.i323.i_1_151 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_1_37 #b1)
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.then109.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
lor.lhs.false20.i
  (= tobool.not.i.i_1_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
if.end105.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b0) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i50.i_1_73 #b1) (and (= retval.0.i45.i_1_66 #b0) a!1))
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.end117.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6)
      (and (= cmp.i.i.i.i_1_204 #b1) a!6)
      (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
      (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))))))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
lor.lhs.false94.i
  (and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.then98.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
if.else101.i
  (and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
if.else112.i
  (let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
[encodeFunctionBody] EdgeAssertionsMap:
<if.else101.i, if.end105.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.then98.i, if.end105.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
  (or (and (= retval.0.i50.i_1_73 #b1) (= retval.0.i45.i_1_66 #b0) a!1)
      (and (= retval.0.i45.i_1_66 #b1) a!1)))
<lor.lhs.false94.i, if.then98.i> :(and (= retval.0.i50.i_1_73 #b1)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false94.i, if.else101.i> :(and (= retval.0.i50.i_1_73 #b0)
     (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<if.end27.i, lor.lhs.false94.i> :(and (= retval.0.i45.i_1_66 #b0)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end117.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b1)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_1_51 #b1) (= tobool.not.i.i_1_37 #b0))
    (and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1)))
<if.else112.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_1_37 #b0)
<if.end27.i, if.then98.i> :(and (= retval.0.i45.i_1_66 #b1)
     (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
         (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_1_47 #b1) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_1_37 #b1)
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b1)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b0) a!6))))))
<if.end105.i, if.then109.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp16.i.i_1_164 #b1)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.end105.i, if.else112.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b0) a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
<if.then109.i, if.end117.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp107.i_1_105 #b1) a!2)))
<if.end117.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_1_204 #b0) a!6) (and (= cmp.i.i.i.i_1_204 #b1) a!6)))))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
  (or (and (= cmp1.i325.i_1_154 #b1) (= cmp.i323.i_1_151 #b0) a!3)
      (and (= cmp.i323.i_1_151 #b1) a!3)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp107.i_1_105 #b0) a!2)
               (and (= cmp107.i_1_105 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_1_164 #b0)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_1_164 #b1)
                (and (= cmp1.i325.i_1_154 #b0)
                     (and (= cmp.i323.i_1_151 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_1_169 #b1) a!4)
               (and (= cmp31.i330.i_1_169 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_1_154 #b1)
                    (and (= cmp.i323.i_1_151 #b0) a!3))
               (and (= cmp.i323.i_1_151 #b1) a!3))))
  (and (= cmp.i.i.i.i_1_204 #b1) a!6))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b0)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_1_51 #b0) (= tobool.not.i.i_1_37 #b0))
               (and (= or.cond199.i_1_47 #b0) (= tobool.not.i.i_1_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i50.i_1_73 #b0)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i50.i_1_73 #b1)
                    (and (= retval.0.i45.i_1_66 #b0) a!1))
               (and (= retval.0.i45.i_1_66 #b1) a!1))))
  (and (= cmp31.i330.i_1_169 #b1)
       (= cmp16.i.i_1_164 #b0)
       (= cmp1.i325.i_1_154 #b0)
       (= cmp.i323.i_1_151 #b0)
       (or (and (= cmp107.i_1_105 #b0) a!2) (and (= cmp107.i_1_105 #b1) a!2)))))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32}) : {
- src_reg: [ [ src_reg_1_286 ] [ ] [ src_reg_1_287 ] [ src_reg_1_288 ] [ src_reg_1_289 ] [ [ src_reg_1_290 ] [ src_reg_1_291 ] ] [ src_reg_1_292 ] [ src_reg_1_293 ] [ src_reg_1_294 ] [ src_reg_1_295 ] [ ] [ src_reg_1_296 ] [ src_reg_1_297 ] [ src_reg_1_298 ] [ src_reg_1_299 ] ] 
- dst_reg: [ [ dst_reg_1_272 ] [ ] [ dst_reg_1_273 ] [ dst_reg_1_274 ] [ dst_reg_1_275 ] [ [ dst_reg_1_276 ] [ dst_reg_1_277 ] ] [ dst_reg_1_278 ] [ dst_reg_1_279 ] [ dst_reg_1_280 ] [ dst_reg_1_281 ] [ ] [ dst_reg_1_282 ] [ dst_reg_1_283 ] [ dst_reg_1_284 ] [ dst_reg_1_285 ] ] 
}
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ and4.i.i.i_1_271 ] [ and.i1.i.i_1_268 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_1_186 ] [ ] [ src_reg_1_187 ] [ src_reg_1_188 ] [ src_reg_1_189 ] [ [ src_reg_1_190 ] [ src_reg_1_191 ] ] [ src_reg_1_192 ] [ src_reg_1_193 ] [ src_reg_1_194 ] [ src_reg_1_195 ] [ ] [ src_reg_1_196 ] [ src_reg_1_197 ] [ src_reg_1_198 ] [ src_reg_1_199 ] ] 
- dst_reg: [ [ dst_reg_1_172 ] [ ] [ dst_reg_1_173 ] [ dst_reg_1_174 ] [ dst_reg_1_175 ] [ [ dst_reg_1_176 ] [ dst_reg_1_177 ] ] [ dst_reg_1_178 ] [ dst_reg_1_179 ] [ dst_reg_1_180 ] [ dst_reg_1_181 ] [ ] [ dst_reg_1_182 ] [ dst_reg_1_183 ] [ dst_reg_1_184 ] [ dst_reg_1_185 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ cond27.i.i_1_167 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond40.i.i_1_171 ] [ i37.i.i_1_162 ] [ cond40.i.i_1_171 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ cond27.i.i_1_167 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
17 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ sub114.i_1_108 ] [ sub116.i_1_110 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
36 = MemoryPhi({if.then109.i,16},{if.else112.i,18}) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ dst_reg_1_115 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ sub.i.i_1_61 ] [ sub.i46.i_1_68 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
35 = MemoryPhi({if.then98.i,12},{if.else101.i,14}) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ dst_reg_1_84 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ #x00000000 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
}
15 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ dst_reg_1_85 ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ #x0000000000000000 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_1_90 ] [ ] [ src_reg_1_91 ] [ src_reg_1_92 ] [ src_reg_1_93 ] [ [ src_reg_1_94 ] [ src_reg_1_95 ] ] [ src_reg_1_96 ] [ src_reg_1_97 ] [ src_reg_1_98 ] [ src_reg_1_99 ] [ ] [ src_reg_1_100 ] [ src_reg_1_101 ] [ src_reg_1_102 ] [ src_reg_1_103 ] ] 
- dst_reg: [ [ dst_reg_1_76 ] [ ] [ dst_reg_1_77 ] [ dst_reg_1_78 ] [ dst_reg_1_79 ] [ [ dst_reg_1_80 ] [ dst_reg_1_81 ] ] [ dst_reg_1_82 ] [ dst_reg_1_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_1_86 ] [ dst_reg_1_87 ] [ dst_reg_1_88 ] [ dst_reg_1_89 ] ] 
}
19 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ dst_reg_1_116 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
- dst_reg: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ dst_reg_1_117 ] [ dst_reg_1_118 ] [ cond.i327.i_1_157 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ cond.i327.i_1_157 ] [ cond12.i.i_1_161 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_1_111 ] [ ] [ dst_reg_1_112 ] [ dst_reg_1_113 ] [ dst_reg_1_114 ] [ [ and.i56.i_1_148 ] [ or6.i.i_1_145 ] ] [ i38.i.i_1_165 ] [ dst_reg_1_118 ] [ dst_reg_1_119 ] [ dst_reg_1_120 ] [ ] [ dst_reg_1_121 ] [ dst_reg_1_122 ] [ dst_reg_1_123 ] [ dst_reg_1_124 ] ] 
- src_reg: [ [ src_reg_1_125 ] [ ] [ src_reg_1_126 ] [ src_reg_1_127 ] [ src_reg_1_128 ] [ [ src_reg_1_129 ] [ src_reg_1_130 ] ] [ src_reg_1_131 ] [ src_reg_1_132 ] [ src_reg_1_133 ] [ src_reg_1_134 ] [ ] [ src_reg_1_135 ] [ src_reg_1_136 ] [ src_reg_1_137 ] [ src_reg_1_138 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_1_0 ] [ ] [ dst_reg_1_1 ] [ dst_reg_1_2 ] [ dst_reg_1_3 ] [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] [ dst_reg_1_6 ] [ dst_reg_1_7 ] [ dst_reg_1_8 ] [ dst_reg_1_9 ] [ ] [ dst_reg_1_10 ] [ dst_reg_1_11 ] [ dst_reg_1_12 ] [ dst_reg_1_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_1_4 ] [ dst_reg_1_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_4",
	"dst_reg_1_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7",
	"dst_reg_1_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7",
	"dst_reg_1_8",
	"dst_reg_1_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7",
	"dst_reg_1_8",
	"dst_reg_1_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7",
	"dst_reg_1_8",
	"dst_reg_1_9",
	"",
	"",
	"dst_reg_1_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7",
	"dst_reg_1_8",
	"dst_reg_1_9",
	"",
	"",
	"dst_reg_1_10",
	"dst_reg_1_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_1_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_0",
	[
		""
	],
	"dst_reg_1_1",
	"dst_reg_1_2",
	"dst_reg_1_3",
	[
		"dst_reg_1_4",
		"dst_reg_1_5"
	],
	"dst_reg_1_6",
	"dst_reg_1_7",
	"dst_reg_1_8",
	"dst_reg_1_9",
	"",
	"",
	"dst_reg_1_10",
	"dst_reg_1_11",
	"dst_reg_1_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_1_14 ] [ ] [ src_reg_1_15 ] [ src_reg_1_16 ] [ src_reg_1_17 ] [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] [ src_reg_1_20 ] [ src_reg_1_21 ] [ src_reg_1_22 ] [ src_reg_1_23 ] [ ] [ src_reg_1_24 ] [ src_reg_1_25 ] [ src_reg_1_26 ] [ src_reg_1_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_1_18 ] [ src_reg_1_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_1_18 ] [ src_reg_1_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_18",
	"src_reg_1_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21",
	"src_reg_1_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21",
	"src_reg_1_22",
	"src_reg_1_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21",
	"src_reg_1_22",
	"src_reg_1_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21",
	"src_reg_1_22",
	"src_reg_1_23",
	"",
	"",
	"src_reg_1_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21",
	"src_reg_1_22",
	"src_reg_1_23",
	"",
	"",
	"src_reg_1_24",
	"src_reg_1_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_1_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_14",
	[
		""
	],
	"src_reg_1_15",
	"src_reg_1_16",
	"src_reg_1_17",
	[
		"src_reg_1_18",
		"src_reg_1_19"
	],
	"src_reg_1_20",
	"src_reg_1_21",
	"src_reg_1_22",
	"src_reg_1_23",
	"",
	"",
	"src_reg_1_24",
	"src_reg_1_25",
	"src_reg_1_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_1_314 ] [ ] [ src_reg_1_315 ] [ src_reg_1_316 ] [ src_reg_1_317 ] [ [ src_reg_1_318 ] [ src_reg_1_319 ] ] [ src_reg_1_320 ] [ src_reg_1_321 ] [ src_reg_1_322 ] [ src_reg_1_323 ] [ ] [ src_reg_1_324 ] [ src_reg_1_325 ] [ src_reg_1_326 ] [ src_reg_1_327 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_1_314 ] [ ] [ src_reg_1_315 ] [ src_reg_1_316 ] [ src_reg_1_317 ] [ [ src_reg_1_318 ] [ src_reg_1_319 ] ] [ src_reg_1_320 ] [ src_reg_1_321 ] [ src_reg_1_322 ] [ src_reg_1_323 ] [ ] [ src_reg_1_324 ] [ src_reg_1_325 ] [ src_reg_1_326 ] [ src_reg_1_327 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_314 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_315 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_316 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_317 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_1_318 ] [ src_reg_1_319 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_1_318 ] [ src_reg_1_319 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_318 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_318"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_319 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_318",
	"src_reg_1_319"
]

[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_320 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_321 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_322 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321",
	"src_reg_1_322"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_1_323 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321",
	"src_reg_1_322",
	"src_reg_1_323"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321",
	"src_reg_1_322",
	"src_reg_1_323",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_324 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321",
	"src_reg_1_322",
	"src_reg_1_323",
	"",
	"",
	"src_reg_1_324"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_1_325 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321",
	"src_reg_1_322",
	"src_reg_1_323",
	"",
	"",
	"src_reg_1_324",
	"src_reg_1_325"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_1_326 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_1_314",
	[
		""
	],
	"src_reg_1_315",
	"src_reg_1_316",
	"src_reg_1_317",
	[
		"src_reg_1_318",
		"src_reg_1_319"
	],
	"src_reg_1_320",
	"src_reg_1_321",
	"src_reg_1_322",
	"src_reg_1_323",
	"",
	"",
	"src_reg_1_324",
	"src_reg_1_325",
	"src_reg_1_326"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_1_300 ] [ ] [ dst_reg_1_301 ] [ dst_reg_1_302 ] [ dst_reg_1_303 ] [ [ dst_reg_1_304 ] [ dst_reg_1_305 ] ] [ dst_reg_1_306 ] [ dst_reg_1_307 ] [ dst_reg_1_308 ] [ dst_reg_1_309 ] [ ] [ dst_reg_1_310 ] [ dst_reg_1_311 ] [ dst_reg_1_312 ] [ dst_reg_1_313 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_1_300 ] [ ] [ dst_reg_1_301 ] [ dst_reg_1_302 ] [ dst_reg_1_303 ] [ [ dst_reg_1_304 ] [ dst_reg_1_305 ] ] [ dst_reg_1_306 ] [ dst_reg_1_307 ] [ dst_reg_1_308 ] [ dst_reg_1_309 ] [ ] [ dst_reg_1_310 ] [ dst_reg_1_311 ] [ dst_reg_1_312 ] [ dst_reg_1_313 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_300 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_301 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_302 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_303 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_1_304 ] [ dst_reg_1_305 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_1_304 ] [ dst_reg_1_305 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_304 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_304"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_305 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_304",
	"dst_reg_1_305"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_306 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_307 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_308 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307",
	"dst_reg_1_308"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_1_309 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307",
	"dst_reg_1_308",
	"dst_reg_1_309"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307",
	"dst_reg_1_308",
	"dst_reg_1_309",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_310 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307",
	"dst_reg_1_308",
	"dst_reg_1_309",
	"",
	"",
	"dst_reg_1_310"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_1_311 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307",
	"dst_reg_1_308",
	"dst_reg_1_309",
	"",
	"",
	"dst_reg_1_310",
	"dst_reg_1_311"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_1_312 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_1_300",
	[
		""
	],
	"dst_reg_1_301",
	"dst_reg_1_302",
	"dst_reg_1_303",
	[
		"dst_reg_1_304",
		"dst_reg_1_305"
	],
	"dst_reg_1_306",
	"dst_reg_1_307",
	"dst_reg_1_308",
	"dst_reg_1_309",
	"",
	"",
	"dst_reg_1_310",
	"dst_reg_1_311",
	"dst_reg_1_312"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_SUB
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_1_0",
      [ "" ],
      "dst_reg_1_1",
      "dst_reg_1_2",
      "dst_reg_1_3",
      [ "dst_reg_1_4", "dst_reg_1_5" ],
      "dst_reg_1_6",
      "dst_reg_1_7",
      "dst_reg_1_8",
      "dst_reg_1_9",
      "",
      "",
      "dst_reg_1_10",
      "dst_reg_1_11",
      "dst_reg_1_12"
   ],
   "src_reg" : [
      "src_reg_1_14",
      [ "" ],
      "src_reg_1_15",
      "src_reg_1_16",
      "src_reg_1_17",
      [ "src_reg_1_18", "src_reg_1_19" ],
      "src_reg_1_20",
      "src_reg_1_21",
      "src_reg_1_22",
      "src_reg_1_23",
      "",
      "",
      "src_reg_1_24",
      "src_reg_1_25",
      "src_reg_1_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_1_300",
      [ "" ],
      "dst_reg_1_301",
      "dst_reg_1_302",
      "dst_reg_1_303",
      [ "dst_reg_1_304", "dst_reg_1_305" ],
      "dst_reg_1_306",
      "dst_reg_1_307",
      "dst_reg_1_308",
      "dst_reg_1_309",
      "",
      "",
      "dst_reg_1_310",
      "dst_reg_1_311",
      "dst_reg_1_312"
   ],
   "src_reg" : [
      "src_reg_1_314",
      [ "" ],
      "src_reg_1_315",
      "src_reg_1_316",
      "src_reg_1_317",
      [ "src_reg_1_318", "src_reg_1_319" ],
      "src_reg_1_320",
      "src_reg_1_321",
      "src_reg_1_322",
      "src_reg_1_323",
      "",
      "",
      "src_reg_1_324",
      "src_reg_1_325",
      "src_reg_1_326"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun src_reg1.sroa.17.0.copyload_1_34 () (_ BitVec 64))
(declare-fun i233.i_1_109 () (_ BitVec 64))
(declare-fun sub116.i_1_110 () (_ BitVec 64))
(declare-fun dst_reg_1_9 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_1_35 () (_ BitVec 64))
(declare-fun i232.i_1_104 () (_ BitVec 64))
(declare-fun sub114.i_1_108 () (_ BitVec 64))
(declare-fun tobool.not.i.i_1_37 () (_ BitVec 1))
(declare-fun or.cond199.i_1_47 () (_ BitVec 1))
(declare-fun or.cond200.i_1_51 () (_ BitVec 1))
(declare-fun retval.0.i45.i_1_66 () (_ BitVec 1))
(declare-fun retval.0.i50.i_1_73 () (_ BitVec 1))
(declare-fun cmp107.i_1_105 () (_ BitVec 1))
(declare-fun cmp1.i325.i_1_154 () (_ BitVec 1))
(declare-fun i33.i.i_1_152 () (_ BitVec 64))
(declare-fun dst_reg_1_83 () (_ BitVec 64))
(declare-fun cmp.i323.i_1_151 () (_ BitVec 1))
(declare-fun cmp2.i49.i_1_72 () (_ BitVec 1))
(declare-fun cmp1.i48.i_1_71 () (_ BitVec 1))
(declare-fun cmp.i47.i_1_70 () (_ BitVec 1))
(declare-fun i231.i_1_67 () (_ BitVec 64))
(declare-fun sub.i46.i_1_68 () (_ BitVec 64))
(declare-fun src_reg1.sroa.13.0.copyload_1_32 () (_ BitVec 64))
(declare-fun dst_reg_1_7 () (_ BitVec 64))
(declare-fun i36.i.i_1_159 () (_ BitVec 64))
(declare-fun cond12.i.i_1_161 () (_ BitVec 64))
(declare-fun i35.i.i_1_158 () (_ BitVec 64))
(declare-fun cmp8.i.i_1_160 () (_ BitVec 1))
(declare-fun dst_reg_1_120 () (_ BitVec 64))
(declare-fun i34.i.i_1_155 () (_ BitVec 64))
(declare-fun cond.i327.i_1_157 () (_ BitVec 64))
(declare-fun i.i322.i_1_149 () (_ BitVec 64))
(declare-fun cmp3.i.i_1_156 () (_ BitVec 1))
(declare-fun dst_reg_1_119 () (_ BitVec 64))
(declare-fun cmp2.i44.i_1_65 () (_ BitVec 1))
(declare-fun cmp1.i43.i_1_64 () (_ BitVec 1))
(declare-fun cmp.i42.i_1_63 () (_ BitVec 1))
(declare-fun i230.i_1_60 () (_ BitVec 64))
(declare-fun sub.i.i_1_61 () (_ BitVec 64))
(declare-fun src_reg1.sroa.15.0.copyload_1_33 () (_ BitVec 64))
(declare-fun dst_reg_1_6 () (_ BitVec 64))
(declare-fun dst_reg_1_124 () (_ BitVec 8))
(declare-fun dst_reg_1_89 () (_ BitVec 8))
(declare-fun dst_reg_1_123 () (_ BitVec 32))
(declare-fun dst_reg_1_88 () (_ BitVec 32))
(declare-fun dst_reg_1_122 () (_ BitVec 32))
(declare-fun dst_reg_1_87 () (_ BitVec 32))
(declare-fun dst_reg_1_121 () (_ BitVec 32))
(declare-fun dst_reg_1_86 () (_ BitVec 32))
(declare-fun dst_reg_1_118 () (_ BitVec 64))
(declare-fun dst_reg_1_117 () (_ BitVec 64))
(declare-fun dst_reg_1_82 () (_ BitVec 64))
(declare-fun dst_reg_1_116 () (_ BitVec 64))
(declare-fun dst_reg_1_81 () (_ BitVec 64))
(declare-fun dst_reg_1_115 () (_ BitVec 64))
(declare-fun dst_reg_1_80 () (_ BitVec 64))
(declare-fun dst_reg_1_114 () (_ BitVec 32))
(declare-fun dst_reg_1_79 () (_ BitVec 32))
(declare-fun dst_reg_1_113 () (_ BitVec 32))
(declare-fun dst_reg_1_78 () (_ BitVec 32))
(declare-fun dst_reg_1_112 () (_ BitVec 32))
(declare-fun dst_reg_1_77 () (_ BitVec 32))
(declare-fun dst_reg_1_111 () (_ BitVec 32))
(declare-fun dst_reg_1_76 () (_ BitVec 32))
(declare-fun src_reg_1_138 () (_ BitVec 8))
(declare-fun src_reg_1_103 () (_ BitVec 8))
(declare-fun src_reg_1_137 () (_ BitVec 32))
(declare-fun src_reg_1_102 () (_ BitVec 32))
(declare-fun src_reg_1_136 () (_ BitVec 32))
(declare-fun src_reg_1_101 () (_ BitVec 32))
(declare-fun src_reg_1_135 () (_ BitVec 32))
(declare-fun src_reg_1_100 () (_ BitVec 32))
(declare-fun src_reg_1_134 () (_ BitVec 64))
(declare-fun src_reg_1_99 () (_ BitVec 64))
(declare-fun src_reg_1_133 () (_ BitVec 64))
(declare-fun src_reg_1_98 () (_ BitVec 64))
(declare-fun src_reg_1_132 () (_ BitVec 64))
(declare-fun src_reg_1_97 () (_ BitVec 64))
(declare-fun src_reg_1_131 () (_ BitVec 64))
(declare-fun src_reg_1_96 () (_ BitVec 64))
(declare-fun src_reg_1_130 () (_ BitVec 64))
(declare-fun src_reg_1_95 () (_ BitVec 64))
(declare-fun src_reg_1_129 () (_ BitVec 64))
(declare-fun src_reg_1_94 () (_ BitVec 64))
(declare-fun src_reg_1_128 () (_ BitVec 32))
(declare-fun src_reg_1_93 () (_ BitVec 32))
(declare-fun src_reg_1_127 () (_ BitVec 32))
(declare-fun src_reg_1_92 () (_ BitVec 32))
(declare-fun src_reg_1_126 () (_ BitVec 32))
(declare-fun src_reg_1_91 () (_ BitVec 32))
(declare-fun src_reg_1_125 () (_ BitVec 32))
(declare-fun src_reg_1_90 () (_ BitVec 32))
(declare-fun neg.i55.i_1_147 () (_ BitVec 64))
(declare-fun sub.i51.i_1_140 () (_ BitVec 64))
(declare-fun and.i56.i_1_148 () (_ BitVec 64))
(declare-fun or6.i.i_1_145 () (_ BitVec 64))
(declare-fun xor.i53.i_1_143 () (_ BitVec 64))
(declare-fun or.i54.i_1_144 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_1_31 () (_ BitVec 64))
(declare-fun i215.i_1_38 () (_ BitVec 64))
(declare-fun sub3.i.i_1_142 () (_ BitVec 64))
(declare-fun add.i52.i_1_141 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_1_30 () (_ BitVec 64))
(declare-fun i234.i_1_139 () (_ BitVec 64))
(declare-fun dst_reg_1_4 () (_ BitVec 64))
(declare-fun dst_reg_1_13 () (_ BitVec 8))
(declare-fun dst_reg_1_12 () (_ BitVec 32))
(declare-fun dst_reg_1_11 () (_ BitVec 32))
(declare-fun dst_reg_1_10 () (_ BitVec 32))
(declare-fun dst_reg_1_85 () (_ BitVec 64))
(declare-fun dst_reg_1_84 () (_ BitVec 64))
(declare-fun dst_reg_1_8 () (_ BitVec 64))
(declare-fun dst_reg_1_5 () (_ BitVec 64))
(declare-fun dst_reg_1_3 () (_ BitVec 32))
(declare-fun dst_reg_1_2 () (_ BitVec 32))
(declare-fun dst_reg_1_1 () (_ BitVec 32))
(declare-fun src_reg_1_27 () (_ BitVec 8))
(declare-fun src_reg_1_26 () (_ BitVec 32))
(declare-fun src_reg_1_25 () (_ BitVec 32))
(declare-fun src_reg_1_24 () (_ BitVec 32))
(declare-fun src_reg_1_23 () (_ BitVec 64))
(declare-fun src_reg_1_22 () (_ BitVec 64))
(declare-fun src_reg_1_21 () (_ BitVec 64))
(declare-fun src_reg_1_20 () (_ BitVec 64))
(declare-fun src_reg_1_19 () (_ BitVec 64))
(declare-fun src_reg_1_18 () (_ BitVec 64))
(declare-fun src_reg_1_17 () (_ BitVec 32))
(declare-fun src_reg_1_16 () (_ BitVec 32))
(declare-fun src_reg_1_15 () (_ BitVec 32))
(declare-fun i38.i.i_1_165 () (_ BitVec 64))
(declare-fun cmp16.i.i_1_164 () (_ BitVec 1))
(declare-fun i37.i.i_1_162 () (_ BitVec 64))
(declare-fun cmp24.old.i_1_49 () (_ BitVec 1))
(declare-fun cmp21.old.i_1_48 () (_ BitVec 1))
(declare-fun cmp31.i330.i_1_169 () (_ BitVec 1))
(declare-fun cmp24.i_1_45 () (_ BitVec 1))
(declare-fun or.cond198.i_1_44 () (_ BitVec 1))
(declare-fun or.cond197.i_1_42 () (_ BitVec 1))
(declare-fun cmp21.i_1_43 () (_ BitVec 1))
(declare-fun cmp18.not.i_1_40 () (_ BitVec 1))
(declare-fun cmp16.not.i_1_39 () (_ BitVec 1))
(declare-fun cond27.i.i_1_167 () (_ BitVec 64))
(declare-fun cmp23.i.i_1_166 () (_ BitVec 1))
(declare-fun src_reg_1_14 () (_ BitVec 32))
(declare-fun dst_reg_1_0 () (_ BitVec 32))
(declare-fun cond40.i.i_1_171 () (_ BitVec 64))
(declare-fun cmp36.i.i_1_170 () (_ BitVec 1))
(declare-fun dst_reg_1_185 () (_ BitVec 8))
(declare-fun dst_reg_1_184 () (_ BitVec 32))
(declare-fun dst_reg_1_183 () (_ BitVec 32))
(declare-fun dst_reg_1_182 () (_ BitVec 32))
(declare-fun dst_reg_1_181 () (_ BitVec 64))
(declare-fun dst_reg_1_180 () (_ BitVec 64))
(declare-fun dst_reg_1_179 () (_ BitVec 64))
(declare-fun dst_reg_1_178 () (_ BitVec 64))
(declare-fun dst_reg_1_177 () (_ BitVec 64))
(declare-fun dst_reg_1_176 () (_ BitVec 64))
(declare-fun dst_reg_1_175 () (_ BitVec 32))
(declare-fun dst_reg_1_174 () (_ BitVec 32))
(declare-fun dst_reg_1_173 () (_ BitVec 32))
(declare-fun dst_reg_1_172 () (_ BitVec 32))
(declare-fun src_reg_1_199 () (_ BitVec 8))
(declare-fun src_reg_1_198 () (_ BitVec 32))
(declare-fun src_reg_1_197 () (_ BitVec 32))
(declare-fun src_reg_1_196 () (_ BitVec 32))
(declare-fun src_reg_1_195 () (_ BitVec 64))
(declare-fun src_reg_1_194 () (_ BitVec 64))
(declare-fun src_reg_1_193 () (_ BitVec 64))
(declare-fun src_reg_1_192 () (_ BitVec 64))
(declare-fun src_reg_1_191 () (_ BitVec 64))
(declare-fun src_reg_1_190 () (_ BitVec 64))
(declare-fun src_reg_1_189 () (_ BitVec 32))
(declare-fun src_reg_1_188 () (_ BitVec 32))
(declare-fun src_reg_1_187 () (_ BitVec 32))
(declare-fun src_reg_1_186 () (_ BitVec 32))
(declare-fun cmp.i.i.i.i_1_204 () (_ BitVec 1))
(declare-fun xor.i.i.i_1_202 () (_ BitVec 64))
(declare-fun i.i333.i_1_200 () (_ BitVec 64))
(declare-fun i5.i.i_1_201 () (_ BitVec 64))
(declare-fun add.i.i.i335.i_1_248 () (_ BitVec 32))
(declare-fun phi.bo_1_250 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_1_247 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_1_244 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_1_246 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_1_243 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_1_236 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_1_240 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_1_238 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_1_235 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_1_242 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_1_228 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_1_232 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_1_230 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_1_227 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_1_234 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_1_220 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_1_224 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_1_222 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_1_219 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_1_226 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_1_212 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_1_216 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_1_214 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_1_209 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_1_218 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_1_206 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_1_208 () (_ BitVec 64))
(declare-fun __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_1_251 () Bool)
(declare-fun neg.i.i.i_1_270 () (_ BitVec 64))
(declare-fun or.i.i.i_1_267 () (_ BitVec 64))
(declare-fun and4.i.i.i_1_271 () (_ BitVec 64))
(declare-fun and.i1.i.i_1_268 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_1_266 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_1_264 () (_ BitVec 64))
(declare-fun sub.i.i.i_1_261 () (_ BitVec 64))
(declare-fun cmp.i.i.i_1_256 () (_ BitVec 1))
(declare-fun and.i.i336.i_1_262 () (_ BitVec 64))
(declare-fun notmask.i.i.i_1_259 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_1_257 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_1_253 () (_ BitVec 32))
(declare-fun src_reg_1_327 () (_ BitVec 8))
(declare-fun src_reg_1_299 () (_ BitVec 8))
(declare-fun src_reg_1_326 () (_ BitVec 32))
(declare-fun src_reg_1_298 () (_ BitVec 32))
(declare-fun src_reg_1_325 () (_ BitVec 32))
(declare-fun src_reg_1_297 () (_ BitVec 32))
(declare-fun src_reg_1_324 () (_ BitVec 32))
(declare-fun src_reg_1_296 () (_ BitVec 32))
(declare-fun src_reg_1_323 () (_ BitVec 64))
(declare-fun src_reg_1_295 () (_ BitVec 64))
(declare-fun src_reg_1_322 () (_ BitVec 64))
(declare-fun src_reg_1_294 () (_ BitVec 64))
(declare-fun src_reg_1_321 () (_ BitVec 64))
(declare-fun src_reg_1_293 () (_ BitVec 64))
(declare-fun src_reg_1_320 () (_ BitVec 64))
(declare-fun src_reg_1_292 () (_ BitVec 64))
(declare-fun src_reg_1_319 () (_ BitVec 64))
(declare-fun src_reg_1_291 () (_ BitVec 64))
(declare-fun src_reg_1_318 () (_ BitVec 64))
(declare-fun src_reg_1_290 () (_ BitVec 64))
(declare-fun src_reg_1_317 () (_ BitVec 32))
(declare-fun src_reg_1_289 () (_ BitVec 32))
(declare-fun src_reg_1_316 () (_ BitVec 32))
(declare-fun src_reg_1_288 () (_ BitVec 32))
(declare-fun src_reg_1_315 () (_ BitVec 32))
(declare-fun src_reg_1_287 () (_ BitVec 32))
(declare-fun src_reg_1_314 () (_ BitVec 32))
(declare-fun src_reg_1_286 () (_ BitVec 32))
(declare-fun dst_reg_1_313 () (_ BitVec 8))
(declare-fun dst_reg_1_285 () (_ BitVec 8))
(declare-fun dst_reg_1_312 () (_ BitVec 32))
(declare-fun dst_reg_1_284 () (_ BitVec 32))
(declare-fun dst_reg_1_311 () (_ BitVec 32))
(declare-fun dst_reg_1_283 () (_ BitVec 32))
(declare-fun dst_reg_1_310 () (_ BitVec 32))
(declare-fun dst_reg_1_282 () (_ BitVec 32))
(declare-fun dst_reg_1_309 () (_ BitVec 64))
(declare-fun dst_reg_1_281 () (_ BitVec 64))
(declare-fun dst_reg_1_308 () (_ BitVec 64))
(declare-fun dst_reg_1_280 () (_ BitVec 64))
(declare-fun dst_reg_1_307 () (_ BitVec 64))
(declare-fun dst_reg_1_279 () (_ BitVec 64))
(declare-fun dst_reg_1_306 () (_ BitVec 64))
(declare-fun dst_reg_1_278 () (_ BitVec 64))
(declare-fun dst_reg_1_305 () (_ BitVec 64))
(declare-fun dst_reg_1_277 () (_ BitVec 64))
(declare-fun dst_reg_1_304 () (_ BitVec 64))
(declare-fun dst_reg_1_276 () (_ BitVec 64))
(declare-fun dst_reg_1_303 () (_ BitVec 32))
(declare-fun dst_reg_1_275 () (_ BitVec 32))
(declare-fun dst_reg_1_302 () (_ BitVec 32))
(declare-fun dst_reg_1_274 () (_ BitVec 32))
(declare-fun dst_reg_1_301 () (_ BitVec 32))
(declare-fun dst_reg_1_273 () (_ BitVec 32))
(declare-fun dst_reg_1_300 () (_ BitVec 32))
(declare-fun dst_reg_1_272 () (_ BitVec 32))
(assert
 (let (($x252 (= sub116.i_1_110 (bvsub i233.i_1_109 src_reg1.sroa.17.0.copyload_1_34))))
 (let (($x249 (= dst_reg_1_9 i233.i_1_109)))
 (let (($x247 (= sub114.i_1_108 (bvsub i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35))))
 (let (($x80 (= tobool.not.i.i_1_37 (_ bv1 1))))
 (let (($x735 (= or.cond199.i_1_47 (_ bv0 1))))
 (let (($x737 (and $x735 $x80)))
 (let (($x78 (= tobool.not.i.i_1_37 (_ bv0 1))))
 (let (($x738 (= or.cond200.i_1_51 (_ bv0 1))))
 (let (($x740 (and $x738 $x78)))
 (let (($x742 (or $x740 $x737)))
 (let (($x743 (= retval.0.i45.i_1_66 (_ bv1 1))))
 (let (($x745 (and $x743 $x742)))
 (let (($x744 (= retval.0.i45.i_1_66 (_ bv0 1))))
 (let (($x746 (and $x744 $x742)))
 (let (($x747 (= retval.0.i50.i_1_73 (_ bv1 1))))
 (let (($x749 (and $x747 $x746)))
 (let (($x751 (or $x749 $x745)))
 (let (($x748 (= retval.0.i50.i_1_73 (_ bv0 1))))
 (let (($x750 (and $x748 $x746)))
 (let (($x752 (or $x750 $x751)))
 (let (($x242 (= cmp107.i_1_105 (_ bv0 1))))
 (let (($x754 (and $x242 $x752)))
 (let (($x883 (=> $x754 (and $x247 $x249 $x252))))
 (let (($x348 (= cmp1.i325.i_1_154 (_ bv0 1))))
 (let (($x349 (= cmp1.i325.i_1_154 (_ bv1 1))))
 (let (($x350 (ite (bvslt i33.i.i_1_152 (_ bv0 64)) $x349 $x348)))
 (let (($x345 (= dst_reg_1_83 i33.i.i_1_152)))
 (let (($x243 (= cmp107.i_1_105 (_ bv1 1))))
 (let (($x753 (and $x243 $x752)))
 (let (($x755 (or $x754 $x753)))
 (let (($x341 (= cmp.i323.i_1_151 (_ bv0 1))))
 (let (($x757 (and $x341 $x755)))
 (let (($x881 (=> $x757 (and $x345 $x350))))
 (let (($x164 (= cmp.i47.i_1_70 (_ bv1 1))))
 (let (($x179 (ite $x164 (= retval.0.i50.i_1_73 cmp1.i48.i_1_71) (= retval.0.i50.i_1_73 cmp2.i49.i_1_72))))
 (let (($x173 (= cmp2.i49.i_1_72 (_ bv0 1))))
 (let (($x174 (= cmp2.i49.i_1_72 (_ bv1 1))))
 (let (($x175 (ite (bvsgt sub.i46.i_1_68 i231.i_1_67) $x174 $x173)))
 (let (($x168 (= cmp1.i48.i_1_71 (_ bv0 1))))
 (let (($x169 (= cmp1.i48.i_1_71 (_ bv1 1))))
 (let (($x170 (ite (bvslt sub.i46.i_1_68 i231.i_1_67) $x169 $x168)))
 (let (($x163 (= cmp.i47.i_1_70 (_ bv0 1))))
 (let (($x165 (ite (bvslt src_reg1.sroa.13.0.copyload_1_32 (_ bv0 64)) $x164 $x163)))
 (let (($x160 (= sub.i46.i_1_68 (bvsub i231.i_1_67 src_reg1.sroa.13.0.copyload_1_32))))
 (let (($x157 (= dst_reg_1_7 i231.i_1_67)))
 (let (($x879 (=> $x746 (and $x157 $x160 $x165 $x170 $x175 $x179))))
 (let (($x369 (= cmp8.i.i_1_160 (_ bv1 1))))
 (let (($x374 (ite $x369 (= cond12.i.i_1_161 i35.i.i_1_158) (= cond12.i.i_1_161 i36.i.i_1_159))))
 (let (($x368 (= cmp8.i.i_1_160 (_ bv0 1))))
 (let (($x370 (ite (bvult i35.i.i_1_158 i36.i.i_1_159) $x369 $x368)))
 (let (($x365 (= dst_reg_1_120 i36.i.i_1_159)))
 (let (($x363 (= dst_reg_1_83 i35.i.i_1_158)))
 (let (($x356 (= cmp3.i.i_1_156 (_ bv1 1))))
 (let (($x361 (ite $x356 (= cond.i327.i_1_157 i.i322.i_1_149) (= cond.i327.i_1_157 i34.i.i_1_155))))
 (let (($x355 (= cmp3.i.i_1_156 (_ bv0 1))))
 (let (($x357 (ite (bvugt i.i322.i_1_149 i34.i.i_1_155) $x356 $x355)))
 (let (($x352 (= dst_reg_1_119 i34.i.i_1_155)))
 (let (($x342 (= cmp.i323.i_1_151 (_ bv1 1))))
 (let (($x756 (and $x342 $x755)))
 (let (($x758 (and $x349 $x757)))
 (let (($x760 (or $x758 $x756)))
 (let (($x877 (=> $x760 (and $x352 $x357 $x361 $x363 $x365 $x370 $x374))))
 (let (($x140 (= cmp.i42.i_1_63 (_ bv1 1))))
 (let (($x155 (ite $x140 (= retval.0.i45.i_1_66 cmp1.i43.i_1_64) (= retval.0.i45.i_1_66 cmp2.i44.i_1_65))))
 (let (($x149 (= cmp2.i44.i_1_65 (_ bv0 1))))
 (let (($x150 (= cmp2.i44.i_1_65 (_ bv1 1))))
 (let (($x151 (ite (bvsgt sub.i.i_1_61 i230.i_1_60) $x150 $x149)))
 (let (($x144 (= cmp1.i43.i_1_64 (_ bv0 1))))
 (let (($x145 (= cmp1.i43.i_1_64 (_ bv1 1))))
 (let (($x146 (ite (bvslt sub.i.i_1_61 i230.i_1_60) $x145 $x144)))
 (let (($x139 (= cmp.i42.i_1_63 (_ bv0 1))))
 (let (($x141 (ite (bvslt src_reg1.sroa.15.0.copyload_1_33 (_ bv0 64)) $x140 $x139)))
 (let (($x136 (= sub.i.i_1_61 (bvsub i230.i_1_60 src_reg1.sroa.15.0.copyload_1_33))))
 (let (($x133 (= dst_reg_1_6 i230.i_1_60)))
 (let (($x875 (=> $x742 (and $x133 $x136 $x141 $x146 $x151 $x155))))
 (let (($x308 (= dst_reg_1_89 dst_reg_1_124)))
 (let (($x307 (= dst_reg_1_88 dst_reg_1_123)))
 (let (($x306 (= dst_reg_1_87 dst_reg_1_122)))
 (let (($x305 (= dst_reg_1_86 dst_reg_1_121)))
 (let (($x310 (= sub116.i_1_110 dst_reg_1_120)))
 (let (($x309 (= sub114.i_1_108 dst_reg_1_119)))
 (let (($x302 (= dst_reg_1_83 dst_reg_1_118)))
 (let (($x301 (= dst_reg_1_82 dst_reg_1_117)))
 (let (($x300 (= dst_reg_1_81 dst_reg_1_116)))
 (let (($x299 (= dst_reg_1_80 dst_reg_1_115)))
 (let (($x298 (= dst_reg_1_79 dst_reg_1_114)))
 (let (($x297 (= dst_reg_1_78 dst_reg_1_113)))
 (let (($x296 (= dst_reg_1_77 dst_reg_1_112)))
 (let (($x295 (= dst_reg_1_76 dst_reg_1_111)))
 (let (($x294 (= src_reg_1_103 src_reg_1_138)))
 (let (($x293 (= src_reg_1_102 src_reg_1_137)))
 (let (($x292 (= src_reg_1_101 src_reg_1_136)))
 (let (($x291 (= src_reg_1_100 src_reg_1_135)))
 (let (($x290 (= src_reg_1_99 src_reg_1_134)))
 (let (($x289 (= src_reg_1_98 src_reg_1_133)))
 (let (($x288 (= src_reg_1_97 src_reg_1_132)))
 (let (($x287 (= src_reg_1_96 src_reg_1_131)))
 (let (($x286 (= src_reg_1_95 src_reg_1_130)))
 (let (($x285 (= src_reg_1_94 src_reg_1_129)))
 (let (($x284 (= src_reg_1_93 src_reg_1_128)))
 (let (($x283 (= src_reg_1_92 src_reg_1_127)))
 (let (($x282 (= src_reg_1_91 src_reg_1_126)))
 (let (($x281 (= src_reg_1_90 src_reg_1_125)))
 (let (($x778 (and $x281 $x282 $x283 $x284 $x285 $x286 $x287 $x288 $x289 $x290 $x291 $x292 $x293 $x294 $x295 $x296 $x297 $x298 $x299 $x300 $x301 $x302 $x309 $x310 $x305 $x306 $x307 $x308)))
 (let (($x779 (=> $x754 $x778)))
 (let (($x304 (= (_ bv18446744073709551615 64) dst_reg_1_120)))
 (let (($x303 (= (_ bv0 64) dst_reg_1_119)))
 (let (($x776 (and $x281 $x282 $x283 $x284 $x285 $x286 $x287 $x288 $x289 $x290 $x291 $x292 $x293 $x294 $x295 $x296 $x297 $x298 $x299 $x300 $x301 $x302 $x303 $x304 $x305 $x306 $x307 $x308)))
 (let (($x777 (=> $x753 $x776)))
 (let (($x343 (ite (bvsgt i.i322.i_1_149 (_ bv18446744073709551615 64)) $x342 $x341)))
 (let (($x338 (= dst_reg_1_82 i.i322.i_1_149)))
 (let (($x336 (= and.i56.i_1_148 (bvand sub.i51.i_1_140 neg.i55.i_1_147))))
 (let (($x333 (= neg.i55.i_1_147 (bvxor or6.i.i_1_145 (_ bv18446744073709551615 64)))))
 (let (($x330 (= or6.i.i_1_145 (bvor or.i54.i_1_144 xor.i53.i_1_143))))
 (let (($x327 (= or.i54.i_1_144 (bvor i215.i_1_38 src_reg1.sroa.10.0.copyload_1_31))))
 (let (($x324 (= xor.i53.i_1_143 (bvxor add.i52.i_1_141 sub3.i.i_1_142))))
 (let (($x321 (= sub3.i.i_1_142 (bvsub sub.i51.i_1_140 src_reg1.sroa.10.0.copyload_1_31))))
 (let (($x318 (= add.i52.i_1_141 (bvadd sub.i51.i_1_140 i215.i_1_38))))
 (let (($x315 (= sub.i51.i_1_140 (bvsub i234.i_1_139 src_reg1.sroa.3.0.copyload_1_30))))
 (let (($x312 (= dst_reg_1_4 i234.i_1_139)))
 (let (($x872 (and $x312 $x315 $x318 $x321 $x324 $x327 $x330 $x333 $x336 $x338 $x343 $x777 $x779)))
 (let (($x873 (=> $x755 $x872)))
 (let (($x235 (= dst_reg_1_13 dst_reg_1_89)))
 (let (($x234 (= dst_reg_1_12 dst_reg_1_88)))
 (let (($x233 (= dst_reg_1_11 dst_reg_1_87)))
 (let (($x232 (= dst_reg_1_10 dst_reg_1_86)))
 (let (($x231 (= dst_reg_1_9 dst_reg_1_85)))
 (let (($x230 (= dst_reg_1_8 dst_reg_1_84)))
 (let (($x237 (= sub.i46.i_1_68 dst_reg_1_83)))
 (let (($x236 (= sub.i.i_1_61 dst_reg_1_82)))
 (let (($x227 (= dst_reg_1_5 dst_reg_1_81)))
 (let (($x226 (= dst_reg_1_4 dst_reg_1_80)))
 (let (($x225 (= dst_reg_1_3 dst_reg_1_79)))
 (let (($x224 (= dst_reg_1_2 dst_reg_1_78)))
 (let (($x223 (= dst_reg_1_1 dst_reg_1_77)))
 (let (($x222 (= (_ bv1 32) dst_reg_1_76)))
 (let (($x221 (= src_reg_1_27 src_reg_1_103)))
 (let (($x220 (= src_reg_1_26 src_reg_1_102)))
 (let (($x219 (= src_reg_1_25 src_reg_1_101)))
 (let (($x218 (= src_reg_1_24 src_reg_1_100)))
 (let (($x217 (= src_reg_1_23 src_reg_1_99)))
 (let (($x216 (= src_reg_1_22 src_reg_1_98)))
 (let (($x215 (= src_reg_1_21 src_reg_1_97)))
 (let (($x214 (= src_reg_1_20 src_reg_1_96)))
 (let (($x213 (= src_reg_1_19 src_reg_1_95)))
 (let (($x212 (= src_reg_1_18 src_reg_1_94)))
 (let (($x211 (= src_reg_1_17 src_reg_1_93)))
 (let (($x210 (= src_reg_1_16 src_reg_1_92)))
 (let (($x209 (= src_reg_1_15 src_reg_1_91)))
 (let (($x208 (= (_ bv1 32) src_reg_1_90)))
 (let (($x774 (and $x208 $x209 $x210 $x211 $x212 $x213 $x214 $x215 $x216 $x217 $x218 $x219 $x220 $x221 $x222 $x223 $x224 $x225 $x226 $x227 $x236 $x237 $x230 $x231 $x232 $x233 $x234 $x235)))
 (let (($x775 (=> $x750 $x774)))
 (let (($x229 (= (_ bv9223372036854775807 64) dst_reg_1_83)))
 (let (($x228 (= (_ bv9223372036854775808 64) dst_reg_1_82)))
 (let (($x772 (and $x208 $x209 $x210 $x211 $x212 $x213 $x214 $x215 $x216 $x217 $x218 $x219 $x220 $x221 $x222 $x223 $x224 $x225 $x226 $x227 $x228 $x229 $x230 $x231 $x232 $x233 $x234 $x235)))
 (let (($x773 (=> $x751 $x772)))
 (let (($x244 (ite (bvult i232.i_1_104 src_reg1.sroa.22.0.copyload_1_35) $x243 $x242)))
 (let (($x239 (= dst_reg_1_8 i232.i_1_104)))
 (let (($x871 (=> $x752 (and $x239 $x244 $x773 $x775))))
 (let (($x383 (= dst_reg_1_119 i38.i.i_1_165)))
 (let (($x379 (= cmp16.i.i_1_164 (_ bv0 1))))
 (let (($x380 (= cmp16.i.i_1_164 (_ bv1 1))))
 (let (($x381 (ite (bvsgt i37.i.i_1_162 (_ bv18446744073709551615 64)) $x380 $x379)))
 (let (($x376 (= dst_reg_1_120 i37.i.i_1_162)))
 (let (($x759 (and $x348 $x757)))
 (let (($x869 (=> $x759 (and $x376 $x381 $x383))))
 (let (($x126 (= or.cond200.i_1_51 (_ bv1 1))))
 (let (($x118 (= cmp21.old.i_1_48 (_ bv1 1))))
 (let (($x127 (ite $x118 $x126 (= or.cond200.i_1_51 cmp24.old.i_1_49))))
 (let (($x121 (= cmp24.old.i_1_49 (_ bv0 1))))
 (let (($x122 (= cmp24.old.i_1_49 (_ bv1 1))))
 (let (($x107 (bvugt src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35)))
 (let (($x123 (ite $x107 $x122 $x121)))
 (let (($x117 (= cmp21.old.i_1_48 (_ bv0 1))))
 (let (($x99 (bvsgt src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33)))
 (let (($x119 (ite $x99 $x118 $x117)))
 (let (($x867 (=> $x78 (and $x119 $x123 $x127))))
 (let (($x395 (= cmp31.i330.i_1_169 (_ bv0 1))))
 (let (($x396 (= cmp31.i330.i_1_169 (_ bv1 1))))
 (let (($x397 (ite (bvslt i38.i.i_1_165 (_ bv0 64)) $x396 $x395)))
 (let (($x762 (and $x379 $x759)))
 (let (($x865 (=> $x762 (and $x397))))
 (let (($x113 (= or.cond199.i_1_47 (_ bv1 1))))
 (let (($x115 (ite (= or.cond198.i_1_44 (_ bv1 1)) $x113 (= or.cond199.i_1_47 cmp24.i_1_45))))
 (let (($x108 (= cmp24.i_1_45 (_ bv0 1))))
 (let (($x109 (= cmp24.i_1_45 (_ bv1 1))))
 (let (($x110 (ite $x107 $x109 $x108)))
 (let (($x105 (= or.cond198.i_1_44 (bvor cmp21.i_1_43 or.cond197.i_1_42))))
 (let (($x100 (= cmp21.i_1_43 (_ bv0 1))))
 (let (($x101 (= cmp21.i_1_43 (_ bv1 1))))
 (let (($x102 (ite $x99 $x101 $x100)))
 (let (($x87 (= cmp16.not.i_1_39 (_ bv1 1))))
 (let (($x97 (ite $x87 (= or.cond197.i_1_42 (_ bv1 1)) (= or.cond197.i_1_42 cmp18.not.i_1_40))))
 (let (($x91 (= cmp18.not.i_1_40 (_ bv0 1))))
 (let (($x92 (= cmp18.not.i_1_40 (_ bv1 1))))
 (let (($x90 (and (distinct src_reg1.sroa.17.0.copyload_1_34 src_reg1.sroa.22.0.copyload_1_35) true)))
 (let (($x93 (ite $x90 $x92 $x91)))
 (let (($x86 (= cmp16.not.i_1_39 (_ bv0 1))))
 (let (($x85 (and (distinct src_reg1.sroa.13.0.copyload_1_32 src_reg1.sroa.15.0.copyload_1_33) true)))
 (let (($x88 (ite $x85 $x87 $x86)))
 (let (($x863 (=> $x80 (and $x88 $x93 $x97 $x102 $x105 $x110 $x115))))
 (let (($x387 (= cmp23.i.i_1_166 (_ bv1 1))))
 (let (($x392 (ite $x387 (= cond27.i.i_1_167 i33.i.i_1_152) (= cond27.i.i_1_167 i37.i.i_1_162))))
 (let (($x386 (= cmp23.i.i_1_166 (_ bv0 1))))
 (let (($x388 (ite (bvult i33.i.i_1_152 i37.i.i_1_162) $x387 $x386)))
 (let (($x761 (and $x380 $x759)))
 (let (($x861 (=> $x761 (and $x388 $x392))))
 (let (($x83 (= dst_reg_1_5 i215.i_1_38)))
 (let (($x81 (ite (= src_reg1.sroa.10.0.copyload_1_31 (_ bv0 64)) $x80 $x78)))
 (let (($x73 (= src_reg_1_23 src_reg1.sroa.22.0.copyload_1_35)))
 (let (($x71 (= src_reg_1_22 src_reg1.sroa.17.0.copyload_1_34)))
 (let (($x69 (= src_reg_1_21 src_reg1.sroa.15.0.copyload_1_33)))
 (let (($x67 (= src_reg_1_20 src_reg1.sroa.13.0.copyload_1_32)))
 (let (($x65 (= src_reg_1_19 src_reg1.sroa.10.0.copyload_1_31)))
 (let (($x63 (= src_reg_1_18 src_reg1.sroa.3.0.copyload_1_30)))
 (let (($x60 (= src_reg_1_27 src_reg_1_27)))
 (let (($x59 (= src_reg_1_26 src_reg_1_26)))
 (let (($x58 (= src_reg_1_25 src_reg_1_25)))
 (let (($x57 (= src_reg_1_24 src_reg_1_24)))
 (let (($x56 (= src_reg_1_23 src_reg_1_23)))
 (let (($x55 (= src_reg_1_22 src_reg_1_22)))
 (let (($x54 (= src_reg_1_21 src_reg_1_21)))
 (let (($x53 (= src_reg_1_20 src_reg_1_20)))
 (let (($x52 (= src_reg_1_19 src_reg_1_19)))
 (let (($x51 (= src_reg_1_18 src_reg_1_18)))
 (let (($x50 (= src_reg_1_17 src_reg_1_17)))
 (let (($x49 (= src_reg_1_16 src_reg_1_16)))
 (let (($x48 (= src_reg_1_15 src_reg_1_15)))
 (let (($x47 (= src_reg_1_14 src_reg_1_14)))
 (let (($x32 (= dst_reg_1_13 dst_reg_1_13)))
 (let (($x31 (= dst_reg_1_12 dst_reg_1_12)))
 (let (($x30 (= dst_reg_1_11 dst_reg_1_11)))
 (let (($x29 (= dst_reg_1_10 dst_reg_1_10)))
 (let (($x28 (= dst_reg_1_9 dst_reg_1_9)))
 (let (($x27 (= dst_reg_1_8 dst_reg_1_8)))
 (let (($x26 (= dst_reg_1_7 dst_reg_1_7)))
 (let (($x25 (= dst_reg_1_6 dst_reg_1_6)))
 (let (($x24 (= dst_reg_1_5 dst_reg_1_5)))
 (let (($x23 (= dst_reg_1_4 dst_reg_1_4)))
 (let (($x22 (= dst_reg_1_3 dst_reg_1_3)))
 (let (($x21 (= dst_reg_1_2 dst_reg_1_2)))
 (let (($x20 (= dst_reg_1_1 dst_reg_1_1)))
 (let (($x19 (= dst_reg_1_0 dst_reg_1_0)))
 (let (($x401 (= cmp36.i.i_1_170 (_ bv1 1))))
 (let (($x406 (ite $x401 (= cond40.i.i_1_171 i.i322.i_1_149) (= cond40.i.i_1_171 i38.i.i_1_165))))
 (let (($x400 (= cmp36.i.i_1_170 (_ bv0 1))))
 (let (($x402 (ite (bvugt i.i322.i_1_149 i38.i.i_1_165) $x401 $x400)))
 (let (($x764 (and $x396 $x762)))
 (let (($x859 (=> $x764 (and $x402 $x406))))
 (let (($x462 (= dst_reg_1_124 dst_reg_1_185)))
 (let (($x461 (= dst_reg_1_123 dst_reg_1_184)))
 (let (($x460 (= dst_reg_1_122 dst_reg_1_183)))
 (let (($x459 (= dst_reg_1_121 dst_reg_1_182)))
 (let (($x469 (= dst_reg_1_120 dst_reg_1_181)))
 (let (($x472 (= cond40.i.i_1_171 dst_reg_1_180)))
 (let (($x471 (= i37.i.i_1_162 dst_reg_1_179)))
 (let (($x470 (= cond40.i.i_1_171 dst_reg_1_178)))
 (let (($x454 (= or6.i.i_1_145 dst_reg_1_177)))
 (let (($x453 (= and.i56.i_1_148 dst_reg_1_176)))
 (let (($x452 (= dst_reg_1_114 dst_reg_1_175)))
 (let (($x451 (= dst_reg_1_113 dst_reg_1_174)))
 (let (($x450 (= dst_reg_1_112 dst_reg_1_173)))
 (let (($x449 (= dst_reg_1_111 dst_reg_1_172)))
 (let (($x448 (= src_reg_1_138 src_reg_1_199)))
 (let (($x447 (= src_reg_1_137 src_reg_1_198)))
 (let (($x446 (= src_reg_1_136 src_reg_1_197)))
 (let (($x445 (= src_reg_1_135 src_reg_1_196)))
 (let (($x444 (= src_reg_1_134 src_reg_1_195)))
 (let (($x443 (= src_reg_1_133 src_reg_1_194)))
 (let (($x442 (= src_reg_1_132 src_reg_1_193)))
 (let (($x441 (= src_reg_1_131 src_reg_1_192)))
 (let (($x440 (= src_reg_1_130 src_reg_1_191)))
 (let (($x439 (= src_reg_1_129 src_reg_1_190)))
 (let (($x438 (= src_reg_1_128 src_reg_1_189)))
 (let (($x437 (= src_reg_1_127 src_reg_1_188)))
 (let (($x436 (= src_reg_1_126 src_reg_1_187)))
 (let (($x435 (= src_reg_1_125 src_reg_1_186)))
 (let (($x786 (and $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x442 $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x470 $x471 $x472 $x469 $x459 $x460 $x461 $x462)))
 (let (($x787 (=> $x764 $x786)))
 (let (($x465 (= dst_reg_1_119 dst_reg_1_180)))
 (let (($x468 (= dst_reg_1_118 dst_reg_1_179)))
 (let (($x467 (= dst_reg_1_117 dst_reg_1_178)))
 (let (($x784 (and $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x442 $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x467 $x468 $x465 $x469 $x459 $x460 $x461 $x462)))
 (let (($x765 (and $x395 $x762)))
 (let (($x785 (=> $x765 $x784)))
 (let (($x466 (= cond27.i.i_1_167 dst_reg_1_181)))
 (let (($x464 (= cond27.i.i_1_167 dst_reg_1_179)))
 (let (($x463 (= i38.i.i_1_165 dst_reg_1_178)))
 (let (($x782 (and $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x442 $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x463 $x464 $x465 $x466 $x459 $x460 $x461 $x462)))
 (let (($x783 (=> $x761 $x782)))
 (let (($x458 (= cond12.i.i_1_161 dst_reg_1_181)))
 (let (($x457 (= cond.i327.i_1_157 dst_reg_1_180)))
 (let (($x456 (= cond12.i.i_1_161 dst_reg_1_179)))
 (let (($x455 (= cond.i327.i_1_157 dst_reg_1_178)))
 (let (($x780 (and $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x442 $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462)))
 (let (($x781 (=> $x760 $x780)))
 (let (($x482 (= cmp.i.i.i.i_1_204 (_ bv0 1))))
 (let (($x483 (= cmp.i.i.i.i_1_204 (_ bv1 1))))
 (let (($x484 (ite (= xor.i.i.i_1_202 (_ bv0 64)) $x483 $x482)))
 (let (($x479 (= xor.i.i.i_1_202 (bvxor i5.i.i_1_201 i.i333.i_1_200))))
 (let (($x476 (= dst_reg_1_181 i5.i.i_1_201)))
 (let (($x474 (= dst_reg_1_180 i.i333.i_1_200)))
 (let (($x767 (or $x764 (or $x765 (or $x761 $x760)))))
 (let (($x857 (=> $x767 (and $x474 $x476 $x479 $x484 $x781 $x783 $x785 $x787))))
 (let (($x606 (= phi.bo_1_250 (bvand add.i.i.i335.i_1_248 (_ bv255 32)))))
 (let (($x602 (= add.i.i.i335.i_1_248 (bvadd num.4.i.i.i.i.i_1_244 i.i.i.i.i.i.neg_1_247))))
 (let (($x599 (= i.i.i.i.i.i.neg_1_247 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_1_246))))
 (let (($x596 (= word.addr.4.lobit.i.i.i.i.i.neg_1_246 (bvlshr word.addr.4.i.i.i.i.i_1_243 (_ bv63 64)))))
 (let (($x575 (= tobool20.not.i.i.i.i.i_1_238 (_ bv1 1))))
 (let (($x592 (ite $x575 (= num.4.i.i.i.i.i_1_244 sub22.i.i.i.i.i_1_240) (= num.4.i.i.i.i.i_1_244 num.3.i.i.i.i.i_1_236))))
 (let (($x588 (ite $x575 (= word.addr.4.i.i.i.i.i_1_243 shl23.i.i.i.i.i_1_242) (= word.addr.4.i.i.i.i.i_1_243 word.addr.3.i.i.i.i.i_1_235))))
 (let (($x584 (= shl23.i.i.i.i.i_1_242 (bvshl word.addr.3.i.i.i.i.i_1_235 (_ bv2 64)))))
 (let (($x580 (= sub22.i.i.i.i.i_1_240 (bvadd num.3.i.i.i.i.i_1_236 (_ bv254 32)))))
 (let (($x574 (= tobool20.not.i.i.i.i.i_1_238 (_ bv0 1))))
 (let (($x576 (ite (bvult word.addr.3.i.i.i.i.i_1_235 (_ bv4611686018427387904 64)) $x575 $x574)))
 (let (($x553 (= tobool14.not.i.i.i.i.i_1_230 (_ bv1 1))))
 (let (($x570 (ite $x553 (= num.3.i.i.i.i.i_1_236 sub16.i.i.i.i.i_1_232) (= num.3.i.i.i.i.i_1_236 num.2.i.i.i.i.i_1_228))))
 (let (($x566 (ite $x553 (= word.addr.3.i.i.i.i.i_1_235 shl17.i.i.i.i.i_1_234) (= word.addr.3.i.i.i.i.i_1_235 word.addr.2.i.i.i.i.i_1_227))))
 (let (($x562 (= shl17.i.i.i.i.i_1_234 (bvshl word.addr.2.i.i.i.i.i_1_227 (_ bv4 64)))))
 (let (($x558 (= sub16.i.i.i.i.i_1_232 (bvadd num.2.i.i.i.i.i_1_228 (_ bv4294967292 32)))))
 (let (($x552 (= tobool14.not.i.i.i.i.i_1_230 (_ bv0 1))))
 (let (($x554 (ite (bvult word.addr.2.i.i.i.i.i_1_227 (_ bv1152921504606846976 64)) $x553 $x552)))
 (let (($x531 (= tobool8.not.i.i.i.i.i_1_222 (_ bv1 1))))
 (let (($x548 (ite $x531 (= num.2.i.i.i.i.i_1_228 sub10.i.i.i.i.i_1_224) (= num.2.i.i.i.i.i_1_228 num.1.i.i.i.i.i_1_220))))
 (let (($x544 (ite $x531 (= word.addr.2.i.i.i.i.i_1_227 shl11.i.i.i.i.i_1_226) (= word.addr.2.i.i.i.i.i_1_227 word.addr.1.i.i.i.i.i_1_219))))
 (let (($x540 (= shl11.i.i.i.i.i_1_226 (bvshl word.addr.1.i.i.i.i.i_1_219 (_ bv8 64)))))
 (let (($x536 (= sub10.i.i.i.i.i_1_224 (bvadd num.1.i.i.i.i.i_1_220 (_ bv4294967288 32)))))
 (let (($x530 (= tobool8.not.i.i.i.i.i_1_222 (_ bv0 1))))
 (let (($x532 (ite (bvult word.addr.1.i.i.i.i.i_1_219 (_ bv72057594037927936 64)) $x531 $x530)))
 (let (($x509 (= tobool2.not.i.i.i.i.i_1_214 (_ bv1 1))))
 (let (($x526 (ite $x509 (= num.1.i.i.i.i.i_1_220 sub4.i.i.i.i.i_1_216) (= num.1.i.i.i.i.i_1_220 spec.select17.i.i.i.i.i_1_212))))
 (let (($x522 (ite $x509 (= word.addr.1.i.i.i.i.i_1_219 shl5.i.i.i.i.i_1_218) (= word.addr.1.i.i.i.i.i_1_219 spec.select.i.i.i.i.i_1_209))))
 (let (($x518 (= shl5.i.i.i.i.i_1_218 (bvshl spec.select.i.i.i.i.i_1_209 (_ bv16 64)))))
 (let (($x514 (= sub4.i.i.i.i.i_1_216 (bvadd spec.select17.i.i.i.i.i_1_212 (_ bv4294967280 32)))))
 (let (($x508 (= tobool2.not.i.i.i.i.i_1_214 (_ bv0 1))))
 (let (($x510 (ite (bvult spec.select.i.i.i.i.i_1_209 (_ bv281474976710656 64)) $x509 $x508)))
 (let (($x489 (= tobool.not.i.i.i.i.i_1_206 (_ bv1 1))))
 (let (($x504 (ite $x489 (= spec.select17.i.i.i.i.i_1_212 (_ bv31 32)) (= spec.select17.i.i.i.i.i_1_212 (_ bv63 32)))))
 (let (($x498 (ite $x489 (= spec.select.i.i.i.i.i_1_209 shl.i.i.i.i.i_1_208) (= spec.select.i.i.i.i.i_1_209 xor.i.i.i_1_202))))
 (let (($x494 (= shl.i.i.i.i.i_1_208 (bvshl xor.i.i.i_1_202 (_ bv32 64)))))
 (let (($x488 (= tobool.not.i.i.i.i.i_1_206 (_ bv0 1))))
 (let (($x490 (ite (bvult xor.i.i.i_1_202 (_ bv4294967296 64)) $x489 $x488)))
 (let (($x854 (and $x490 $x494 $x498 $x504 $x510 $x514 $x518 $x522 $x526 $x532 $x536 $x540 $x544 $x548 $x554 $x558 $x562 $x566 $x570 $x576 $x580 $x584 $x588 $x592 $x596 $x599 $x602 $x606)))
 (let (($x769 (and $x482 $x767)))
 (let (($x855 (=> $x769 $x854)))
 (let (($x768 (and $x483 $x767)))
 (let (($x789 (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252 $x768)))
 (let (($x788 (= if.end.i.i.i.i___reg_bound_offset.exit.i_1_251 $x769)))
 (let (($x650 (= and4.i.i.i_1_271 (bvand or.i.i.i_1_267 neg.i.i.i_1_270))))
 (let (($x647 (= neg.i.i.i_1_270 (bvxor and.i1.i.i_1_268 (_ bv18446744073709551615 64)))))
 (let (($x644 (= and.i1.i.i_1_268 (bvand retval.sroa.3.0.i.i.i_1_266 or6.i.i_1_145))))
 (let (($x641 (= or.i.i.i_1_267 (bvor retval.sroa.0.0.i.i.i_1_264 and.i56.i_1_148))))
 (let (($x617 (= cmp.i.i.i_1_256 (_ bv1 1))))
 (let (($x638 (ite $x617 (= retval.sroa.3.0.i.i.i_1_266 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i.i_1_266 sub.i.i.i_1_261))))
 (let (($x634 (ite $x617 (= retval.sroa.0.0.i.i.i_1_264 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_1_264 and.i.i336.i_1_262))))
 (let (($x630 (= and.i.i336.i_1_262 (bvand notmask.i.i.i_1_259 i.i333.i_1_200))))
 (let (($x627 (= sub.i.i.i_1_261 (bvxor notmask.i.i.i_1_259 (_ bv18446744073709551615 64)))))
 (let (($x624 (= notmask.i.i.i_1_259 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_1_257))))
 (let (($x621 (= sh_prom.i.i.i_1_257 ((_ zero_extend 32) retval.0.i.i.i.i_1_253))))
 (let (($x616 (= cmp.i.i.i_1_256 (_ bv0 1))))
 (let (($x618 (ite (bvugt retval.0.i.i.i.i_1_253 (_ bv63 32)) $x617 $x616)))
 (let (($x612 (= retval.0.i.i.i.i_1_253 (_ bv0 32))))
 (let (($x613 (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_1_252 $x612)))
 (let (($x610 (= retval.0.i.i.i.i_1_253 phi.bo_1_250)))
 (let (($x611 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_1_251 $x610)))
 (let (($x852 (and $x611 $x613 $x618 $x621 $x624 $x627 $x630 $x634 $x638 $x641 $x644 $x647 $x650 $x788 $x789)))
 (let (($x770 (or $x769 $x768)))
 (let (($x853 (=> $x770 $x852)))
 (let (($x849 (= src_reg_1_299 src_reg_1_327)))
 (let (($x848 (= src_reg_1_298 src_reg_1_326)))
 (let (($x847 (= src_reg_1_297 src_reg_1_325)))
 (let (($x846 (= src_reg_1_296 src_reg_1_324)))
 (let (($x845 (= src_reg_1_295 src_reg_1_323)))
 (let (($x844 (= src_reg_1_294 src_reg_1_322)))
 (let (($x843 (= src_reg_1_293 src_reg_1_321)))
 (let (($x842 (= src_reg_1_292 src_reg_1_320)))
 (let (($x841 (= src_reg_1_291 src_reg_1_319)))
 (let (($x840 (= src_reg_1_290 src_reg_1_318)))
 (let (($x839 (= src_reg_1_289 src_reg_1_317)))
 (let (($x838 (= src_reg_1_288 src_reg_1_316)))
 (let (($x837 (= src_reg_1_287 src_reg_1_315)))
 (let (($x836 (= src_reg_1_286 src_reg_1_314)))
 (let (($x821 (= dst_reg_1_285 dst_reg_1_313)))
 (let (($x820 (= dst_reg_1_284 dst_reg_1_312)))
 (let (($x819 (= dst_reg_1_283 dst_reg_1_311)))
 (let (($x818 (= dst_reg_1_282 dst_reg_1_310)))
 (let (($x817 (= dst_reg_1_281 dst_reg_1_309)))
 (let (($x816 (= dst_reg_1_280 dst_reg_1_308)))
 (let (($x815 (= dst_reg_1_279 dst_reg_1_307)))
 (let (($x814 (= dst_reg_1_278 dst_reg_1_306)))
 (let (($x813 (= dst_reg_1_277 dst_reg_1_305)))
 (let (($x812 (= dst_reg_1_276 dst_reg_1_304)))
 (let (($x811 (= dst_reg_1_275 dst_reg_1_303)))
 (let (($x810 (= dst_reg_1_274 dst_reg_1_302)))
 (let (($x809 (= dst_reg_1_273 dst_reg_1_301)))
 (let (($x808 (= dst_reg_1_272 dst_reg_1_300)))
 (let (($x734 (= dst_reg_1_185 dst_reg_1_285)))
 (let (($x733 (= dst_reg_1_184 dst_reg_1_284)))
 (let (($x732 (= dst_reg_1_183 dst_reg_1_283)))
 (let (($x731 (= dst_reg_1_182 dst_reg_1_282)))
 (let (($x730 (= dst_reg_1_181 dst_reg_1_281)))
 (let (($x729 (= dst_reg_1_180 dst_reg_1_280)))
 (let (($x728 (= dst_reg_1_179 dst_reg_1_279)))
 (let (($x727 (= dst_reg_1_178 dst_reg_1_278)))
 (let (($x726 (= and.i1.i.i_1_268 dst_reg_1_277)))
 (let (($x725 (= and4.i.i.i_1_271 dst_reg_1_276)))
 (let (($x724 (= dst_reg_1_175 dst_reg_1_275)))
 (let (($x723 (= dst_reg_1_174 dst_reg_1_274)))
 (let (($x722 (= dst_reg_1_173 dst_reg_1_273)))
 (let (($x721 (= dst_reg_1_172 dst_reg_1_272)))
 (let (($x720 (= src_reg_1_199 src_reg_1_299)))
 (let (($x719 (= src_reg_1_198 src_reg_1_298)))
 (let (($x718 (= src_reg_1_197 src_reg_1_297)))
 (let (($x717 (= src_reg_1_196 src_reg_1_296)))
 (let (($x716 (= src_reg_1_195 src_reg_1_295)))
 (let (($x715 (= src_reg_1_194 src_reg_1_294)))
 (let (($x714 (= src_reg_1_193 src_reg_1_293)))
 (let (($x713 (= src_reg_1_192 src_reg_1_292)))
 (let (($x712 (= src_reg_1_191 src_reg_1_291)))
 (let (($x711 (= src_reg_1_190 src_reg_1_290)))
 (let (($x710 (= src_reg_1_189 src_reg_1_289)))
 (let (($x709 (= src_reg_1_188 src_reg_1_288)))
 (let (($x708 (= src_reg_1_187 src_reg_1_287)))
 (let (($x707 (= src_reg_1_186 src_reg_1_286)))
 (let (($x792 (and $x707 $x708 $x709 $x710 $x711 $x712 $x713 $x714 $x715 $x716 $x717 $x718 $x719 $x720 $x721 $x722 $x723 $x724 $x725 $x726 $x727 $x728 $x729 $x730 $x731 $x732 $x733 $x734)))
 (let (($x793 (=> $x770 $x792)))
 (let (($x706 (= dst_reg_1_13 dst_reg_1_285)))
 (let (($x705 (= dst_reg_1_12 dst_reg_1_284)))
 (let (($x704 (= dst_reg_1_11 dst_reg_1_283)))
 (let (($x703 (= (_ bv0 32) dst_reg_1_282)))
 (let (($x702 (= (_ bv18446744073709551615 64) dst_reg_1_281)))
 (let (($x701 (= (_ bv0 64) dst_reg_1_280)))
 (let (($x700 (= (_ bv9223372036854775807 64) dst_reg_1_279)))
 (let (($x699 (= (_ bv9223372036854775808 64) dst_reg_1_278)))
 (let (($x698 (= (_ bv18446744073709551615 64) dst_reg_1_277)))
 (let (($x697 (= (_ bv0 64) dst_reg_1_276)))
 (let (($x696 (= dst_reg_1_3 dst_reg_1_275)))
 (let (($x695 (= dst_reg_1_2 dst_reg_1_274)))
 (let (($x694 (= dst_reg_1_1 dst_reg_1_273)))
 (let (($x693 (= (_ bv1 32) dst_reg_1_272)))
 (let (($x692 (= src_reg_1_27 src_reg_1_299)))
 (let (($x691 (= src_reg_1_26 src_reg_1_298)))
 (let (($x690 (= src_reg_1_25 src_reg_1_297)))
 (let (($x689 (= src_reg_1_24 src_reg_1_296)))
 (let (($x688 (= src_reg_1_23 src_reg_1_295)))
 (let (($x687 (= src_reg_1_22 src_reg_1_294)))
 (let (($x686 (= src_reg_1_21 src_reg_1_293)))
 (let (($x685 (= src_reg_1_20 src_reg_1_292)))
 (let (($x684 (= src_reg_1_19 src_reg_1_291)))
 (let (($x683 (= src_reg_1_18 src_reg_1_290)))
 (let (($x682 (= src_reg_1_17 src_reg_1_289)))
 (let (($x681 (= src_reg_1_16 src_reg_1_288)))
 (let (($x680 (= src_reg_1_15 src_reg_1_287)))
 (let (($x679 (= (_ bv1 32) src_reg_1_286)))
 (let (($x790 (and $x679 $x680 $x681 $x682 $x683 $x684 $x685 $x686 $x687 $x688 $x689 $x690 $x691 $x692 $x693 $x694 $x695 $x696 $x697 $x698 $x699 $x700 $x701 $x702 $x703 $x704 $x705 $x706)))
 (let (($x736 (and $x113 $x80)))
 (let (($x739 (and $x126 $x78)))
 (let (($x741 (or $x739 $x736)))
 (let (($x791 (=> $x741 $x790)))
 (let (($x850 (and $x791 $x793 $x808 $x809 $x810 $x811 $x812 $x813 $x814 $x815 $x816 $x817 $x818 $x819 $x820 $x821 $x836 $x837 $x838 $x839 $x840 $x841 $x842 $x843 $x844 $x845 $x846 $x847 $x848 $x849)))
 (let (($x771 (or $x770 $x741)))
 (let (($x851 (=> $x771 $x850)))
 (and $x851 $x853 $x855 $x857 $x859 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x81 $x83 $x861 $x863 $x865 $x867 $x869 $x871 $x873 $x875 $x877 $x879 $x881 $x883))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB/BPF_SUB.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SUB BPF_SUB.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_SUB 1 BPF_SUB.smt2

Finished llvm_to_smt_pass
