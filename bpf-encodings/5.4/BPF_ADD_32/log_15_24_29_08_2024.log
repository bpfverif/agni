Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x2420b90
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD_32'<<0x2420b90>>  #uses=1
  CS<0x20f5eb0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD_32'<<0x251f2a0>>  #uses=1
  CS<0x23a7ec0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_ADD_32:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD_32'<<0x197d520>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
GLOBAL_BITVECTOR_SUFFIX: 12
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_0
[lookInsideStruct] singleValueType:dst_reg_12_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_1
[lookInsideStruct] singleValueType:dst_reg_12_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_2
[lookInsideStruct] singleValueType:dst_reg_12_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_3
[lookInsideStruct] singleValueType:dst_reg_12_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_4
[lookInsideStruct] singleValueType:dst_reg_12_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_5
[lookInsideStruct] singleValueType:dst_reg_12_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_6
[lookInsideStruct] singleValueType:dst_reg_12_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_7
[lookInsideStruct] singleValueType:dst_reg_12_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_8
[lookInsideStruct] singleValueType:dst_reg_12_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_9
[lookInsideStruct] singleValueType:dst_reg_12_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_10
[lookInsideStruct] singleValueType:dst_reg_12_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_11
[lookInsideStruct] singleValueType:dst_reg_12_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_12
[lookInsideStruct] singleValueType:dst_reg_12_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_13
[lookInsideStruct] singleValueType:dst_reg_12_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_14
[lookInsideStruct] singleValueType:src_reg_12_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_15
[lookInsideStruct] singleValueType:src_reg_12_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_16
[lookInsideStruct] singleValueType:src_reg_12_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_17
[lookInsideStruct] singleValueType:src_reg_12_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_18
[lookInsideStruct] singleValueType:src_reg_12_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_19
[lookInsideStruct] singleValueType:src_reg_12_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_20
[lookInsideStruct] singleValueType:src_reg_12_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_21
[lookInsideStruct] singleValueType:src_reg_12_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_22
[lookInsideStruct] singleValueType:src_reg_12_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_23
[lookInsideStruct] singleValueType:src_reg_12_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_24
[lookInsideStruct] singleValueType:src_reg_12_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_25
[lookInsideStruct] singleValueType:src_reg_12_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_26
[lookInsideStruct] singleValueType:src_reg_12_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_27
[lookInsideStruct] singleValueType:src_reg_12_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_12_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_12_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_12_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleLoadInst] (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_12_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_12_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleLoadInst] (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_12_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_12_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleLoadInst] (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_12_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_12_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleLoadInst] (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)

-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i.i_12_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i.i_12_34
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleLoadInst] (= dst_reg_12_4 i18.i.i_12_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)

-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i.i_12_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i.i_12_35
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleLoadInst] (= dst_reg_12_5 i20.i.i_12_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)

-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i.i_12_34
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i.i_12_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i.i_12_37
[handleBinaryOperatorInst] AND instruction
(= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i.i_12_35
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i.i_12_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i.i_12_39
[handleBinaryOperatorInst] AND instruction
(= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_12_37
[handleStoreInst] BVToStore: and.i.i.i_12_37
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i.i_12_37 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_12_39
[handleStoreInst] BVToStore: and6.i.i.i_12_39
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i.i_12_39 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i.i_12_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i.i_12_40
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleLoadInst] (= dst_reg_12_8 i23.i.i_12_40)
[printBBAssertionsMap] 
BasicBlock: entry, Size:37
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)

-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i.i_12_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i.i_12_41
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleLoadInst] (= dst_reg_12_9 i24.i.i_12_41)
[printBBAssertionsMap] 
BasicBlock: entry, Size:38
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)

-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_12_41
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_12_40
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i.i_12_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i.i_12_42
[handleBinaryOperatorInst] XOR instruction
(= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i.i_12_42
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i_12_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i_12_44
[handleICmpInst] (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_12_40
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i_12_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i_12_46
[handleBinaryOperatorInst] AND instruction
(= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i_12_46
[handleStoreInst] BVToStore: and6.i.i_12_46
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i_12_46 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_12_41
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i.i_12_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i.i_12_48
[handleBinaryOperatorInst] AND instruction
(= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_50
[lookInsideStruct] singleValueType:dst_reg_12_50
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_51
[lookInsideStruct] singleValueType:dst_reg_12_51
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_52
[lookInsideStruct] singleValueType:dst_reg_12_52
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_53
[lookInsideStruct] singleValueType:dst_reg_12_53
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_54
[lookInsideStruct] singleValueType:dst_reg_12_54
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_55
[lookInsideStruct] singleValueType:dst_reg_12_55
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_56
[lookInsideStruct] singleValueType:dst_reg_12_56
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_57
[lookInsideStruct] singleValueType:dst_reg_12_57
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_58
[lookInsideStruct] singleValueType:dst_reg_12_58
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_59
[lookInsideStruct] singleValueType:dst_reg_12_59
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_60
[lookInsideStruct] singleValueType:dst_reg_12_60
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_61
[lookInsideStruct] singleValueType:dst_reg_12_61
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_62
[lookInsideStruct] singleValueType:dst_reg_12_62
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_63
[lookInsideStruct] singleValueType:dst_reg_12_63
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_64
[lookInsideStruct] singleValueType:src_reg_12_64
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_65
[lookInsideStruct] singleValueType:src_reg_12_65
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_66
[lookInsideStruct] singleValueType:src_reg_12_66
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_67
[lookInsideStruct] singleValueType:src_reg_12_67
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_68
[lookInsideStruct] singleValueType:src_reg_12_68
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_69
[lookInsideStruct] singleValueType:src_reg_12_69
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_70
[lookInsideStruct] singleValueType:src_reg_12_70
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_71
[lookInsideStruct] singleValueType:src_reg_12_71
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_72
[lookInsideStruct] singleValueType:src_reg_12_72
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_73
[lookInsideStruct] singleValueType:src_reg_12_73
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_74
[lookInsideStruct] singleValueType:src_reg_12_74
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_75
[lookInsideStruct] singleValueType:src_reg_12_75
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_76
[lookInsideStruct] singleValueType:src_reg_12_76
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_77
[lookInsideStruct] singleValueType:src_reg_12_77
[setupBVTreeForArg] returning BVTree: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i.i
[handleMemoryPhiNode] incomingAccessI: 5 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_12_64)
(= src_reg_12_15 src_reg_12_65)
(= src_reg_12_16 src_reg_12_66)
(= src_reg_12_17 src_reg_12_67)
(= src_reg_12_18 src_reg_12_68)
(= src_reg_12_19 src_reg_12_69)
(= src_reg_12_20 src_reg_12_70)
(= src_reg_12_21 src_reg_12_71)
(= src_reg_12_22 src_reg_12_72)
(= src_reg_12_23 src_reg_12_73)
(= src_reg_12_24 src_reg_12_74)
(= src_reg_12_25 src_reg_12_75)
(= src_reg_12_26 src_reg_12_76)
(= src_reg_12_27 src_reg_12_77)
(= #x00000001 dst_reg_12_50)
(= dst_reg_12_1 dst_reg_12_51)
(= dst_reg_12_2 dst_reg_12_52)
(= dst_reg_12_3 dst_reg_12_53)
(= and.i.i.i_12_37 dst_reg_12_54)
(= and6.i.i.i_12_39 dst_reg_12_55)
(= dst_reg_12_6 dst_reg_12_56)
(= dst_reg_12_7 dst_reg_12_57)
(= and6.i.i_12_46 dst_reg_12_58)
(= dst_reg_12_9 dst_reg_12_59)
(= dst_reg_12_10 dst_reg_12_60)
(= dst_reg_12_11 dst_reg_12_61)
(= dst_reg_12_12 dst_reg_12_62)
(= dst_reg_12_13 dst_reg_12_63)
]
[handleMemoryPhiNode] incomingBBI: if.else.i.i
[handleMemoryPhiNode] incomingAccessI: 6 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_12_64)
(= src_reg_12_15 src_reg_12_65)
(= src_reg_12_16 src_reg_12_66)
(= src_reg_12_17 src_reg_12_67)
(= src_reg_12_18 src_reg_12_68)
(= src_reg_12_19 src_reg_12_69)
(= src_reg_12_20 src_reg_12_70)
(= src_reg_12_21 src_reg_12_71)
(= src_reg_12_22 src_reg_12_72)
(= src_reg_12_23 src_reg_12_73)
(= src_reg_12_24 src_reg_12_74)
(= src_reg_12_25 src_reg_12_75)
(= src_reg_12_26 src_reg_12_76)
(= src_reg_12_27 src_reg_12_77)
(= #x00000001 dst_reg_12_50)
(= dst_reg_12_1 dst_reg_12_51)
(= dst_reg_12_2 dst_reg_12_52)
(= dst_reg_12_3 dst_reg_12_53)
(= and.i.i.i_12_37 dst_reg_12_54)
(= and6.i.i.i_12_39 dst_reg_12_55)
(= dst_reg_12_6 dst_reg_12_56)
(= dst_reg_12_7 dst_reg_12_57)
(= #x0000000000000000 dst_reg_12_58)
(= dst_reg_12_9 dst_reg_12_59)
(= dst_reg_12_10 dst_reg_12_60)
(= dst_reg_12_11 dst_reg_12_61)
(= dst_reg_12_12 dst_reg_12_62)
(= dst_reg_12_13 dst_reg_12_63)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= #x0000000000000000 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= and6.i.i_12_46 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[handlePhiNodeSetupBitVecs] valueI:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i.i_coerce_reg_to_size.exit.i_12_79
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_12_79
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_12_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i.i_12_80
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i.i_12_80
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i.i_12_48
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_12_79
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))

-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_12_80
[handleStoreInst] BVToStore: storemerge.i.i_12_80
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(40)
[handleStoreInst] definingMemoryAccess: 40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_12_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i.i_12_82
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i.i_12_82
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleLoadInst] (= dst_reg_12_58 i27.i.i_12_82)
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:3
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_12_82
[handleStoreInst] BVToStore: i27.i.i_12_82
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(40)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_56 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i.i_12_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_12_80
[handleStoreInst] BVToStore: storemerge.i.i_12_80
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_12_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_12_30
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i5.i_12_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i5.i_12_84
[handleBinaryOperatorInst] AND instruction
(= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_12_31
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i6.i_12_86
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i6.i_12_86
[handleBinaryOperatorInst] AND instruction
(= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_12_33
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_12_32
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i13.i_12_87
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i13.i_12_87
[handleBinaryOperatorInst] XOR instruction
(= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i13.i_12_87
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i15.i_12_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i15.i_12_89
[handleICmpInst] (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:7
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_12_32
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i16.i_12_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i16.i_12_91
[handleBinaryOperatorInst] AND instruction
(= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_12_33
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i17.i_12_93
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i17.i_12_93
[handleBinaryOperatorInst] AND instruction
(= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_12_89
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i16.i_12_91
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0_12_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0_12_95
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_12_89
[handleSelectInst] z3ExprSelectOp2: and6.i16.i_12_91
[handleSelectInst] z3ExprSelectOp3: #x0000000000000000
[handleSelectInst] z3ExprRes: src_reg1.sroa.17.0_12_95
[handleSelectInst](ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_12_89
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i17.i_12_93
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i20.i_12_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i20.i_12_97
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_12_89
[handleSelectInst] z3ExprSelectOp2: and8.i17.i_12_93
[handleSelectInst] z3ExprSelectOp3: #x00000000ffffffff
[handleSelectInst] z3ExprRes: storemerge.i20.i_12_97
[handleSelectInst](ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_12_86
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_12_99
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_12_99
[handleICmpInst] (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_12_95
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_12_97
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i.not_12_100
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i.not_12_100
[handleICmpInst] (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_12_95
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_12_97
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_12_101
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_12_101
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_50 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i.i.repack, dst_reg, [5, 0]
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] definingMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}

-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_60 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_12_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_12_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_12_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[handleBinaryOperatorInst] opResVal:   %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_12_82
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_12_95
[getBitVecSingValType]   %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i.i_12_110
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i_12_110
[handleBinaryOperatorInst] ADD instruction
(= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
-------------------
  %cmp2.i.i = icmp slt i64 %add.i.i, %i27.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_12_110
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_12_82
[getBitVecSingValType]   %cmp2.i.i = icmp slt i64 %add.i.i, %i27.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp2.i.i_12_111
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp2.i.i_12_111
[handleICmpInst] (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:2
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  %add.i36.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handleBinaryOperatorInst] op1Val:   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[handleBinaryOperatorInst] opResVal:   %add.i36.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_12_80
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_12_97
[getBitVecSingValType]   %add.i36.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i36.i_12_112
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i36.i_12_112
[handleBinaryOperatorInst] ADD instruction
(= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
-------------------
  %storemerge21 = select i1 %cmp2.i.i, i64 -9223372036854775808, i64 %add.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 17 = MemoryDef(16)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 

[handleSelectInst]SelectMap:
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp2.i.i = icmp slt i64 %add.i.i, %i27.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp2.i.i_12_111
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_12_110
[getBitVecSingValType]   %storemerge21 = select i1 %cmp2.i.i, i64 -9223372036854775808, i64 %add.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge21_12_114
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge21_12_114
[handleSelectInst] z3ExprSelectOp1: cmp2.i.i_12_111
[handleSelectInst] z3ExprSelectOp2: #x8000000000000000
[handleSelectInst] z3ExprSelectOp3: add.i.i_12_110
[handleSelectInst] z3ExprRes: storemerge21_12_114
[handleSelectInst](ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
-------------------
  %storemerge = select i1 %cmp2.i.i, i64 9223372036854775807, i64 %add.i36.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 17 = MemoryDef(16)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 

[handleSelectInst]SelectMap:
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp2.i.i = icmp slt i64 %add.i.i, %i27.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp2.i.i_12_111
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %add.i36.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i36.i_12_112
[getBitVecSingValType]   %storemerge = select i1 %cmp2.i.i, i64 9223372036854775807, i64 %add.i36.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge_12_116
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge_12_116
[handleSelectInst] z3ExprSelectOp1: cmp2.i.i_12_111
[handleSelectInst] z3ExprSelectOp2: #x7fffffffffffffff
[handleSelectInst] z3ExprSelectOp3: add.i36.i_12_112
[handleSelectInst] z3ExprRes: storemerge_12_116
[handleSelectInst](ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
-------------------
  store i64 %storemerge21, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge21 = select i1 %cmp2.i.i, i64 -9223372036854775808, i64 %add.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge21_12_114
[handleStoreInst] BVToStore: storemerge21_12_114
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_12_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge21_12_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 %storemerge, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge = select i1 %cmp2.i.i, i64 9223372036854775807, i64 %add.i36.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge_12_116
[handleStoreInst] BVToStore: storemerge_12_116
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] definingMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_12_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge_12_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  %cmp65.i = icmp ult i64 %add.i.i, %src_reg1.sroa.17.0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_12_110
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_12_95
[getBitVecSingValType]   %cmp65.i = icmp ult i64 %add.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp65.i_12_117
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp65.i_12_117
[handleICmpInst] (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  br i1 %cmp65.i, label %if.then72.i, label %if.else75.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then72.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else75.i
=========================
-------------------
  store i64 %add.i.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_12_110
[handleStoreInst] BVToStore: add.i.i_12_110
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ add.i.i_12_110 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  %add79.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handleBinaryOperatorInst] op1Val:   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[handleBinaryOperatorInst] opResVal:   %add79.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_12_80
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_12_97
[getBitVecSingValType]   %add79.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add79.i_12_119
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add79.i_12_119
[handleBinaryOperatorInst] ADD instruction
(= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end80.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_120
[lookInsideStruct] singleValueType:dst_reg_12_120
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_121
[lookInsideStruct] singleValueType:dst_reg_12_121
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_122
[lookInsideStruct] singleValueType:dst_reg_12_122
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_123
[lookInsideStruct] singleValueType:dst_reg_12_123
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_124
[lookInsideStruct] singleValueType:dst_reg_12_124
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_125
[lookInsideStruct] singleValueType:dst_reg_12_125
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_126
[lookInsideStruct] singleValueType:dst_reg_12_126
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_127
[lookInsideStruct] singleValueType:dst_reg_12_127
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_128
[lookInsideStruct] singleValueType:dst_reg_12_128
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_129
[lookInsideStruct] singleValueType:dst_reg_12_129
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_130
[lookInsideStruct] singleValueType:dst_reg_12_130
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_131
[lookInsideStruct] singleValueType:dst_reg_12_131
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_132
[lookInsideStruct] singleValueType:dst_reg_12_132
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_133
[lookInsideStruct] singleValueType:dst_reg_12_133
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_134
[lookInsideStruct] singleValueType:src_reg_12_134
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_135
[lookInsideStruct] singleValueType:src_reg_12_135
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_136
[lookInsideStruct] singleValueType:src_reg_12_136
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_137
[lookInsideStruct] singleValueType:src_reg_12_137
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_138
[lookInsideStruct] singleValueType:src_reg_12_138
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_139
[lookInsideStruct] singleValueType:src_reg_12_139
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_140
[lookInsideStruct] singleValueType:src_reg_12_140
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_141
[lookInsideStruct] singleValueType:src_reg_12_141
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_142
[lookInsideStruct] singleValueType:src_reg_12_142
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_143
[lookInsideStruct] singleValueType:src_reg_12_143
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_144
[lookInsideStruct] singleValueType:src_reg_12_144
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_145
[lookInsideStruct] singleValueType:src_reg_12_145
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_146
[lookInsideStruct] singleValueType:src_reg_12_146
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_147
[lookInsideStruct] singleValueType:src_reg_12_147
[setupBVTreeForArg] returning BVTree: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then72.i
[handleMemoryPhiNode] incomingAccessI: 20 = MemoryDef(19)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_12_64 src_reg_12_134)
(= src_reg_12_65 src_reg_12_135)
(= src_reg_12_66 src_reg_12_136)
(= src_reg_12_67 src_reg_12_137)
(= src_reg_12_68 src_reg_12_138)
(= src_reg_12_69 src_reg_12_139)
(= src_reg_12_70 src_reg_12_140)
(= src_reg_12_71 src_reg_12_141)
(= src_reg_12_72 src_reg_12_142)
(= src_reg_12_73 src_reg_12_143)
(= src_reg_12_74 src_reg_12_144)
(= src_reg_12_75 src_reg_12_145)
(= src_reg_12_76 src_reg_12_146)
(= src_reg_12_77 src_reg_12_147)
(= dst_reg_12_50 dst_reg_12_120)
(= dst_reg_12_51 dst_reg_12_121)
(= dst_reg_12_52 dst_reg_12_122)
(= dst_reg_12_53 dst_reg_12_123)
(= dst_reg_12_54 dst_reg_12_124)
(= dst_reg_12_55 dst_reg_12_125)
(= storemerge21_12_114 dst_reg_12_126)
(= storemerge_12_116 dst_reg_12_127)
(= #x0000000000000000 dst_reg_12_128)
(= storemerge.i.i_12_80 dst_reg_12_129)
(= dst_reg_12_60 dst_reg_12_130)
(= dst_reg_12_61 dst_reg_12_131)
(= dst_reg_12_62 dst_reg_12_132)
(= dst_reg_12_63 dst_reg_12_133)
]
[handleMemoryPhiNode] incomingBBI: if.else75.i
[handleMemoryPhiNode] incomingAccessI: 21 = MemoryDef(19)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_12_64 src_reg_12_134)
(= src_reg_12_65 src_reg_12_135)
(= src_reg_12_66 src_reg_12_136)
(= src_reg_12_67 src_reg_12_137)
(= src_reg_12_68 src_reg_12_138)
(= src_reg_12_69 src_reg_12_139)
(= src_reg_12_70 src_reg_12_140)
(= src_reg_12_71 src_reg_12_141)
(= src_reg_12_72 src_reg_12_142)
(= src_reg_12_73 src_reg_12_143)
(= src_reg_12_74 src_reg_12_144)
(= src_reg_12_75 src_reg_12_145)
(= src_reg_12_76 src_reg_12_146)
(= src_reg_12_77 src_reg_12_147)
(= dst_reg_12_50 dst_reg_12_120)
(= dst_reg_12_51 dst_reg_12_121)
(= dst_reg_12_52 dst_reg_12_122)
(= dst_reg_12_53 dst_reg_12_123)
(= dst_reg_12_54 dst_reg_12_124)
(= dst_reg_12_55 dst_reg_12_125)
(= storemerge21_12_114 dst_reg_12_126)
(= storemerge_12_116 dst_reg_12_127)
(= add.i.i_12_110 dst_reg_12_128)
(= storemerge.i.i_12_80 dst_reg_12_129)
(= dst_reg_12_60 dst_reg_12_130)
(= dst_reg_12_61 dst_reg_12_131)
(= dst_reg_12_62 dst_reg_12_132)
(= dst_reg_12_63 dst_reg_12_133)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else75.i, if.end80.i> :
  (= src_reg_12_64 src_reg_12_134)
  (= src_reg_12_65 src_reg_12_135)
  (= src_reg_12_66 src_reg_12_136)
  (= src_reg_12_67 src_reg_12_137)
  (= src_reg_12_68 src_reg_12_138)
  (= src_reg_12_69 src_reg_12_139)
  (= src_reg_12_70 src_reg_12_140)
  (= src_reg_12_71 src_reg_12_141)
  (= src_reg_12_72 src_reg_12_142)
  (= src_reg_12_73 src_reg_12_143)
  (= src_reg_12_74 src_reg_12_144)
  (= src_reg_12_75 src_reg_12_145)
  (= src_reg_12_76 src_reg_12_146)
  (= src_reg_12_77 src_reg_12_147)
  (= dst_reg_12_50 dst_reg_12_120)
  (= dst_reg_12_51 dst_reg_12_121)
  (= dst_reg_12_52 dst_reg_12_122)
  (= dst_reg_12_53 dst_reg_12_123)
  (= dst_reg_12_54 dst_reg_12_124)
  (= dst_reg_12_55 dst_reg_12_125)
  (= storemerge21_12_114 dst_reg_12_126)
  (= storemerge_12_116 dst_reg_12_127)
  (= add.i.i_12_110 dst_reg_12_128)
  (= storemerge.i.i_12_80 dst_reg_12_129)
  (= dst_reg_12_60 dst_reg_12_130)
  (= dst_reg_12_61 dst_reg_12_131)
  (= dst_reg_12_62 dst_reg_12_132)
  (= dst_reg_12_63 dst_reg_12_133)
<if.then72.i, if.end80.i> :
  (= src_reg_12_64 src_reg_12_134)
  (= src_reg_12_65 src_reg_12_135)
  (= src_reg_12_66 src_reg_12_136)
  (= src_reg_12_67 src_reg_12_137)
  (= src_reg_12_68 src_reg_12_138)
  (= src_reg_12_69 src_reg_12_139)
  (= src_reg_12_70 src_reg_12_140)
  (= src_reg_12_71 src_reg_12_141)
  (= src_reg_12_72 src_reg_12_142)
  (= src_reg_12_73 src_reg_12_143)
  (= src_reg_12_74 src_reg_12_144)
  (= src_reg_12_75 src_reg_12_145)
  (= src_reg_12_76 src_reg_12_146)
  (= src_reg_12_77 src_reg_12_147)
  (= dst_reg_12_50 dst_reg_12_120)
  (= dst_reg_12_51 dst_reg_12_121)
  (= dst_reg_12_52 dst_reg_12_122)
  (= dst_reg_12_53 dst_reg_12_123)
  (= dst_reg_12_54 dst_reg_12_124)
  (= dst_reg_12_55 dst_reg_12_125)
  (= storemerge21_12_114 dst_reg_12_126)
  (= storemerge_12_116 dst_reg_12_127)
  (= #x0000000000000000 dst_reg_12_128)
  (= storemerge.i.i_12_80 dst_reg_12_129)
  (= dst_reg_12_60 dst_reg_12_130)
  (= dst_reg_12_61 dst_reg_12_131)
  (= dst_reg_12_62 dst_reg_12_132)
  (= dst_reg_12_63 dst_reg_12_133)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= #x0000000000000000 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= and6.i.i_12_46 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
-------------------
  %storemerge22 = phi i64 [ %add79.i, %if.else75.i ], [ -1, %if.then72.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge22 = phi i64 [ %add79.i, %if.else75.i ], [ -1, %if.then72.i ]
[handlePhiNodeSetupBitVecs] valueI:   %add79.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBool] returning unique bool w/ prefix: if.else75.i_if.end80.i_12_148
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else75.i_if.end80.i_12_148
[handlePhiNodeSetupBitVecs] valueI: i64 -1
[getBool] returning unique bool w/ prefix: if.then72.i_if.end80.i_12_149
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then72.i_if.end80.i_12_149
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge22 : [<add79.i, if.else75.i>, <, if.then72.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then72.i, if.end80.i>: if.then72.i_if.end80.i_12_149
<if.else75.i, if.end80.i>: if.else75.i_if.end80.i_12_148
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_12_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[getBitVecSingValType]   %storemerge22 = phi i64 [ %add79.i, %if.else75.i ], [ -1, %if.then72.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge22_12_150
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge22_12_150
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %add79.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add79.i_12_119
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else75.i_if.end80.i_12_148
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then72.i_if.end80.i_12_149
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))

-------------------
  store i64 %storemerge22, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge22 = phi i64 [ %add79.i, %if.else75.i ], [ -1, %if.then72.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge22_12_150
[handleStoreInst] BVToStore: storemerge22_12_150
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryPhi({if.then72.i,20},{if.else75.i,21})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_129 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge22_12_150 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  %add.i41.i = add nuw nsw i64 %and6.i.i.i, %and6.i.i6.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[handleBinaryOperatorInst] opResVal:   %add.i41.i = add nuw nsw i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_12_39
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_12_86
[getBitVecSingValType]   %add.i41.i = add nuw nsw i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i41.i_12_152
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i41.i_12_152
[handleBinaryOperatorInst] ADD instruction
(= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
-------------------
  %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[handleBinaryOperatorInst] opResVal:   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_12_37
[getBitVecSingValType]   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i5.i_12_84
[getBitVecSingValType]   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add3.i.i_12_153
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add3.i.i_12_153
[handleBinaryOperatorInst] ADD instruction
(= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
-------------------
  %add4.i.i = add nuw nsw i64 %add.i41.i, %add3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i41.i = add nuw nsw i64 %and6.i.i.i, %and6.i.i6.i
[handleBinaryOperatorInst] op1Val:   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[handleBinaryOperatorInst] opResVal:   %add4.i.i = add nuw nsw i64 %add.i41.i, %add3.i.i
[getBitVecSingValType]   %add.i41.i = add nuw nsw i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i41.i_12_152
[getBitVecSingValType]   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add3.i.i_12_153
[getBitVecSingValType]   %add4.i.i = add nuw nsw i64 %add.i41.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add4.i.i_12_154
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add4.i.i_12_154
[handleBinaryOperatorInst] ADD instruction
(= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
-------------------
  %xor.i.i = xor i64 %add4.i.i, %add3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add4.i.i = add nuw nsw i64 %add.i41.i, %add3.i.i
[handleBinaryOperatorInst] op1Val:   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[handleBinaryOperatorInst] opResVal:   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[getBitVecSingValType]   %add4.i.i = add nuw nsw i64 %add.i41.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add4.i.i_12_154
[getBitVecSingValType]   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add3.i.i_12_153
[getBitVecSingValType]   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i_12_155
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i_12_155
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
-------------------
  %or.i.i = or i64 %and6.i.i.i, %and6.i.i6.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_12_39
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_12_86
[getBitVecSingValType]   %or.i.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i_12_156
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i_12_156
[handleBinaryOperatorInst] OR instruction
(= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
-------------------
  %or7.i.i = or i64 %or.i.i, %xor.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i = or i64 %and6.i.i.i, %and6.i.i6.i
[handleBinaryOperatorInst] op1Val:   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[handleBinaryOperatorInst] opResVal:   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType]   %or.i.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i_12_156
[getBitVecSingValType]   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i_12_155
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or7.i.i_12_157
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or7.i.i_12_157
[handleBinaryOperatorInst] OR instruction
(= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
-------------------
  %neg.i.i = xor i64 %or7.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or7.i.i = or i64 %or.i.i, %xor.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i = xor i64 %or7.i.i, -1
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or7.i.i_12_157
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i = xor i64 %or7.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i_12_159
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i_12_159
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
-------------------
  %and.i.i = and i64 %add3.i.i, %neg.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i = xor i64 %or7.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType]   %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add3.i.i_12_153
[getBitVecSingValType]   %neg.i.i = xor i64 %or7.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i_12_159
[getBitVecSingValType]   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i_12_160
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i_12_160
[handleBinaryOperatorInst] AND instruction
(= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
-------------------
  store i64 %and.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i_12_160
[handleStoreInst] BVToStore: and.i.i_12_160
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(39)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_124 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i_12_160 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 %or7.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or7.i.i_12_157
[handleStoreInst] BVToStore: or7.i.i_12_157
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_125 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or7.i.i_12_157 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  %and.i.i301.i = and i64 %and.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i.i = and i64 %add3.i.i, %neg.i.i
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i301.i = and i64 %and.i.i, 4294967295
[getBitVecSingValType]   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i_12_160
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i301.i = and i64 %and.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i301.i_12_162
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i301.i_12_162
[handleBinaryOperatorInst] AND instruction
(= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
-------------------
  %and6.i.i302.i = and i64 %or7.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or7.i.i = or i64 %or.i.i, %xor.i.i
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i302.i = and i64 %or7.i.i, 4294967295
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or7.i.i_12_157
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i302.i = and i64 %or7.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i302.i_12_164
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i302.i_12_164
[handleBinaryOperatorInst] AND instruction
(= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i301.i = and i64 %and.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_12_162
[handleStoreInst] BVToStore: and.i.i301.i_12_162
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ and.i.i_12_160 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i301.i_12_162 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i302.i = and i64 %or7.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_12_164
[handleStoreInst] BVToStore: and6.i.i302.i_12_164
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] definingMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ or7.i.i_12_157 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i302.i_12_164 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}

-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 39 = MemoryPhi({if.then72.i,20},{if.else75.i,21})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i306.i_12_165
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i306.i_12_165
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleLoadInst] (= dst_reg_12_128 i23.i306.i_12_165)
[printBBAssertionsMap] 
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.end80.i, Size:13
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 22 = MemoryDef(39)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i308.i_12_166
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i308.i_12_166
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleLoadInst] (= storemerge22_12_150 i24.i308.i_12_166)
[printBBAssertionsMap] 
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.end80.i, Size:14
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_12_166
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_12_165
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i309.i_12_167
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i309.i_12_167
[handleBinaryOperatorInst] XOR instruction
(= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i309.i_12_167
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i311.i_12_169
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i311.i_12_169
[handleICmpInst] (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))

-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_12_165
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i312.i_12_171
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i312.i_12_171
[handleBinaryOperatorInst] AND instruction
(= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i312.i_12_171
[handleStoreInst] BVToStore: and6.i312.i_12_171
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_128 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i312.i_12_171 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_12_166
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i313.i_12_173
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i313.i_12_173
[handleBinaryOperatorInst] AND instruction
(= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_128 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_175
[lookInsideStruct] singleValueType:dst_reg_12_175
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_176
[lookInsideStruct] singleValueType:dst_reg_12_176
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_177
[lookInsideStruct] singleValueType:dst_reg_12_177
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_178
[lookInsideStruct] singleValueType:dst_reg_12_178
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_179
[lookInsideStruct] singleValueType:dst_reg_12_179
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_180
[lookInsideStruct] singleValueType:dst_reg_12_180
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_181
[lookInsideStruct] singleValueType:dst_reg_12_181
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_182
[lookInsideStruct] singleValueType:dst_reg_12_182
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_183
[lookInsideStruct] singleValueType:dst_reg_12_183
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_184
[lookInsideStruct] singleValueType:dst_reg_12_184
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_185
[lookInsideStruct] singleValueType:dst_reg_12_185
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_186
[lookInsideStruct] singleValueType:dst_reg_12_186
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_187
[lookInsideStruct] singleValueType:dst_reg_12_187
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_188
[lookInsideStruct] singleValueType:dst_reg_12_188
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_189
[lookInsideStruct] singleValueType:src_reg_12_189
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_190
[lookInsideStruct] singleValueType:src_reg_12_190
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_191
[lookInsideStruct] singleValueType:src_reg_12_191
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_192
[lookInsideStruct] singleValueType:src_reg_12_192
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_193
[lookInsideStruct] singleValueType:src_reg_12_193
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_194
[lookInsideStruct] singleValueType:src_reg_12_194
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_195
[lookInsideStruct] singleValueType:src_reg_12_195
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_196
[lookInsideStruct] singleValueType:src_reg_12_196
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_197
[lookInsideStruct] singleValueType:src_reg_12_197
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_198
[lookInsideStruct] singleValueType:src_reg_12_198
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_199
[lookInsideStruct] singleValueType:src_reg_12_199
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_200
[lookInsideStruct] singleValueType:src_reg_12_200
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_201
[lookInsideStruct] singleValueType:src_reg_12_201
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_202
[lookInsideStruct] singleValueType:src_reg_12_202
[setupBVTreeForArg] returning BVTree: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i314.i
[handleMemoryPhiNode] incomingAccessI: 27 = MemoryDef(26)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_12_134 src_reg_12_189)
(= src_reg_12_135 src_reg_12_190)
(= src_reg_12_136 src_reg_12_191)
(= src_reg_12_137 src_reg_12_192)
(= src_reg_12_138 src_reg_12_193)
(= src_reg_12_139 src_reg_12_194)
(= src_reg_12_140 src_reg_12_195)
(= src_reg_12_141 src_reg_12_196)
(= src_reg_12_142 src_reg_12_197)
(= src_reg_12_143 src_reg_12_198)
(= src_reg_12_144 src_reg_12_199)
(= src_reg_12_145 src_reg_12_200)
(= src_reg_12_146 src_reg_12_201)
(= src_reg_12_147 src_reg_12_202)
(= dst_reg_12_120 dst_reg_12_175)
(= dst_reg_12_121 dst_reg_12_176)
(= dst_reg_12_122 dst_reg_12_177)
(= dst_reg_12_123 dst_reg_12_178)
(= and.i.i301.i_12_162 dst_reg_12_179)
(= and6.i.i302.i_12_164 dst_reg_12_180)
(= dst_reg_12_126 dst_reg_12_181)
(= dst_reg_12_127 dst_reg_12_182)
(= and6.i312.i_12_171 dst_reg_12_183)
(= storemerge22_12_150 dst_reg_12_184)
(= dst_reg_12_130 dst_reg_12_185)
(= dst_reg_12_131 dst_reg_12_186)
(= dst_reg_12_132 dst_reg_12_187)
(= dst_reg_12_133 dst_reg_12_188)
]
[handleMemoryPhiNode] incomingBBI: if.else.i315.i
[handleMemoryPhiNode] incomingAccessI: 28 = MemoryDef(26)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_12_134 src_reg_12_189)
(= src_reg_12_135 src_reg_12_190)
(= src_reg_12_136 src_reg_12_191)
(= src_reg_12_137 src_reg_12_192)
(= src_reg_12_138 src_reg_12_193)
(= src_reg_12_139 src_reg_12_194)
(= src_reg_12_140 src_reg_12_195)
(= src_reg_12_141 src_reg_12_196)
(= src_reg_12_142 src_reg_12_197)
(= src_reg_12_143 src_reg_12_198)
(= src_reg_12_144 src_reg_12_199)
(= src_reg_12_145 src_reg_12_200)
(= src_reg_12_146 src_reg_12_201)
(= src_reg_12_147 src_reg_12_202)
(= dst_reg_12_120 dst_reg_12_175)
(= dst_reg_12_121 dst_reg_12_176)
(= dst_reg_12_122 dst_reg_12_177)
(= dst_reg_12_123 dst_reg_12_178)
(= and.i.i301.i_12_162 dst_reg_12_179)
(= and6.i.i302.i_12_164 dst_reg_12_180)
(= dst_reg_12_126 dst_reg_12_181)
(= dst_reg_12_127 dst_reg_12_182)
(= #x0000000000000000 dst_reg_12_183)
(= storemerge22_12_150 dst_reg_12_184)
(= dst_reg_12_130 dst_reg_12_185)
(= dst_reg_12_131 dst_reg_12_186)
(= dst_reg_12_132 dst_reg_12_187)
(= dst_reg_12_133 dst_reg_12_188)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_12_134 src_reg_12_189)
  (= src_reg_12_135 src_reg_12_190)
  (= src_reg_12_136 src_reg_12_191)
  (= src_reg_12_137 src_reg_12_192)
  (= src_reg_12_138 src_reg_12_193)
  (= src_reg_12_139 src_reg_12_194)
  (= src_reg_12_140 src_reg_12_195)
  (= src_reg_12_141 src_reg_12_196)
  (= src_reg_12_142 src_reg_12_197)
  (= src_reg_12_143 src_reg_12_198)
  (= src_reg_12_144 src_reg_12_199)
  (= src_reg_12_145 src_reg_12_200)
  (= src_reg_12_146 src_reg_12_201)
  (= src_reg_12_147 src_reg_12_202)
  (= dst_reg_12_120 dst_reg_12_175)
  (= dst_reg_12_121 dst_reg_12_176)
  (= dst_reg_12_122 dst_reg_12_177)
  (= dst_reg_12_123 dst_reg_12_178)
  (= and.i.i301.i_12_162 dst_reg_12_179)
  (= and6.i.i302.i_12_164 dst_reg_12_180)
  (= dst_reg_12_126 dst_reg_12_181)
  (= dst_reg_12_127 dst_reg_12_182)
  (= #x0000000000000000 dst_reg_12_183)
  (= storemerge22_12_150 dst_reg_12_184)
  (= dst_reg_12_130 dst_reg_12_185)
  (= dst_reg_12_131 dst_reg_12_186)
  (= dst_reg_12_132 dst_reg_12_187)
  (= dst_reg_12_133 dst_reg_12_188)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_12_134 src_reg_12_189)
  (= src_reg_12_135 src_reg_12_190)
  (= src_reg_12_136 src_reg_12_191)
  (= src_reg_12_137 src_reg_12_192)
  (= src_reg_12_138 src_reg_12_193)
  (= src_reg_12_139 src_reg_12_194)
  (= src_reg_12_140 src_reg_12_195)
  (= src_reg_12_141 src_reg_12_196)
  (= src_reg_12_142 src_reg_12_197)
  (= src_reg_12_143 src_reg_12_198)
  (= src_reg_12_144 src_reg_12_199)
  (= src_reg_12_145 src_reg_12_200)
  (= src_reg_12_146 src_reg_12_201)
  (= src_reg_12_147 src_reg_12_202)
  (= dst_reg_12_120 dst_reg_12_175)
  (= dst_reg_12_121 dst_reg_12_176)
  (= dst_reg_12_122 dst_reg_12_177)
  (= dst_reg_12_123 dst_reg_12_178)
  (= and.i.i301.i_12_162 dst_reg_12_179)
  (= and6.i.i302.i_12_164 dst_reg_12_180)
  (= dst_reg_12_126 dst_reg_12_181)
  (= dst_reg_12_127 dst_reg_12_182)
  (= and6.i312.i_12_171 dst_reg_12_183)
  (= storemerge22_12_150 dst_reg_12_184)
  (= dst_reg_12_130 dst_reg_12_185)
  (= dst_reg_12_131 dst_reg_12_186)
  (= dst_reg_12_132 dst_reg_12_187)
  (= dst_reg_12_133 dst_reg_12_188)
<if.else75.i, if.end80.i> :
  (= src_reg_12_64 src_reg_12_134)
  (= src_reg_12_65 src_reg_12_135)
  (= src_reg_12_66 src_reg_12_136)
  (= src_reg_12_67 src_reg_12_137)
  (= src_reg_12_68 src_reg_12_138)
  (= src_reg_12_69 src_reg_12_139)
  (= src_reg_12_70 src_reg_12_140)
  (= src_reg_12_71 src_reg_12_141)
  (= src_reg_12_72 src_reg_12_142)
  (= src_reg_12_73 src_reg_12_143)
  (= src_reg_12_74 src_reg_12_144)
  (= src_reg_12_75 src_reg_12_145)
  (= src_reg_12_76 src_reg_12_146)
  (= src_reg_12_77 src_reg_12_147)
  (= dst_reg_12_50 dst_reg_12_120)
  (= dst_reg_12_51 dst_reg_12_121)
  (= dst_reg_12_52 dst_reg_12_122)
  (= dst_reg_12_53 dst_reg_12_123)
  (= dst_reg_12_54 dst_reg_12_124)
  (= dst_reg_12_55 dst_reg_12_125)
  (= storemerge21_12_114 dst_reg_12_126)
  (= storemerge_12_116 dst_reg_12_127)
  (= add.i.i_12_110 dst_reg_12_128)
  (= storemerge.i.i_12_80 dst_reg_12_129)
  (= dst_reg_12_60 dst_reg_12_130)
  (= dst_reg_12_61 dst_reg_12_131)
  (= dst_reg_12_62 dst_reg_12_132)
  (= dst_reg_12_63 dst_reg_12_133)
<if.then72.i, if.end80.i> :
  (= src_reg_12_64 src_reg_12_134)
  (= src_reg_12_65 src_reg_12_135)
  (= src_reg_12_66 src_reg_12_136)
  (= src_reg_12_67 src_reg_12_137)
  (= src_reg_12_68 src_reg_12_138)
  (= src_reg_12_69 src_reg_12_139)
  (= src_reg_12_70 src_reg_12_140)
  (= src_reg_12_71 src_reg_12_141)
  (= src_reg_12_72 src_reg_12_142)
  (= src_reg_12_73 src_reg_12_143)
  (= src_reg_12_74 src_reg_12_144)
  (= src_reg_12_75 src_reg_12_145)
  (= src_reg_12_76 src_reg_12_146)
  (= src_reg_12_77 src_reg_12_147)
  (= dst_reg_12_50 dst_reg_12_120)
  (= dst_reg_12_51 dst_reg_12_121)
  (= dst_reg_12_52 dst_reg_12_122)
  (= dst_reg_12_53 dst_reg_12_123)
  (= dst_reg_12_54 dst_reg_12_124)
  (= dst_reg_12_55 dst_reg_12_125)
  (= storemerge21_12_114 dst_reg_12_126)
  (= storemerge_12_116 dst_reg_12_127)
  (= #x0000000000000000 dst_reg_12_128)
  (= storemerge.i.i_12_80 dst_reg_12_129)
  (= dst_reg_12_60 dst_reg_12_130)
  (= dst_reg_12_61 dst_reg_12_131)
  (= dst_reg_12_62 dst_reg_12_132)
  (= dst_reg_12_63 dst_reg_12_133)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= #x0000000000000000 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= and6.i.i_12_46 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
[handlePhiNodeSetupBitVecs] valueI:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge22 : [<add79.i, if.else75.i>, <, if.then72.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
<if.then72.i, if.end80.i>: if.then72.i_if.end80.i_12_149
<if.else75.i, if.end80.i>: if.else75.i_if.end80.i_12_148
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_12_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i316.i_12_205
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i316.i_12_205
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i313.i_12_173
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_12_205
[handleStoreInst] BVToStore: storemerge.i316.i_12_205
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_184 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_12_205 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i317.i_12_207
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i317.i_12_207
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleLoadInst] (= dst_reg_12_183 i27.i317.i_12_207)
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:3
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_12_207
[handleStoreInst] BVToStore: i27.i317.i_12_207
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(38)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_181 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_12_207 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_12_205
[handleStoreInst] BVToStore: storemerge.i316.i_12_205
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_182 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_12_205 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_12_207
[handleStoreInst] BVToStore: i27.i317.i_12_207
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i317.i_12_207 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_12_207 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_12_205
[handleStoreInst] BVToStore: storemerge.i316.i_12_205
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_12_205 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_12_205 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_12_205
[handleStoreInst] BVToStore: storemerge.i316.i_12_205
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_12_205 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_12_205 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_12_207
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_12_205
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_12_208
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_12_208
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_12_208
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_12_210
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_12_210
[handleICmpInst] (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_12_208
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_12_212
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_12_212
[handleICmpInst] (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_12_208
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_12_214
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_12_214
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_12_212
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_12_214
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_12_208
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_12_215
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_12_215
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_12_212
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_12_214
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_12_208
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_12_215
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_12_212
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_12_218
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_12_218
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_12_212
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_12_218
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_12_215
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_12_220
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_12_220
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
  (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_12_218
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_12_222
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_12_222
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_12_215
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_12_224
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_12_224
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_12_224
   (bvshl spec.select.i.i.i.i.i_12_215 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_12_220
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_12_224
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_12_215
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_12_225
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_12_225
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_12_220
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_12_224
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_12_215
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_12_225
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224)
     (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_12_220
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_12_222
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_12_218
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_12_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_12_226
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_12_220
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_12_222
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_12_218
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_12_226
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222)
     (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_12_225
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_12_228
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_12_228
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_12_225 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= tobool8.not.i.i.i.i.i_12_228 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
  (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
  (= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 #xfffffff0))
  (= shl5.i.i.i.i.i_12_224
   (bvshl spec.select.i.i.i.i.i_12_215 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224)
     (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222)
     (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))
  (ite (bvult word.addr.1.i.i.i.i.i_12_225 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= tobool8.not.i.i.i.i.i_12_228 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_12_226
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_12_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_12_230
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_12_230 (bvadd num.1.i.i.i.i.i_12_226 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_12_225
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_12_232
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_12_232
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_12_232
   (bvshl word.addr.1.i.i.i.i.i_12_225 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_12_228
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_12_232
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_12_225
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_12_233
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_12_233
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_12_228
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_12_232
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_12_225
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_12_233
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= word.addr.2.i.i.i.i.i_12_233 shl11.i.i.i.i.i_12_232)
     (= word.addr.2.i.i.i.i.i_12_233 word.addr.1.i.i.i.i.i_12_225))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_12_228
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_12_230
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_12_226
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_12_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_12_234
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_12_228
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_12_230
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_12_226
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_12_234
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= num.2.i.i.i.i.i_12_234 sub10.i.i.i.i.i_12_230)
     (= num.2.i.i.i.i.i_12_234 num.1.i.i.i.i.i_12_226))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_12_233
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_12_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_12_236
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_12_233 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= tobool14.not.i.i.i.i.i_12_236 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
  (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
  (= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 #xfffffff0))
  (= shl5.i.i.i.i.i_12_224
   (bvshl spec.select.i.i.i.i.i_12_215 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224)
     (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222)
     (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))
  (ite (bvult word.addr.1.i.i.i.i.i_12_225 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= tobool8.not.i.i.i.i.i_12_228 #b0))
  (= sub10.i.i.i.i.i_12_230 (bvadd num.1.i.i.i.i.i_12_226 #xfffffff8))
  (= shl11.i.i.i.i.i_12_232
   (bvshl word.addr.1.i.i.i.i.i_12_225 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= word.addr.2.i.i.i.i.i_12_233 shl11.i.i.i.i.i_12_232)
     (= word.addr.2.i.i.i.i.i_12_233 word.addr.1.i.i.i.i.i_12_225))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= num.2.i.i.i.i.i_12_234 sub10.i.i.i.i.i_12_230)
     (= num.2.i.i.i.i.i_12_234 num.1.i.i.i.i.i_12_226))
  (ite (bvult word.addr.2.i.i.i.i.i_12_233 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= tobool14.not.i.i.i.i.i_12_236 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_12_234
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_12_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_12_238
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_12_238 (bvadd num.2.i.i.i.i.i_12_234 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_12_233
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_12_240
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_12_240
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_12_240
   (bvshl word.addr.2.i.i.i.i.i_12_233 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_12_236
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_12_240
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_12_233
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_12_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_12_241
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_12_236
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_12_240
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_12_233
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_12_241
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= word.addr.3.i.i.i.i.i_12_241 shl17.i.i.i.i.i_12_240)
     (= word.addr.3.i.i.i.i.i_12_241 word.addr.2.i.i.i.i.i_12_233))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_12_236
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_12_238
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_12_234
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_12_242
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_12_242
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_12_236
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_12_238
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_12_234
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_12_242
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= num.3.i.i.i.i.i_12_242 sub16.i.i.i.i.i_12_238)
     (= num.3.i.i.i.i.i_12_242 num.2.i.i.i.i.i_12_234))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_12_241
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_12_244
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_12_244
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_12_241 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= tobool20.not.i.i.i.i.i_12_244 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
  (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
  (= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 #xfffffff0))
  (= shl5.i.i.i.i.i_12_224
   (bvshl spec.select.i.i.i.i.i_12_215 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224)
     (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222)
     (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))
  (ite (bvult word.addr.1.i.i.i.i.i_12_225 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= tobool8.not.i.i.i.i.i_12_228 #b0))
  (= sub10.i.i.i.i.i_12_230 (bvadd num.1.i.i.i.i.i_12_226 #xfffffff8))
  (= shl11.i.i.i.i.i_12_232
   (bvshl word.addr.1.i.i.i.i.i_12_225 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= word.addr.2.i.i.i.i.i_12_233 shl11.i.i.i.i.i_12_232)
     (= word.addr.2.i.i.i.i.i_12_233 word.addr.1.i.i.i.i.i_12_225))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= num.2.i.i.i.i.i_12_234 sub10.i.i.i.i.i_12_230)
     (= num.2.i.i.i.i.i_12_234 num.1.i.i.i.i.i_12_226))
  (ite (bvult word.addr.2.i.i.i.i.i_12_233 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= tobool14.not.i.i.i.i.i_12_236 #b0))
  (= sub16.i.i.i.i.i_12_238 (bvadd num.2.i.i.i.i.i_12_234 #xfffffffc))
  (= shl17.i.i.i.i.i_12_240
   (bvshl word.addr.2.i.i.i.i.i_12_233 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= word.addr.3.i.i.i.i.i_12_241 shl17.i.i.i.i.i_12_240)
     (= word.addr.3.i.i.i.i.i_12_241 word.addr.2.i.i.i.i.i_12_233))
  (ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= num.3.i.i.i.i.i_12_242 sub16.i.i.i.i.i_12_238)
     (= num.3.i.i.i.i.i_12_242 num.2.i.i.i.i.i_12_234))
  (ite (bvult word.addr.3.i.i.i.i.i_12_241 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= tobool20.not.i.i.i.i.i_12_244 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_12_242
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_12_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_12_246
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_12_246 (bvadd num.3.i.i.i.i.i_12_242 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_12_241
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_12_248
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_12_248
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_12_248
   (bvshl word.addr.3.i.i.i.i.i_12_241 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge,,add.i36.i
storemerge21,,add.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_12_244
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_12_248
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_12_241
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_12_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_12_249
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_12_244
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_12_248
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_12_241
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_12_249
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= word.addr.4.i.i.i.i.i_12_249 shl23.i.i.i.i.i_12_248)
     (= word.addr.4.i.i.i.i.i_12_249 word.addr.3.i.i.i.i.i_12_241))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
storemerge,,add.i36.i
storemerge21,,add.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_12_244
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_12_246
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_12_242
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_12_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_12_250
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_12_244
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_12_246
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_12_242
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_12_250
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= num.4.i.i.i.i.i_12_250 sub22.i.i.i.i.i_12_246)
     (= num.4.i.i.i.i.i_12_250 num.3.i.i.i.i.i_12_242))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_12_249
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_12_252
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_12_252
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_12_252
   (bvlshr word.addr.4.i.i.i.i.i_12_249 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_12_252
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_12_253
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_12_253
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_12_253
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_12_252))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_12_250
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_12_253
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_12_254
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_12_254
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_12_254 (bvadd num.4.i.i.i.i.i_12_250 i.i.i.i.i.i.neg_12_253))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_12_254
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_12_256
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_12_256
[handleBinaryOperatorInst] AND instruction
(= phi.bo_12_256 (bvand add.i.i.i335.i_12_254 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, coerce_reg_to_size.exit320.i>, ]
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge22 : [<add79.i, if.else75.i>, <, if.then72.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
<if.then72.i, if.end80.i>: if.then72.i_if.end80.i_12_149
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
<if.else75.i, if.end80.i>: if.else75.i_if.end80.i_12_148
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_12_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_12_259
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_12_259
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_12_256
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
    (= retval.0.i.i.i.i_12_259 phi.bo_12_256))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
    (= retval.0.i.i.i.i_12_259 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
    (= retval.0.i.i.i.i_12_259 phi.bo_12_256))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
    (= retval.0.i.i.i.i_12_259 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_12_259
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_12_262
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_12_262
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_12_259 #x0000003f)
     (= cmp.i.i.i_12_262 #b1)
     (= cmp.i.i.i_12_262 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
  (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
  (= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 #xfffffff0))
  (= shl5.i.i.i.i.i_12_224
   (bvshl spec.select.i.i.i.i.i_12_215 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224)
     (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222)
     (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))
  (ite (bvult word.addr.1.i.i.i.i.i_12_225 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= tobool8.not.i.i.i.i.i_12_228 #b0))
  (= sub10.i.i.i.i.i_12_230 (bvadd num.1.i.i.i.i.i_12_226 #xfffffff8))
  (= shl11.i.i.i.i.i_12_232
   (bvshl word.addr.1.i.i.i.i.i_12_225 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= word.addr.2.i.i.i.i.i_12_233 shl11.i.i.i.i.i_12_232)
     (= word.addr.2.i.i.i.i.i_12_233 word.addr.1.i.i.i.i.i_12_225))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= num.2.i.i.i.i.i_12_234 sub10.i.i.i.i.i_12_230)
     (= num.2.i.i.i.i.i_12_234 num.1.i.i.i.i.i_12_226))
  (ite (bvult word.addr.2.i.i.i.i.i_12_233 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= tobool14.not.i.i.i.i.i_12_236 #b0))
  (= sub16.i.i.i.i.i_12_238 (bvadd num.2.i.i.i.i.i_12_234 #xfffffffc))
  (= shl17.i.i.i.i.i_12_240
   (bvshl word.addr.2.i.i.i.i.i_12_233 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= word.addr.3.i.i.i.i.i_12_241 shl17.i.i.i.i.i_12_240)
     (= word.addr.3.i.i.i.i.i_12_241 word.addr.2.i.i.i.i.i_12_233))
  (ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= num.3.i.i.i.i.i_12_242 sub16.i.i.i.i.i_12_238)
     (= num.3.i.i.i.i.i_12_242 num.2.i.i.i.i.i_12_234))
  (ite (bvult word.addr.3.i.i.i.i.i_12_241 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= tobool20.not.i.i.i.i.i_12_244 #b0))
  (= sub22.i.i.i.i.i_12_246 (bvadd num.3.i.i.i.i.i_12_242 #x000000fe))
  (= shl23.i.i.i.i.i_12_248
   (bvshl word.addr.3.i.i.i.i.i_12_241 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= word.addr.4.i.i.i.i.i_12_249 shl23.i.i.i.i.i_12_248)
     (= word.addr.4.i.i.i.i.i_12_249 word.addr.3.i.i.i.i.i_12_241))
  (ite (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= num.4.i.i.i.i.i_12_250 sub22.i.i.i.i.i_12_246)
     (= num.4.i.i.i.i.i_12_250 num.3.i.i.i.i.i_12_242))
  (= word.addr.4.lobit.i.i.i.i.i.neg_12_252
   (bvlshr word.addr.4.i.i.i.i.i_12_249 #x000000000000003f))
  (= i.i.i.i.i.i.neg_12_253
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_12_252))
  (= add.i.i.i335.i_12_254 (bvadd num.4.i.i.i.i.i_12_250 i.i.i.i.i.i.neg_12_253))
  (= phi.bo_12_256 (bvand add.i.i.i335.i_12_254 #x000000ff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:16
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
    (= retval.0.i.i.i.i_12_259 phi.bo_12_256))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
    (= retval.0.i.i.i.i_12_259 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_12_259 #x0000003f)
     (= cmp.i.i.i_12_262 #b1)
     (= cmp.i.i.i_12_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_12_259
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_12_263
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_12_263
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_12_263 ((_ zero_extend 32) retval.0.i.i.i.i_12_259))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_12_263
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_12_265
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_12_265
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_12_265 (bvshl #xffffffffffffffff sh_prom.i.i.i_12_263))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_12_265
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_12_267
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_12_267
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_12_267 (bvxor notmask.i.i.i_12_265 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_12_265
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_12_207
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_12_268
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_12_268
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_12_268 (bvand notmask.i.i.i_12_265 i27.i317.i_12_207))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
storemerge,,add.i36.i
storemerge21,,add.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_12_262
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_12_268
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_12_270
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_12_270
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_12_262
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_12_268
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_12_270
[handleSelectInst](ite (= cmp.i.i.i_12_262 #b1)
     (= retval.sroa.0.0.i.i.i_12_270 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_12_270 and.i.i336.i_12_268))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
storemerge,,add.i36.i
storemerge21,,add.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_12_262
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_12_267
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_12_272
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_12_272
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_12_262
[handleSelectInst] z3ExprSelectOp2: #x00000000ffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_12_267
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_12_272
[handleSelectInst](ite (= cmp.i.i.i_12_262 #b1)
     (= retval.sroa.3.0.i.i.i_12_272 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_12_272 sub.i.i.i_12_267))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i.i301.i = and i64 %and.i.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_12_270
[getBitVecSingValType]   %and.i.i301.i = and i64 %and.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_12_162
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_12_273
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_12_273
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_12_273 (bvor retval.sroa.0.0.i.i.i_12_270 and.i.i301.i_12_162))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %and6.i.i302.i = and i64 %or7.i.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_12_272
[getBitVecSingValType]   %and6.i.i302.i = and i64 %or7.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_12_164
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_12_274
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_12_274
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_12_274 (bvand retval.sroa.3.0.i.i.i_12_272 and6.i.i302.i_12_164))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_12_274
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_12_276
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_12_276
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_12_276 (bvxor and.i1.i.i_12_274 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_12_273
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_12_276
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_12_277
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_12_277
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_12_277 (bvand or.i.i.i_12_273 neg.i.i.i_12_276))
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_12_277
[handleStoreInst] BVToStore: and4.i.i.i_12_277
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_179 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_12_277 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_12_274
[handleStoreInst] BVToStore: and.i1.i.i_12_274
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_12_180 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_12_274 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ and.i1.i.i_12_274 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_278
[lookInsideStruct] singleValueType:dst_reg_12_278
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_279
[lookInsideStruct] singleValueType:dst_reg_12_279
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_280
[lookInsideStruct] singleValueType:dst_reg_12_280
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_281
[lookInsideStruct] singleValueType:dst_reg_12_281
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_282
[lookInsideStruct] singleValueType:dst_reg_12_282
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_283
[lookInsideStruct] singleValueType:dst_reg_12_283
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_284
[lookInsideStruct] singleValueType:dst_reg_12_284
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_285
[lookInsideStruct] singleValueType:dst_reg_12_285
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_286
[lookInsideStruct] singleValueType:dst_reg_12_286
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_287
[lookInsideStruct] singleValueType:dst_reg_12_287
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_288
[lookInsideStruct] singleValueType:dst_reg_12_288
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_289
[lookInsideStruct] singleValueType:dst_reg_12_289
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_290
[lookInsideStruct] singleValueType:dst_reg_12_290
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_291
[lookInsideStruct] singleValueType:dst_reg_12_291
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_292
[lookInsideStruct] singleValueType:src_reg_12_292
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_293
[lookInsideStruct] singleValueType:src_reg_12_293
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_294
[lookInsideStruct] singleValueType:src_reg_12_294
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_295
[lookInsideStruct] singleValueType:src_reg_12_295
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_296
[lookInsideStruct] singleValueType:src_reg_12_296
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_297
[lookInsideStruct] singleValueType:src_reg_12_297
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_298
[lookInsideStruct] singleValueType:src_reg_12_298
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_299
[lookInsideStruct] singleValueType:src_reg_12_299
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_300
[lookInsideStruct] singleValueType:src_reg_12_300
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_301
[lookInsideStruct] singleValueType:src_reg_12_301
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_302
[lookInsideStruct] singleValueType:src_reg_12_302
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_303
[lookInsideStruct] singleValueType:src_reg_12_303
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_304
[lookInsideStruct] singleValueType:src_reg_12_304
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_305
[lookInsideStruct] singleValueType:src_reg_12_305
[setupBVTreeForArg] returning BVTree: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
- dst_reg: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 

[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 36 = MemoryDef(35)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ and.i1.i.i_12_274 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ and.i1.i.i_12_274 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_12_189 src_reg_12_292)
(= src_reg_12_190 src_reg_12_293)
(= src_reg_12_191 src_reg_12_294)
(= src_reg_12_192 src_reg_12_295)
(= src_reg_12_193 src_reg_12_296)
(= src_reg_12_194 src_reg_12_297)
(= src_reg_12_195 src_reg_12_298)
(= src_reg_12_196 src_reg_12_299)
(= src_reg_12_197 src_reg_12_300)
(= src_reg_12_198 src_reg_12_301)
(= src_reg_12_199 src_reg_12_302)
(= src_reg_12_200 src_reg_12_303)
(= src_reg_12_201 src_reg_12_304)
(= src_reg_12_202 src_reg_12_305)
(= dst_reg_12_175 dst_reg_12_278)
(= dst_reg_12_176 dst_reg_12_279)
(= dst_reg_12_177 dst_reg_12_280)
(= dst_reg_12_178 dst_reg_12_281)
(= and4.i.i.i_12_277 dst_reg_12_282)
(= and.i1.i.i_12_274 dst_reg_12_283)
(= i27.i317.i_12_207 dst_reg_12_284)
(= storemerge.i316.i_12_205 dst_reg_12_285)
(= dst_reg_12_183 dst_reg_12_286)
(= storemerge.i316.i_12_205 dst_reg_12_287)
(= dst_reg_12_185 dst_reg_12_288)
(= dst_reg_12_186 dst_reg_12_289)
(= dst_reg_12_187 dst_reg_12_290)
(= dst_reg_12_188 dst_reg_12_291)
]
[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 17 = MemoryDef(16)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_12_64 src_reg_12_292)
(= src_reg_12_65 src_reg_12_293)
(= src_reg_12_66 src_reg_12_294)
(= src_reg_12_67 src_reg_12_295)
(= src_reg_12_68 src_reg_12_296)
(= src_reg_12_69 src_reg_12_297)
(= src_reg_12_70 src_reg_12_298)
(= src_reg_12_71 src_reg_12_299)
(= src_reg_12_72 src_reg_12_300)
(= src_reg_12_73 src_reg_12_301)
(= src_reg_12_74 src_reg_12_302)
(= src_reg_12_75 src_reg_12_303)
(= src_reg_12_76 src_reg_12_304)
(= src_reg_12_77 src_reg_12_305)
(= #x00000001 dst_reg_12_278)
(= dst_reg_12_51 dst_reg_12_279)
(= dst_reg_12_52 dst_reg_12_280)
(= dst_reg_12_53 dst_reg_12_281)
(= #x0000000000000000 dst_reg_12_282)
(= #xffffffffffffffff dst_reg_12_283)
(= #x8000000000000000 dst_reg_12_284)
(= #x7fffffffffffffff dst_reg_12_285)
(= #x0000000000000000 dst_reg_12_286)
(= #xffffffffffffffff dst_reg_12_287)
(= #x00000000 dst_reg_12_288)
(= dst_reg_12_61 dst_reg_12_289)
(= dst_reg_12_62 dst_reg_12_290)
(= dst_reg_12_63 dst_reg_12_291)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_12_64 src_reg_12_292)
  (= src_reg_12_65 src_reg_12_293)
  (= src_reg_12_66 src_reg_12_294)
  (= src_reg_12_67 src_reg_12_295)
  (= src_reg_12_68 src_reg_12_296)
  (= src_reg_12_69 src_reg_12_297)
  (= src_reg_12_70 src_reg_12_298)
  (= src_reg_12_71 src_reg_12_299)
  (= src_reg_12_72 src_reg_12_300)
  (= src_reg_12_73 src_reg_12_301)
  (= src_reg_12_74 src_reg_12_302)
  (= src_reg_12_75 src_reg_12_303)
  (= src_reg_12_76 src_reg_12_304)
  (= src_reg_12_77 src_reg_12_305)
  (= #x00000001 dst_reg_12_278)
  (= dst_reg_12_51 dst_reg_12_279)
  (= dst_reg_12_52 dst_reg_12_280)
  (= dst_reg_12_53 dst_reg_12_281)
  (= #x0000000000000000 dst_reg_12_282)
  (= #xffffffffffffffff dst_reg_12_283)
  (= #x8000000000000000 dst_reg_12_284)
  (= #x7fffffffffffffff dst_reg_12_285)
  (= #x0000000000000000 dst_reg_12_286)
  (= #xffffffffffffffff dst_reg_12_287)
  (= #x00000000 dst_reg_12_288)
  (= dst_reg_12_61 dst_reg_12_289)
  (= dst_reg_12_62 dst_reg_12_290)
  (= dst_reg_12_63 dst_reg_12_291)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_12_189 src_reg_12_292)
  (= src_reg_12_190 src_reg_12_293)
  (= src_reg_12_191 src_reg_12_294)
  (= src_reg_12_192 src_reg_12_295)
  (= src_reg_12_193 src_reg_12_296)
  (= src_reg_12_194 src_reg_12_297)
  (= src_reg_12_195 src_reg_12_298)
  (= src_reg_12_196 src_reg_12_299)
  (= src_reg_12_197 src_reg_12_300)
  (= src_reg_12_198 src_reg_12_301)
  (= src_reg_12_199 src_reg_12_302)
  (= src_reg_12_200 src_reg_12_303)
  (= src_reg_12_201 src_reg_12_304)
  (= src_reg_12_202 src_reg_12_305)
  (= dst_reg_12_175 dst_reg_12_278)
  (= dst_reg_12_176 dst_reg_12_279)
  (= dst_reg_12_177 dst_reg_12_280)
  (= dst_reg_12_178 dst_reg_12_281)
  (= and4.i.i.i_12_277 dst_reg_12_282)
  (= and.i1.i.i_12_274 dst_reg_12_283)
  (= i27.i317.i_12_207 dst_reg_12_284)
  (= storemerge.i316.i_12_205 dst_reg_12_285)
  (= dst_reg_12_183 dst_reg_12_286)
  (= storemerge.i316.i_12_205 dst_reg_12_287)
  (= dst_reg_12_185 dst_reg_12_288)
  (= dst_reg_12_186 dst_reg_12_289)
  (= dst_reg_12_187 dst_reg_12_290)
  (= dst_reg_12_188 dst_reg_12_291)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_12_134 src_reg_12_189)
  (= src_reg_12_135 src_reg_12_190)
  (= src_reg_12_136 src_reg_12_191)
  (= src_reg_12_137 src_reg_12_192)
  (= src_reg_12_138 src_reg_12_193)
  (= src_reg_12_139 src_reg_12_194)
  (= src_reg_12_140 src_reg_12_195)
  (= src_reg_12_141 src_reg_12_196)
  (= src_reg_12_142 src_reg_12_197)
  (= src_reg_12_143 src_reg_12_198)
  (= src_reg_12_144 src_reg_12_199)
  (= src_reg_12_145 src_reg_12_200)
  (= src_reg_12_146 src_reg_12_201)
  (= src_reg_12_147 src_reg_12_202)
  (= dst_reg_12_120 dst_reg_12_175)
  (= dst_reg_12_121 dst_reg_12_176)
  (= dst_reg_12_122 dst_reg_12_177)
  (= dst_reg_12_123 dst_reg_12_178)
  (= and.i.i301.i_12_162 dst_reg_12_179)
  (= and6.i.i302.i_12_164 dst_reg_12_180)
  (= dst_reg_12_126 dst_reg_12_181)
  (= dst_reg_12_127 dst_reg_12_182)
  (= #x0000000000000000 dst_reg_12_183)
  (= storemerge22_12_150 dst_reg_12_184)
  (= dst_reg_12_130 dst_reg_12_185)
  (= dst_reg_12_131 dst_reg_12_186)
  (= dst_reg_12_132 dst_reg_12_187)
  (= dst_reg_12_133 dst_reg_12_188)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_12_134 src_reg_12_189)
  (= src_reg_12_135 src_reg_12_190)
  (= src_reg_12_136 src_reg_12_191)
  (= src_reg_12_137 src_reg_12_192)
  (= src_reg_12_138 src_reg_12_193)
  (= src_reg_12_139 src_reg_12_194)
  (= src_reg_12_140 src_reg_12_195)
  (= src_reg_12_141 src_reg_12_196)
  (= src_reg_12_142 src_reg_12_197)
  (= src_reg_12_143 src_reg_12_198)
  (= src_reg_12_144 src_reg_12_199)
  (= src_reg_12_145 src_reg_12_200)
  (= src_reg_12_146 src_reg_12_201)
  (= src_reg_12_147 src_reg_12_202)
  (= dst_reg_12_120 dst_reg_12_175)
  (= dst_reg_12_121 dst_reg_12_176)
  (= dst_reg_12_122 dst_reg_12_177)
  (= dst_reg_12_123 dst_reg_12_178)
  (= and.i.i301.i_12_162 dst_reg_12_179)
  (= and6.i.i302.i_12_164 dst_reg_12_180)
  (= dst_reg_12_126 dst_reg_12_181)
  (= dst_reg_12_127 dst_reg_12_182)
  (= and6.i312.i_12_171 dst_reg_12_183)
  (= storemerge22_12_150 dst_reg_12_184)
  (= dst_reg_12_130 dst_reg_12_185)
  (= dst_reg_12_131 dst_reg_12_186)
  (= dst_reg_12_132 dst_reg_12_187)
  (= dst_reg_12_133 dst_reg_12_188)
<if.else75.i, if.end80.i> :
  (= src_reg_12_64 src_reg_12_134)
  (= src_reg_12_65 src_reg_12_135)
  (= src_reg_12_66 src_reg_12_136)
  (= src_reg_12_67 src_reg_12_137)
  (= src_reg_12_68 src_reg_12_138)
  (= src_reg_12_69 src_reg_12_139)
  (= src_reg_12_70 src_reg_12_140)
  (= src_reg_12_71 src_reg_12_141)
  (= src_reg_12_72 src_reg_12_142)
  (= src_reg_12_73 src_reg_12_143)
  (= src_reg_12_74 src_reg_12_144)
  (= src_reg_12_75 src_reg_12_145)
  (= src_reg_12_76 src_reg_12_146)
  (= src_reg_12_77 src_reg_12_147)
  (= dst_reg_12_50 dst_reg_12_120)
  (= dst_reg_12_51 dst_reg_12_121)
  (= dst_reg_12_52 dst_reg_12_122)
  (= dst_reg_12_53 dst_reg_12_123)
  (= dst_reg_12_54 dst_reg_12_124)
  (= dst_reg_12_55 dst_reg_12_125)
  (= storemerge21_12_114 dst_reg_12_126)
  (= storemerge_12_116 dst_reg_12_127)
  (= add.i.i_12_110 dst_reg_12_128)
  (= storemerge.i.i_12_80 dst_reg_12_129)
  (= dst_reg_12_60 dst_reg_12_130)
  (= dst_reg_12_61 dst_reg_12_131)
  (= dst_reg_12_62 dst_reg_12_132)
  (= dst_reg_12_63 dst_reg_12_133)
<if.then72.i, if.end80.i> :
  (= src_reg_12_64 src_reg_12_134)
  (= src_reg_12_65 src_reg_12_135)
  (= src_reg_12_66 src_reg_12_136)
  (= src_reg_12_67 src_reg_12_137)
  (= src_reg_12_68 src_reg_12_138)
  (= src_reg_12_69 src_reg_12_139)
  (= src_reg_12_70 src_reg_12_140)
  (= src_reg_12_71 src_reg_12_141)
  (= src_reg_12_72 src_reg_12_142)
  (= src_reg_12_73 src_reg_12_143)
  (= src_reg_12_74 src_reg_12_144)
  (= src_reg_12_75 src_reg_12_145)
  (= src_reg_12_76 src_reg_12_146)
  (= src_reg_12_77 src_reg_12_147)
  (= dst_reg_12_50 dst_reg_12_120)
  (= dst_reg_12_51 dst_reg_12_121)
  (= dst_reg_12_52 dst_reg_12_122)
  (= dst_reg_12_53 dst_reg_12_123)
  (= dst_reg_12_54 dst_reg_12_124)
  (= dst_reg_12_55 dst_reg_12_125)
  (= storemerge21_12_114 dst_reg_12_126)
  (= storemerge_12_116 dst_reg_12_127)
  (= #x0000000000000000 dst_reg_12_128)
  (= storemerge.i.i_12_80 dst_reg_12_129)
  (= dst_reg_12_60 dst_reg_12_130)
  (= dst_reg_12_61 dst_reg_12_131)
  (= dst_reg_12_62 dst_reg_12_132)
  (= dst_reg_12_63 dst_reg_12_133)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= #x0000000000000000 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_12_64)
  (= src_reg_12_15 src_reg_12_65)
  (= src_reg_12_16 src_reg_12_66)
  (= src_reg_12_17 src_reg_12_67)
  (= src_reg_12_18 src_reg_12_68)
  (= src_reg_12_19 src_reg_12_69)
  (= src_reg_12_20 src_reg_12_70)
  (= src_reg_12_21 src_reg_12_71)
  (= src_reg_12_22 src_reg_12_72)
  (= src_reg_12_23 src_reg_12_73)
  (= src_reg_12_24 src_reg_12_74)
  (= src_reg_12_25 src_reg_12_75)
  (= src_reg_12_26 src_reg_12_76)
  (= src_reg_12_27 src_reg_12_77)
  (= #x00000001 dst_reg_12_50)
  (= dst_reg_12_1 dst_reg_12_51)
  (= dst_reg_12_2 dst_reg_12_52)
  (= dst_reg_12_3 dst_reg_12_53)
  (= and.i.i.i_12_37 dst_reg_12_54)
  (= and6.i.i.i_12_39 dst_reg_12_55)
  (= dst_reg_12_6 dst_reg_12_56)
  (= dst_reg_12_7 dst_reg_12_57)
  (= and6.i.i_12_46 dst_reg_12_58)
  (= dst_reg_12_9 dst_reg_12_59)
  (= dst_reg_12_10 dst_reg_12_60)
  (= dst_reg_12_11 dst_reg_12_61)
  (= dst_reg_12_12 dst_reg_12_62)
  (= dst_reg_12_13 dst_reg_12_63)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_12_44
[handleBranchInst] Edge Assertions:
<entry, if.then.i.i>: (= cmp.i.i_12_44 #b1)
<entry, if.else.i.i>: (= cmp.i.i_12_44 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i.i: (= cmp.i.i_12_44 #b1)
[handleBranchInst] if.else.i.i: (= cmp.i.i_12_44 #b0)
[handleBranchInst] <entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] <entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_12_44 #b1)
[handleBranchInst] coerce_reg_to_size.exit.i: (= cmp.i.i_12_44 #b1)
[handleBranchInst] <if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_12_44 #b0)
[handleBranchInst] coerce_reg_to_size.exit.i: (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
[handleBranchInst] <if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
-------------------
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_12_99
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit.i, land.lhs.true.i>: (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i>: (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] lor.lhs.false20.i: (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i.not_12_100
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.end27.i>: (and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i>: (and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end27.i: (and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] if.then26.i: (and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.end27.i
  (and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.end27.i
  (and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_12_101
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<lor.lhs.false20.i, if.end27.i>: (and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
[handleBranchInst] if.end27.i: (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.end27.i
=========================
-------------------
  %add.i.i = add i64 %i27.i.i, %src_reg1.sroa.17.0
-------------------
-------------------
  %cmp2.i.i = icmp slt i64 %add.i.i, %i27.i.i
-------------------
-------------------
  %add.i36.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
-------------------
-------------------
  %storemerge21 = select i1 %cmp2.i.i, i64 -9223372036854775808, i64 %add.i.i
-------------------
-------------------
  %storemerge = select i1 %cmp2.i.i, i64 9223372036854775807, i64 %add.i36.i
-------------------
-------------------
  store i64 %storemerge21, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %cmp65.i = icmp ult i64 %add.i.i, %src_reg1.sroa.17.0
-------------------
-------------------
  br i1 %cmp65.i, label %if.then72.i, label %if.else75.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp65.i = icmp ult i64 %add.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp65.i_12_117
[handleBranchInst] Edge Assertions:
<if.end27.i, if.then72.i>: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<if.end27.i, if.else75.i>: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then72.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
[handleBranchInst] if.else75.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] <if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
[handleBranchInst] <if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.then72.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end80.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
[handleBranchInst] if.end80.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
[handleBranchInst] <if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.else75.i
=========================
-------------------
  store i64 %add.i.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %add79.i = add nuw nsw i64 %storemerge.i.i, %storemerge.i20.i
-------------------
-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end80.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] if.end80.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
[handleBranchInst] <if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.end80.i
=========================
-------------------
  %storemerge22 = phi i64 [ %add79.i, %if.else75.i ], [ -1, %if.then72.i ]
-------------------
-------------------
  store i64 %storemerge22, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %add.i41.i = add nuw nsw i64 %and6.i.i.i, %and6.i.i6.i
-------------------
-------------------
  %add3.i.i = add nuw nsw i64 %and.i.i.i, %and.i.i5.i
-------------------
-------------------
  %add4.i.i = add nuw nsw i64 %add.i41.i, %add3.i.i
-------------------
-------------------
  %xor.i.i = xor i64 %add4.i.i, %add3.i.i
-------------------
-------------------
  %or.i.i = or i64 %and6.i.i.i, %and6.i.i6.i
-------------------
-------------------
  %or7.i.i = or i64 %or.i.i, %xor.i.i
-------------------
-------------------
  %neg.i.i = xor i64 %or7.i.i, -1
-------------------
-------------------
  %and.i.i = and i64 %add3.i.i, %neg.i.i
-------------------
-------------------
  store i64 %and.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %or7.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i301.i = and i64 %and.i.i, 4294967295
-------------------
-------------------
  %and6.i.i302.i = and i64 %or7.i.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i311.i_12_169
[handleBranchInst] Edge Assertions:
<if.end80.i, if.then.i314.i>: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.else.i315.i>: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i314.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] if.else.i315.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] <if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] <if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
if.else.i.i
  (= cmp.i.i_12_44 #b0)
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] <if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
[handleBranchInst] <if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_12_210
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_12_99 #b0)
                (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
      (a!2 (and (= tobool.not.i.i_12_99 #b1)
                (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_12_101 #b0) a!1)
               (and (= cmp18.not.i.not_12_100 #b1) a!2))))
(let ((a!4 (or (and (= cmp65.i_12_117 #b0) a!3)
               (and (= cmp65.i_12_117 #b1) a!3))))
(let ((a!5 (or (and (= cmp.i311.i_12_169 #b0) a!4)
               (and (= cmp.i311.i_12_169 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!5)
      (and (= cmp.i.i.i.i_12_210 #b1) a!5)
      (and (= cmp24.old.i_12_101 #b1) a!1)
      (and (= cmp18.not.i.not_12_100 #b0) a!2))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_12_99 #b0)
                (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
      (a!2 (and (= tobool.not.i.i_12_99 #b1)
                (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_12_101 #b0) a!1)
               (and (= cmp18.not.i.not_12_100 #b1) a!2))))
(let ((a!4 (or (and (= cmp65.i_12_117 #b0) a!3)
               (and (= cmp65.i_12_117 #b1) a!3))))
(let ((a!5 (or (and (= cmp.i311.i_12_169 #b0) a!4)
               (and (= cmp.i311.i_12_169 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!5)
      (and (= cmp.i.i.i.i_12_210 #b1) a!5)
      (and (= cmp24.old.i_12_101 #b1) a!1)
      (and (= cmp18.not.i.not_12_100 #b0) a!2))))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
if.then.i.i
=========================
=========================
if.else.i.i
=========================
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (= cmp.i.i_12_44 #b1)
    (and (= #x00000001 src_reg_12_64)
         (= src_reg_12_15 src_reg_12_65)
         (= src_reg_12_16 src_reg_12_66)
         (= src_reg_12_17 src_reg_12_67)
         (= src_reg_12_18 src_reg_12_68)
         (= src_reg_12_19 src_reg_12_69)
         (= src_reg_12_20 src_reg_12_70)
         (= src_reg_12_21 src_reg_12_71)
         (= src_reg_12_22 src_reg_12_72)
         (= src_reg_12_23 src_reg_12_73)
         (= src_reg_12_24 src_reg_12_74)
         (= src_reg_12_25 src_reg_12_75)
         (= src_reg_12_26 src_reg_12_76)
         (= src_reg_12_27 src_reg_12_77)
         (= #x00000001 dst_reg_12_50)
         (= dst_reg_12_1 dst_reg_12_51)
         (= dst_reg_12_2 dst_reg_12_52)
         (= dst_reg_12_3 dst_reg_12_53)
         (= and.i.i.i_12_37 dst_reg_12_54)
         (= and6.i.i.i_12_39 dst_reg_12_55)
         (= dst_reg_12_6 dst_reg_12_56)
         (= dst_reg_12_7 dst_reg_12_57)
         (= and6.i.i_12_46 dst_reg_12_58)
         (= dst_reg_12_9 dst_reg_12_59)
         (= dst_reg_12_10 dst_reg_12_60)
         (= dst_reg_12_11 dst_reg_12_61)
         (= dst_reg_12_12 dst_reg_12_62)
         (= dst_reg_12_13 dst_reg_12_63)))
phiResolveI (i=1) (=> (= cmp.i.i_12_44 #b0)
    (and (= #x00000001 src_reg_12_64)
         (= src_reg_12_15 src_reg_12_65)
         (= src_reg_12_16 src_reg_12_66)
         (= src_reg_12_17 src_reg_12_67)
         (= src_reg_12_18 src_reg_12_68)
         (= src_reg_12_19 src_reg_12_69)
         (= src_reg_12_20 src_reg_12_70)
         (= src_reg_12_21 src_reg_12_71)
         (= src_reg_12_22 src_reg_12_72)
         (= src_reg_12_23 src_reg_12_73)
         (= src_reg_12_24 src_reg_12_74)
         (= src_reg_12_25 src_reg_12_75)
         (= src_reg_12_26 src_reg_12_76)
         (= src_reg_12_27 src_reg_12_77)
         (= #x00000001 dst_reg_12_50)
         (= dst_reg_12_1 dst_reg_12_51)
         (= dst_reg_12_2 dst_reg_12_52)
         (= dst_reg_12_3 dst_reg_12_53)
         (= and.i.i.i_12_37 dst_reg_12_54)
         (= and6.i.i.i_12_39 dst_reg_12_55)
         (= dst_reg_12_6 dst_reg_12_56)
         (= dst_reg_12_7 dst_reg_12_57)
         (= #x0000000000000000 dst_reg_12_58)
         (= dst_reg_12_9 dst_reg_12_59)
         (= dst_reg_12_10 dst_reg_12_60)
         (= dst_reg_12_11 dst_reg_12_61)
         (= dst_reg_12_12 dst_reg_12_62)
         (= dst_reg_12_13 dst_reg_12_63)))
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i.i_coerce_reg_to_size.exit.i_12_78
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_12_44 #b0)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.else.i.i_coerce_reg_to_size.exit.i_12_78 (= cmp.i.i_12_44 #b0))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i.i_coerce_reg_to_size.exit.i_12_79
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_12_44 #b1)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.then.i.i_coerce_reg_to_size.exit.i_12_79 (= cmp.i.i_12_44 #b1))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
  (=> (= cmp.i.i_12_44 #b1)
    (and (= #x00000001 src_reg_12_64)
         (= src_reg_12_15 src_reg_12_65)
         (= src_reg_12_16 src_reg_12_66)
         (= src_reg_12_17 src_reg_12_67)
         (= src_reg_12_18 src_reg_12_68)
         (= src_reg_12_19 src_reg_12_69)
         (= src_reg_12_20 src_reg_12_70)
         (= src_reg_12_21 src_reg_12_71)
         (= src_reg_12_22 src_reg_12_72)
         (= src_reg_12_23 src_reg_12_73)
         (= src_reg_12_24 src_reg_12_74)
         (= src_reg_12_25 src_reg_12_75)
         (= src_reg_12_26 src_reg_12_76)
         (= src_reg_12_27 src_reg_12_77)
         (= #x00000001 dst_reg_12_50)
         (= dst_reg_12_1 dst_reg_12_51)
         (= dst_reg_12_2 dst_reg_12_52)
         (= dst_reg_12_3 dst_reg_12_53)
         (= and.i.i.i_12_37 dst_reg_12_54)
         (= and6.i.i.i_12_39 dst_reg_12_55)
         (= dst_reg_12_6 dst_reg_12_56)
         (= dst_reg_12_7 dst_reg_12_57)
         (= and6.i.i_12_46 dst_reg_12_58)
         (= dst_reg_12_9 dst_reg_12_59)
         (= dst_reg_12_10 dst_reg_12_60)
         (= dst_reg_12_11 dst_reg_12_61)
         (= dst_reg_12_12 dst_reg_12_62)
         (= dst_reg_12_13 dst_reg_12_63)))
  (=> (= cmp.i.i_12_44 #b0)
    (and (= #x00000001 src_reg_12_64)
         (= src_reg_12_15 src_reg_12_65)
         (= src_reg_12_16 src_reg_12_66)
         (= src_reg_12_17 src_reg_12_67)
         (= src_reg_12_18 src_reg_12_68)
         (= src_reg_12_19 src_reg_12_69)
         (= src_reg_12_20 src_reg_12_70)
         (= src_reg_12_21 src_reg_12_71)
         (= src_reg_12_22 src_reg_12_72)
         (= src_reg_12_23 src_reg_12_73)
         (= src_reg_12_24 src_reg_12_74)
         (= src_reg_12_25 src_reg_12_75)
         (= src_reg_12_26 src_reg_12_76)
         (= src_reg_12_27 src_reg_12_77)
         (= #x00000001 dst_reg_12_50)
         (= dst_reg_12_1 dst_reg_12_51)
         (= dst_reg_12_2 dst_reg_12_52)
         (= dst_reg_12_3 dst_reg_12_53)
         (= and.i.i.i_12_37 dst_reg_12_54)
         (= and6.i.i.i_12_39 dst_reg_12_55)
         (= dst_reg_12_6 dst_reg_12_56)
         (= dst_reg_12_7 dst_reg_12_57)
         (= #x0000000000000000 dst_reg_12_58)
         (= dst_reg_12_9 dst_reg_12_59)
         (= dst_reg_12_10 dst_reg_12_60)
         (= dst_reg_12_11 dst_reg_12_61)
         (= dst_reg_12_12 dst_reg_12_62)
         (= dst_reg_12_13 dst_reg_12_63)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_12_78 (= cmp.i.i_12_44 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_12_79 (= cmp.i.i_12_44 #b1))

=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then72.i
=========================
=========================
if.else75.i
=========================
=========================
if.end80.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> (and (= cmp65.i_12_117 #b1) a!1)
      (and (= src_reg_12_64 src_reg_12_134)
           (= src_reg_12_65 src_reg_12_135)
           (= src_reg_12_66 src_reg_12_136)
           (= src_reg_12_67 src_reg_12_137)
           (= src_reg_12_68 src_reg_12_138)
           (= src_reg_12_69 src_reg_12_139)
           (= src_reg_12_70 src_reg_12_140)
           (= src_reg_12_71 src_reg_12_141)
           (= src_reg_12_72 src_reg_12_142)
           (= src_reg_12_73 src_reg_12_143)
           (= src_reg_12_74 src_reg_12_144)
           (= src_reg_12_75 src_reg_12_145)
           (= src_reg_12_76 src_reg_12_146)
           (= src_reg_12_77 src_reg_12_147)
           (= dst_reg_12_50 dst_reg_12_120)
           (= dst_reg_12_51 dst_reg_12_121)
           (= dst_reg_12_52 dst_reg_12_122)
           (= dst_reg_12_53 dst_reg_12_123)
           (= dst_reg_12_54 dst_reg_12_124)
           (= dst_reg_12_55 dst_reg_12_125)
           (= storemerge21_12_114 dst_reg_12_126)
           (= storemerge_12_116 dst_reg_12_127)
           (= #x0000000000000000 dst_reg_12_128)
           (= storemerge.i.i_12_80 dst_reg_12_129)
           (= dst_reg_12_60 dst_reg_12_130)
           (= dst_reg_12_61 dst_reg_12_131)
           (= dst_reg_12_62 dst_reg_12_132)
           (= dst_reg_12_63 dst_reg_12_133))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> (and (= cmp65.i_12_117 #b0) a!1)
      (and (= src_reg_12_64 src_reg_12_134)
           (= src_reg_12_65 src_reg_12_135)
           (= src_reg_12_66 src_reg_12_136)
           (= src_reg_12_67 src_reg_12_137)
           (= src_reg_12_68 src_reg_12_138)
           (= src_reg_12_69 src_reg_12_139)
           (= src_reg_12_70 src_reg_12_140)
           (= src_reg_12_71 src_reg_12_141)
           (= src_reg_12_72 src_reg_12_142)
           (= src_reg_12_73 src_reg_12_143)
           (= src_reg_12_74 src_reg_12_144)
           (= src_reg_12_75 src_reg_12_145)
           (= src_reg_12_76 src_reg_12_146)
           (= src_reg_12_77 src_reg_12_147)
           (= dst_reg_12_50 dst_reg_12_120)
           (= dst_reg_12_51 dst_reg_12_121)
           (= dst_reg_12_52 dst_reg_12_122)
           (= dst_reg_12_53 dst_reg_12_123)
           (= dst_reg_12_54 dst_reg_12_124)
           (= dst_reg_12_55 dst_reg_12_125)
           (= storemerge21_12_114 dst_reg_12_126)
           (= storemerge_12_116 dst_reg_12_127)
           (= add.i.i_12_110 dst_reg_12_128)
           (= storemerge.i.i_12_80 dst_reg_12_129)
           (= dst_reg_12_60 dst_reg_12_130)
           (= dst_reg_12_61 dst_reg_12_131)
           (= dst_reg_12_62 dst_reg_12_132)
           (= dst_reg_12_63 dst_reg_12_133))))
-------------------
  %storemerge22 = phi i64 [ %add79.i, %if.else75.i ], [ -1, %if.then72.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else75.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else75.i_if.end80.i_12_148
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (= if.else75.i_if.end80.i_12_148 (and (= cmp65.i_12_117 #b0) a!1)))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then72.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then72.i_if.end80.i_12_149
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (= if.then72.i_if.end80.i_12_149 (and (= cmp65.i_12_117 #b1) a!1)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> (and (= cmp65.i_12_117 #b1) a!1)
      (and (= src_reg_12_64 src_reg_12_134)
           (= src_reg_12_65 src_reg_12_135)
           (= src_reg_12_66 src_reg_12_136)
           (= src_reg_12_67 src_reg_12_137)
           (= src_reg_12_68 src_reg_12_138)
           (= src_reg_12_69 src_reg_12_139)
           (= src_reg_12_70 src_reg_12_140)
           (= src_reg_12_71 src_reg_12_141)
           (= src_reg_12_72 src_reg_12_142)
           (= src_reg_12_73 src_reg_12_143)
           (= src_reg_12_74 src_reg_12_144)
           (= src_reg_12_75 src_reg_12_145)
           (= src_reg_12_76 src_reg_12_146)
           (= src_reg_12_77 src_reg_12_147)
           (= dst_reg_12_50 dst_reg_12_120)
           (= dst_reg_12_51 dst_reg_12_121)
           (= dst_reg_12_52 dst_reg_12_122)
           (= dst_reg_12_53 dst_reg_12_123)
           (= dst_reg_12_54 dst_reg_12_124)
           (= dst_reg_12_55 dst_reg_12_125)
           (= storemerge21_12_114 dst_reg_12_126)
           (= storemerge_12_116 dst_reg_12_127)
           (= #x0000000000000000 dst_reg_12_128)
           (= storemerge.i.i_12_80 dst_reg_12_129)
           (= dst_reg_12_60 dst_reg_12_130)
           (= dst_reg_12_61 dst_reg_12_131)
           (= dst_reg_12_62 dst_reg_12_132)
           (= dst_reg_12_63 dst_reg_12_133))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> (and (= cmp65.i_12_117 #b0) a!1)
      (and (= src_reg_12_64 src_reg_12_134)
           (= src_reg_12_65 src_reg_12_135)
           (= src_reg_12_66 src_reg_12_136)
           (= src_reg_12_67 src_reg_12_137)
           (= src_reg_12_68 src_reg_12_138)
           (= src_reg_12_69 src_reg_12_139)
           (= src_reg_12_70 src_reg_12_140)
           (= src_reg_12_71 src_reg_12_141)
           (= src_reg_12_72 src_reg_12_142)
           (= src_reg_12_73 src_reg_12_143)
           (= src_reg_12_74 src_reg_12_144)
           (= src_reg_12_75 src_reg_12_145)
           (= src_reg_12_76 src_reg_12_146)
           (= src_reg_12_77 src_reg_12_147)
           (= dst_reg_12_50 dst_reg_12_120)
           (= dst_reg_12_51 dst_reg_12_121)
           (= dst_reg_12_52 dst_reg_12_122)
           (= dst_reg_12_53 dst_reg_12_123)
           (= dst_reg_12_54 dst_reg_12_124)
           (= dst_reg_12_55 dst_reg_12_125)
           (= storemerge21_12_114 dst_reg_12_126)
           (= storemerge_12_116 dst_reg_12_127)
           (= add.i.i_12_110 dst_reg_12_128)
           (= storemerge.i.i_12_80 dst_reg_12_129)
           (= dst_reg_12_60 dst_reg_12_130)
           (= dst_reg_12_61 dst_reg_12_131)
           (= dst_reg_12_62 dst_reg_12_132)
           (= dst_reg_12_63 dst_reg_12_133))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (= if.else75.i_if.end80.i_12_148 (and (= cmp65.i_12_117 #b0) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (= if.then72.i_if.end80.i_12_149 (and (= cmp65.i_12_117 #b1) a!1)))

=========================
if.then.i314.i
=========================
=========================
if.else.i315.i
=========================
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b1)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_12_134 src_reg_12_189)
           (= src_reg_12_135 src_reg_12_190)
           (= src_reg_12_136 src_reg_12_191)
           (= src_reg_12_137 src_reg_12_192)
           (= src_reg_12_138 src_reg_12_193)
           (= src_reg_12_139 src_reg_12_194)
           (= src_reg_12_140 src_reg_12_195)
           (= src_reg_12_141 src_reg_12_196)
           (= src_reg_12_142 src_reg_12_197)
           (= src_reg_12_143 src_reg_12_198)
           (= src_reg_12_144 src_reg_12_199)
           (= src_reg_12_145 src_reg_12_200)
           (= src_reg_12_146 src_reg_12_201)
           (= src_reg_12_147 src_reg_12_202)
           (= dst_reg_12_120 dst_reg_12_175)
           (= dst_reg_12_121 dst_reg_12_176)
           (= dst_reg_12_122 dst_reg_12_177)
           (= dst_reg_12_123 dst_reg_12_178)
           (= and.i.i301.i_12_162 dst_reg_12_179)
           (= and6.i.i302.i_12_164 dst_reg_12_180)
           (= dst_reg_12_126 dst_reg_12_181)
           (= dst_reg_12_127 dst_reg_12_182)
           (= and6.i312.i_12_171 dst_reg_12_183)
           (= storemerge22_12_150 dst_reg_12_184)
           (= dst_reg_12_130 dst_reg_12_185)
           (= dst_reg_12_131 dst_reg_12_186)
           (= dst_reg_12_132 dst_reg_12_187)
           (= dst_reg_12_133 dst_reg_12_188)))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b0)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_12_134 src_reg_12_189)
           (= src_reg_12_135 src_reg_12_190)
           (= src_reg_12_136 src_reg_12_191)
           (= src_reg_12_137 src_reg_12_192)
           (= src_reg_12_138 src_reg_12_193)
           (= src_reg_12_139 src_reg_12_194)
           (= src_reg_12_140 src_reg_12_195)
           (= src_reg_12_141 src_reg_12_196)
           (= src_reg_12_142 src_reg_12_197)
           (= src_reg_12_143 src_reg_12_198)
           (= src_reg_12_144 src_reg_12_199)
           (= src_reg_12_145 src_reg_12_200)
           (= src_reg_12_146 src_reg_12_201)
           (= src_reg_12_147 src_reg_12_202)
           (= dst_reg_12_120 dst_reg_12_175)
           (= dst_reg_12_121 dst_reg_12_176)
           (= dst_reg_12_122 dst_reg_12_177)
           (= dst_reg_12_123 dst_reg_12_178)
           (= and.i.i301.i_12_162 dst_reg_12_179)
           (= and6.i.i302.i_12_164 dst_reg_12_180)
           (= dst_reg_12_126 dst_reg_12_181)
           (= dst_reg_12_127 dst_reg_12_182)
           (= #x0000000000000000 dst_reg_12_183)
           (= storemerge22_12_150 dst_reg_12_184)
           (= dst_reg_12_130 dst_reg_12_185)
           (= dst_reg_12_131 dst_reg_12_186)
           (= dst_reg_12_132 dst_reg_12_187)
           (= dst_reg_12_133 dst_reg_12_188)))))
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i315.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b0)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_12_203 a!2)))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i314.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b1)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_12_204 a!2)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b1)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_12_134 src_reg_12_189)
           (= src_reg_12_135 src_reg_12_190)
           (= src_reg_12_136 src_reg_12_191)
           (= src_reg_12_137 src_reg_12_192)
           (= src_reg_12_138 src_reg_12_193)
           (= src_reg_12_139 src_reg_12_194)
           (= src_reg_12_140 src_reg_12_195)
           (= src_reg_12_141 src_reg_12_196)
           (= src_reg_12_142 src_reg_12_197)
           (= src_reg_12_143 src_reg_12_198)
           (= src_reg_12_144 src_reg_12_199)
           (= src_reg_12_145 src_reg_12_200)
           (= src_reg_12_146 src_reg_12_201)
           (= src_reg_12_147 src_reg_12_202)
           (= dst_reg_12_120 dst_reg_12_175)
           (= dst_reg_12_121 dst_reg_12_176)
           (= dst_reg_12_122 dst_reg_12_177)
           (= dst_reg_12_123 dst_reg_12_178)
           (= and.i.i301.i_12_162 dst_reg_12_179)
           (= and6.i.i302.i_12_164 dst_reg_12_180)
           (= dst_reg_12_126 dst_reg_12_181)
           (= dst_reg_12_127 dst_reg_12_182)
           (= and6.i312.i_12_171 dst_reg_12_183)
           (= storemerge22_12_150 dst_reg_12_184)
           (= dst_reg_12_130 dst_reg_12_185)
           (= dst_reg_12_131 dst_reg_12_186)
           (= dst_reg_12_132 dst_reg_12_187)
           (= dst_reg_12_133 dst_reg_12_188)))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b0)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_12_134 src_reg_12_189)
           (= src_reg_12_135 src_reg_12_190)
           (= src_reg_12_136 src_reg_12_191)
           (= src_reg_12_137 src_reg_12_192)
           (= src_reg_12_138 src_reg_12_193)
           (= src_reg_12_139 src_reg_12_194)
           (= src_reg_12_140 src_reg_12_195)
           (= src_reg_12_141 src_reg_12_196)
           (= src_reg_12_142 src_reg_12_197)
           (= src_reg_12_143 src_reg_12_198)
           (= src_reg_12_144 src_reg_12_199)
           (= src_reg_12_145 src_reg_12_200)
           (= src_reg_12_146 src_reg_12_201)
           (= src_reg_12_147 src_reg_12_202)
           (= dst_reg_12_120 dst_reg_12_175)
           (= dst_reg_12_121 dst_reg_12_176)
           (= dst_reg_12_122 dst_reg_12_177)
           (= dst_reg_12_123 dst_reg_12_178)
           (= and.i.i301.i_12_162 dst_reg_12_179)
           (= and6.i.i302.i_12_164 dst_reg_12_180)
           (= dst_reg_12_126 dst_reg_12_181)
           (= dst_reg_12_127 dst_reg_12_182)
           (= #x0000000000000000 dst_reg_12_183)
           (= storemerge22_12_150 dst_reg_12_184)
           (= dst_reg_12_130 dst_reg_12_185)
           (= dst_reg_12_131 dst_reg_12_186)
           (= dst_reg_12_132 dst_reg_12_187)
           (= dst_reg_12_133 dst_reg_12_188)))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b0)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_12_203 a!2)))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b1)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_12_204 a!2)))

=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_12_210 #b0)
                (or (and (= cmp.i311.i_12_169 #b0) a!2)
                    (and (= cmp.i311.i_12_169 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_12_257 a!3))))
[handlePhiNodeResolvePathConditions] incomingBlockI coerce_reg_to_size.exit320.i
[handlePhiNodeResolvePathConditions] phiConditionI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_12_210 #b1)
                (or (and (= cmp.i311.i_12_169 #b0) a!2)
                    (and (= cmp.i311.i_12_169 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258 a!3))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
    (= retval.0.i.i.i.i_12_259 phi.bo_12_256))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
    (= retval.0.i.i.i.i_12_259 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_12_259 #x0000003f)
     (= cmp.i.i.i_12_262 #b1)
     (= cmp.i.i.i_12_262 #b0))
  (= sh_prom.i.i.i_12_263 ((_ zero_extend 32) retval.0.i.i.i.i_12_259))
  (= notmask.i.i.i_12_265 (bvshl #xffffffffffffffff sh_prom.i.i.i_12_263))
  (= sub.i.i.i_12_267 (bvxor notmask.i.i.i_12_265 #xffffffffffffffff))
  (= and.i.i336.i_12_268 (bvand notmask.i.i.i_12_265 i27.i317.i_12_207))
  (ite (= cmp.i.i.i_12_262 #b1)
     (= retval.sroa.0.0.i.i.i_12_270 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_12_270 and.i.i336.i_12_268))
  (ite (= cmp.i.i.i_12_262 #b1)
     (= retval.sroa.3.0.i.i.i_12_272 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_12_272 sub.i.i.i_12_267))
  (= or.i.i.i_12_273 (bvor retval.sroa.0.0.i.i.i_12_270 and.i.i301.i_12_162))
  (= and.i1.i.i_12_274 (bvand retval.sroa.3.0.i.i.i_12_272 and6.i.i302.i_12_164))
  (= neg.i.i.i_12_276 (bvxor and.i1.i.i_12_274 #xffffffffffffffff))
  (= and4.i.i.i_12_277 (bvand or.i.i.i_12_273 neg.i.i.i_12_276))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_12_210 #b0)
                (or (and (= cmp.i311.i_12_169 #b0) a!2)
                    (and (= cmp.i311.i_12_169 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_12_257 a!3))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_12_210 #b1)
                (or (and (= cmp.i311.i_12_169 #b0) a!2)
                    (and (= cmp.i311.i_12_169 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258 a!3))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_12_210 #b0) a!3)
          (and (= cmp.i.i.i.i_12_210 #b1) a!3))
      (and (= src_reg_12_189 src_reg_12_292)
           (= src_reg_12_190 src_reg_12_293)
           (= src_reg_12_191 src_reg_12_294)
           (= src_reg_12_192 src_reg_12_295)
           (= src_reg_12_193 src_reg_12_296)
           (= src_reg_12_194 src_reg_12_297)
           (= src_reg_12_195 src_reg_12_298)
           (= src_reg_12_196 src_reg_12_299)
           (= src_reg_12_197 src_reg_12_300)
           (= src_reg_12_198 src_reg_12_301)
           (= src_reg_12_199 src_reg_12_302)
           (= src_reg_12_200 src_reg_12_303)
           (= src_reg_12_201 src_reg_12_304)
           (= src_reg_12_202 src_reg_12_305)
           (= dst_reg_12_175 dst_reg_12_278)
           (= dst_reg_12_176 dst_reg_12_279)
           (= dst_reg_12_177 dst_reg_12_280)
           (= dst_reg_12_178 dst_reg_12_281)
           (= and4.i.i.i_12_277 dst_reg_12_282)
           (= and.i1.i.i_12_274 dst_reg_12_283)
           (= i27.i317.i_12_207 dst_reg_12_284)
           (= storemerge.i316.i_12_205 dst_reg_12_285)
           (= dst_reg_12_183 dst_reg_12_286)
           (= storemerge.i316.i_12_205 dst_reg_12_287)
           (= dst_reg_12_185 dst_reg_12_288)
           (= dst_reg_12_186 dst_reg_12_289)
           (= dst_reg_12_187 dst_reg_12_290)
           (= dst_reg_12_188 dst_reg_12_291))))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_12_101 #b1)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b0)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> a!1
      (and (= src_reg_12_64 src_reg_12_292)
           (= src_reg_12_65 src_reg_12_293)
           (= src_reg_12_66 src_reg_12_294)
           (= src_reg_12_67 src_reg_12_295)
           (= src_reg_12_68 src_reg_12_296)
           (= src_reg_12_69 src_reg_12_297)
           (= src_reg_12_70 src_reg_12_298)
           (= src_reg_12_71 src_reg_12_299)
           (= src_reg_12_72 src_reg_12_300)
           (= src_reg_12_73 src_reg_12_301)
           (= src_reg_12_74 src_reg_12_302)
           (= src_reg_12_75 src_reg_12_303)
           (= src_reg_12_76 src_reg_12_304)
           (= src_reg_12_77 src_reg_12_305)
           (= #x00000001 dst_reg_12_278)
           (= dst_reg_12_51 dst_reg_12_279)
           (= dst_reg_12_52 dst_reg_12_280)
           (= dst_reg_12_53 dst_reg_12_281)
           (= #x0000000000000000 dst_reg_12_282)
           (= #xffffffffffffffff dst_reg_12_283)
           (= #x8000000000000000 dst_reg_12_284)
           (= #x7fffffffffffffff dst_reg_12_285)
           (= #x0000000000000000 dst_reg_12_286)
           (= #xffffffffffffffff dst_reg_12_287)
           (= #x00000000 dst_reg_12_288)
           (= dst_reg_12_61 dst_reg_12_289)
           (= dst_reg_12_62 dst_reg_12_290)
           (= dst_reg_12_63 dst_reg_12_291))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i.i
=========================
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
if.end27.i
=========================
-------------------
  store i64 %storemerge21, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge, i64* %smax_value.i.i, align 8
-------------------
=========================
if.then72.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else75.i
=========================
-------------------
  store i64 %add.i.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.end80.i
=========================
-------------------
  store i64 %storemerge22, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %or7.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i314.i
=========================
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 37 = MemoryPhi({__reg_bound_offset.exit.i,36},{if.then26.i,17})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
35 = MemoryDef(34) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ and.i1.i.i_12_274 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
37 = MemoryPhi({__reg_bound_offset.exit.i,36},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
- dst_reg: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 37 = MemoryPhi({__reg_bound_offset.exit.i,36},{if.then26.i,17})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_306
[lookInsideStruct] singleValueType:dst_reg_12_306
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_307
[lookInsideStruct] singleValueType:dst_reg_12_307
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_308
[lookInsideStruct] singleValueType:dst_reg_12_308
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_309
[lookInsideStruct] singleValueType:dst_reg_12_309
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_310
[lookInsideStruct] singleValueType:dst_reg_12_310
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_311
[lookInsideStruct] singleValueType:dst_reg_12_311
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_312
[lookInsideStruct] singleValueType:dst_reg_12_312
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_313
[lookInsideStruct] singleValueType:dst_reg_12_313
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_314
[lookInsideStruct] singleValueType:dst_reg_12_314
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_315
[lookInsideStruct] singleValueType:dst_reg_12_315
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_316
[lookInsideStruct] singleValueType:dst_reg_12_316
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_317
[lookInsideStruct] singleValueType:dst_reg_12_317
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_318
[lookInsideStruct] singleValueType:dst_reg_12_318
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_12_319
[lookInsideStruct] singleValueType:dst_reg_12_319
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_12_306 ] [ ] [ dst_reg_12_307 ] [ dst_reg_12_308 ] [ dst_reg_12_309 ] [ [ dst_reg_12_310 ] [ dst_reg_12_311 ] ] [ dst_reg_12_312 ] [ dst_reg_12_313 ] [ dst_reg_12_314 ] [ dst_reg_12_315 ] [ ] [ dst_reg_12_316 ] [ dst_reg_12_317 ] [ dst_reg_12_318 ] [ dst_reg_12_319 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_12_278 dst_reg_12_306)
(= dst_reg_12_279 dst_reg_12_307)
(= dst_reg_12_280 dst_reg_12_308)
(= dst_reg_12_281 dst_reg_12_309)
(= dst_reg_12_282 dst_reg_12_310)
(= dst_reg_12_283 dst_reg_12_311)
(= dst_reg_12_284 dst_reg_12_312)
(= dst_reg_12_285 dst_reg_12_313)
(= dst_reg_12_286 dst_reg_12_314)
(= dst_reg_12_287 dst_reg_12_315)
(= dst_reg_12_288 dst_reg_12_316)
(= dst_reg_12_289 dst_reg_12_317)
(= dst_reg_12_290 dst_reg_12_318)
(= dst_reg_12_291 dst_reg_12_319)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_320
[lookInsideStruct] singleValueType:src_reg_12_320
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_321
[lookInsideStruct] singleValueType:src_reg_12_321
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_322
[lookInsideStruct] singleValueType:src_reg_12_322
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_323
[lookInsideStruct] singleValueType:src_reg_12_323
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_324
[lookInsideStruct] singleValueType:src_reg_12_324
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_325
[lookInsideStruct] singleValueType:src_reg_12_325
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_326
[lookInsideStruct] singleValueType:src_reg_12_326
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_327
[lookInsideStruct] singleValueType:src_reg_12_327
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_328
[lookInsideStruct] singleValueType:src_reg_12_328
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_329
[lookInsideStruct] singleValueType:src_reg_12_329
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_330
[lookInsideStruct] singleValueType:src_reg_12_330
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_331
[lookInsideStruct] singleValueType:src_reg_12_331
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_332
[lookInsideStruct] singleValueType:src_reg_12_332
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_12_333
[lookInsideStruct] singleValueType:src_reg_12_333
[setupBVTreeForArg] returning BVTree: [ [ src_reg_12_320 ] [ ] [ src_reg_12_321 ] [ src_reg_12_322 ] [ src_reg_12_323 ] [ [ src_reg_12_324 ] [ src_reg_12_325 ] ] [ src_reg_12_326 ] [ src_reg_12_327 ] [ src_reg_12_328 ] [ src_reg_12_329 ] [ ] [ src_reg_12_330 ] [ src_reg_12_331 ] [ src_reg_12_332 ] [ src_reg_12_333 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_12_292 src_reg_12_320)
(= src_reg_12_293 src_reg_12_321)
(= src_reg_12_294 src_reg_12_322)
(= src_reg_12_295 src_reg_12_323)
(= src_reg_12_296 src_reg_12_324)
(= src_reg_12_297 src_reg_12_325)
(= src_reg_12_298 src_reg_12_326)
(= src_reg_12_299 src_reg_12_327)
(= src_reg_12_300 src_reg_12_328)
(= src_reg_12_301 src_reg_12_329)
(= src_reg_12_302 src_reg_12_330)
(= src_reg_12_303 src_reg_12_331)
(= src_reg_12_304 src_reg_12_332)
(= src_reg_12_305 src_reg_12_333)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_12_320 ] [ ] [ src_reg_12_321 ] [ src_reg_12_322 ] [ src_reg_12_323 ] [ [ src_reg_12_324 ] [ src_reg_12_325 ] ] [ src_reg_12_326 ] [ src_reg_12_327 ] [ src_reg_12_328 ] [ src_reg_12_329 ] [ ] [ src_reg_12_330 ] [ src_reg_12_331 ] [ src_reg_12_332 ] [ src_reg_12_333 ] ] 
- dst_reg: [ [ dst_reg_12_306 ] [ ] [ dst_reg_12_307 ] [ dst_reg_12_308 ] [ dst_reg_12_309 ] [ [ dst_reg_12_310 ] [ dst_reg_12_311 ] ] [ dst_reg_12_312 ] [ dst_reg_12_313 ] [ dst_reg_12_314 ] [ dst_reg_12_315 ] [ ] [ dst_reg_12_316 ] [ dst_reg_12_317 ] [ dst_reg_12_318 ] [ dst_reg_12_319 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_12_210 #b0) a!3)
          (and (= cmp.i.i.i.i_12_210 #b1) a!3))
      (and (= src_reg_12_189 src_reg_12_292)
           (= src_reg_12_190 src_reg_12_293)
           (= src_reg_12_191 src_reg_12_294)
           (= src_reg_12_192 src_reg_12_295)
           (= src_reg_12_193 src_reg_12_296)
           (= src_reg_12_194 src_reg_12_297)
           (= src_reg_12_195 src_reg_12_298)
           (= src_reg_12_196 src_reg_12_299)
           (= src_reg_12_197 src_reg_12_300)
           (= src_reg_12_198 src_reg_12_301)
           (= src_reg_12_199 src_reg_12_302)
           (= src_reg_12_200 src_reg_12_303)
           (= src_reg_12_201 src_reg_12_304)
           (= src_reg_12_202 src_reg_12_305)
           (= dst_reg_12_175 dst_reg_12_278)
           (= dst_reg_12_176 dst_reg_12_279)
           (= dst_reg_12_177 dst_reg_12_280)
           (= dst_reg_12_178 dst_reg_12_281)
           (= and4.i.i.i_12_277 dst_reg_12_282)
           (= and.i1.i.i_12_274 dst_reg_12_283)
           (= i27.i317.i_12_207 dst_reg_12_284)
           (= storemerge.i316.i_12_205 dst_reg_12_285)
           (= dst_reg_12_183 dst_reg_12_286)
           (= storemerge.i316.i_12_205 dst_reg_12_287)
           (= dst_reg_12_185 dst_reg_12_288)
           (= dst_reg_12_186 dst_reg_12_289)
           (= dst_reg_12_187 dst_reg_12_290)
           (= dst_reg_12_188 dst_reg_12_291))))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b1)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b0)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> a!1
      (and (= src_reg_12_64 src_reg_12_292)
           (= src_reg_12_65 src_reg_12_293)
           (= src_reg_12_66 src_reg_12_294)
           (= src_reg_12_67 src_reg_12_295)
           (= src_reg_12_68 src_reg_12_296)
           (= src_reg_12_69 src_reg_12_297)
           (= src_reg_12_70 src_reg_12_298)
           (= src_reg_12_71 src_reg_12_299)
           (= src_reg_12_72 src_reg_12_300)
           (= src_reg_12_73 src_reg_12_301)
           (= src_reg_12_74 src_reg_12_302)
           (= src_reg_12_75 src_reg_12_303)
           (= src_reg_12_76 src_reg_12_304)
           (= src_reg_12_77 src_reg_12_305)
           (= #x00000001 dst_reg_12_278)
           (= dst_reg_12_51 dst_reg_12_279)
           (= dst_reg_12_52 dst_reg_12_280)
           (= dst_reg_12_53 dst_reg_12_281)
           (= #x0000000000000000 dst_reg_12_282)
           (= #xffffffffffffffff dst_reg_12_283)
           (= #x8000000000000000 dst_reg_12_284)
           (= #x7fffffffffffffff dst_reg_12_285)
           (= #x0000000000000000 dst_reg_12_286)
           (= #xffffffffffffffff dst_reg_12_287)
           (= #x00000000 dst_reg_12_288)
           (= dst_reg_12_61 dst_reg_12_289)
           (= dst_reg_12_62 dst_reg_12_290)
           (= dst_reg_12_63 dst_reg_12_291))))
  (= dst_reg_12_278 dst_reg_12_306)
  (= dst_reg_12_279 dst_reg_12_307)
  (= dst_reg_12_280 dst_reg_12_308)
  (= dst_reg_12_281 dst_reg_12_309)
  (= dst_reg_12_282 dst_reg_12_310)
  (= dst_reg_12_283 dst_reg_12_311)
  (= dst_reg_12_284 dst_reg_12_312)
  (= dst_reg_12_285 dst_reg_12_313)
  (= dst_reg_12_286 dst_reg_12_314)
  (= dst_reg_12_287 dst_reg_12_315)
  (= dst_reg_12_288 dst_reg_12_316)
  (= dst_reg_12_289 dst_reg_12_317)
  (= dst_reg_12_290 dst_reg_12_318)
  (= dst_reg_12_291 dst_reg_12_319)
  (= src_reg_12_292 src_reg_12_320)
  (= src_reg_12_293 src_reg_12_321)
  (= src_reg_12_294 src_reg_12_322)
  (= src_reg_12_295 src_reg_12_323)
  (= src_reg_12_296 src_reg_12_324)
  (= src_reg_12_297 src_reg_12_325)
  (= src_reg_12_298 src_reg_12_326)
  (= src_reg_12_299 src_reg_12_327)
  (= src_reg_12_300 src_reg_12_328)
  (= src_reg_12_301 src_reg_12_329)
  (= src_reg_12_302 src_reg_12_330)
  (= src_reg_12_303 src_reg_12_331)
  (= src_reg_12_304 src_reg_12_332)
  (= src_reg_12_305 src_reg_12_333)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_12_208 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= tobool.not.i.i.i.i.i_12_212 #b0))
  (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214)
     (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))
  (ite (= tobool.not.i.i.i.i.i_12_212 #b1)
     (= spec.select17.i.i.i.i.i_12_218 #x0000001f)
     (= spec.select17.i.i.i.i.i_12_218 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_12_215 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= tobool2.not.i.i.i.i.i_12_220 #b0))
  (= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 #xfffffff0))
  (= shl5.i.i.i.i.i_12_224
   (bvshl spec.select.i.i.i.i.i_12_215 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224)
     (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))
  (ite (= tobool2.not.i.i.i.i.i_12_220 #b1)
     (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222)
     (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))
  (ite (bvult word.addr.1.i.i.i.i.i_12_225 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= tobool8.not.i.i.i.i.i_12_228 #b0))
  (= sub10.i.i.i.i.i_12_230 (bvadd num.1.i.i.i.i.i_12_226 #xfffffff8))
  (= shl11.i.i.i.i.i_12_232
   (bvshl word.addr.1.i.i.i.i.i_12_225 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= word.addr.2.i.i.i.i.i_12_233 shl11.i.i.i.i.i_12_232)
     (= word.addr.2.i.i.i.i.i_12_233 word.addr.1.i.i.i.i.i_12_225))
  (ite (= tobool8.not.i.i.i.i.i_12_228 #b1)
     (= num.2.i.i.i.i.i_12_234 sub10.i.i.i.i.i_12_230)
     (= num.2.i.i.i.i.i_12_234 num.1.i.i.i.i.i_12_226))
  (ite (bvult word.addr.2.i.i.i.i.i_12_233 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= tobool14.not.i.i.i.i.i_12_236 #b0))
  (= sub16.i.i.i.i.i_12_238 (bvadd num.2.i.i.i.i.i_12_234 #xfffffffc))
  (= shl17.i.i.i.i.i_12_240
   (bvshl word.addr.2.i.i.i.i.i_12_233 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= word.addr.3.i.i.i.i.i_12_241 shl17.i.i.i.i.i_12_240)
     (= word.addr.3.i.i.i.i.i_12_241 word.addr.2.i.i.i.i.i_12_233))
  (ite (= tobool14.not.i.i.i.i.i_12_236 #b1)
     (= num.3.i.i.i.i.i_12_242 sub16.i.i.i.i.i_12_238)
     (= num.3.i.i.i.i.i_12_242 num.2.i.i.i.i.i_12_234))
  (ite (bvult word.addr.3.i.i.i.i.i_12_241 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= tobool20.not.i.i.i.i.i_12_244 #b0))
  (= sub22.i.i.i.i.i_12_246 (bvadd num.3.i.i.i.i.i_12_242 #x000000fe))
  (= shl23.i.i.i.i.i_12_248
   (bvshl word.addr.3.i.i.i.i.i_12_241 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= word.addr.4.i.i.i.i.i_12_249 shl23.i.i.i.i.i_12_248)
     (= word.addr.4.i.i.i.i.i_12_249 word.addr.3.i.i.i.i.i_12_241))
  (ite (= tobool20.not.i.i.i.i.i_12_244 #b1)
     (= num.4.i.i.i.i.i_12_250 sub22.i.i.i.i.i_12_246)
     (= num.4.i.i.i.i.i_12_250 num.3.i.i.i.i.i_12_242))
  (= word.addr.4.lobit.i.i.i.i.i.neg_12_252
   (bvlshr word.addr.4.i.i.i.i.i_12_249 #x000000000000003f))
  (= i.i.i.i.i.i.neg_12_253
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_12_252))
  (= add.i.i.i335.i_12_254 (bvadd num.4.i.i.i.i.i_12_250 i.i.i.i.i.i.neg_12_253))
  (= phi.bo_12_256 (bvand add.i.i.i335.i_12_254 #x000000ff))
BasicBlock: entry, Size:40
  (= dst_reg_12_0 dst_reg_12_0)
  (= dst_reg_12_1 dst_reg_12_1)
  (= dst_reg_12_2 dst_reg_12_2)
  (= dst_reg_12_3 dst_reg_12_3)
  (= dst_reg_12_4 dst_reg_12_4)
  (= dst_reg_12_5 dst_reg_12_5)
  (= dst_reg_12_6 dst_reg_12_6)
  (= dst_reg_12_7 dst_reg_12_7)
  (= dst_reg_12_8 dst_reg_12_8)
  (= dst_reg_12_9 dst_reg_12_9)
  (= dst_reg_12_10 dst_reg_12_10)
  (= dst_reg_12_11 dst_reg_12_11)
  (= dst_reg_12_12 dst_reg_12_12)
  (= dst_reg_12_13 dst_reg_12_13)
  (= src_reg_12_14 src_reg_12_14)
  (= src_reg_12_15 src_reg_12_15)
  (= src_reg_12_16 src_reg_12_16)
  (= src_reg_12_17 src_reg_12_17)
  (= src_reg_12_18 src_reg_12_18)
  (= src_reg_12_19 src_reg_12_19)
  (= src_reg_12_20 src_reg_12_20)
  (= src_reg_12_21 src_reg_12_21)
  (= src_reg_12_22 src_reg_12_22)
  (= src_reg_12_23 src_reg_12_23)
  (= src_reg_12_24 src_reg_12_24)
  (= src_reg_12_25 src_reg_12_25)
  (= src_reg_12_26 src_reg_12_26)
  (= src_reg_12_27 src_reg_12_27)
  (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)
  (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)
  (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)
  (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)
  (= dst_reg_12_4 i18.i.i_12_34)
  (= dst_reg_12_5 i20.i.i_12_35)
  (= and.i.i.i_12_37 (bvand i18.i.i_12_34 #x00000000ffffffff))
  (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 #x00000000ffffffff))
  (= dst_reg_12_8 i23.i.i_12_40)
  (= dst_reg_12_9 i24.i.i_12_41)
  (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))
  (ite (bvult i25.i.i_12_42 #x0000000100000000)
     (= cmp.i.i_12_44 #b1)
     (= cmp.i.i_12_44 #b0))
BasicBlock: if.end80.i, Size:20
  (=> if.else75.i_if.end80.i_12_148 (= storemerge22_12_150 add79.i_12_119))
  (=> if.then72.i_if.end80.i_12_149 (= storemerge22_12_150 #xffffffffffffffff))
  (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))
  (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))
  (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))
  (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))
  (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))
  (= neg.i.i_12_159 (bvxor or7.i.i_12_157 #xffffffffffffffff))
  (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))
  (= and.i.i301.i_12_162 (bvand and.i.i_12_160 #x00000000ffffffff))
  (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 #x00000000ffffffff))
  (= dst_reg_12_128 i23.i306.i_12_165)
  (= storemerge22_12_150 i24.i308.i_12_166)
  (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))
  (ite (bvult i25.i309.i_12_167 #x0000000100000000)
     (= cmp.i311.i_12_169 #b1)
     (= cmp.i311.i_12_169 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> (and (= cmp65.i_12_117 #b1) a!1)
      (and (= src_reg_12_64 src_reg_12_134)
           (= src_reg_12_65 src_reg_12_135)
           (= src_reg_12_66 src_reg_12_136)
           (= src_reg_12_67 src_reg_12_137)
           (= src_reg_12_68 src_reg_12_138)
           (= src_reg_12_69 src_reg_12_139)
           (= src_reg_12_70 src_reg_12_140)
           (= src_reg_12_71 src_reg_12_141)
           (= src_reg_12_72 src_reg_12_142)
           (= src_reg_12_73 src_reg_12_143)
           (= src_reg_12_74 src_reg_12_144)
           (= src_reg_12_75 src_reg_12_145)
           (= src_reg_12_76 src_reg_12_146)
           (= src_reg_12_77 src_reg_12_147)
           (= dst_reg_12_50 dst_reg_12_120)
           (= dst_reg_12_51 dst_reg_12_121)
           (= dst_reg_12_52 dst_reg_12_122)
           (= dst_reg_12_53 dst_reg_12_123)
           (= dst_reg_12_54 dst_reg_12_124)
           (= dst_reg_12_55 dst_reg_12_125)
           (= storemerge21_12_114 dst_reg_12_126)
           (= storemerge_12_116 dst_reg_12_127)
           (= #x0000000000000000 dst_reg_12_128)
           (= storemerge.i.i_12_80 dst_reg_12_129)
           (= dst_reg_12_60 dst_reg_12_130)
           (= dst_reg_12_61 dst_reg_12_131)
           (= dst_reg_12_62 dst_reg_12_132)
           (= dst_reg_12_63 dst_reg_12_133))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> (and (= cmp65.i_12_117 #b0) a!1)
      (and (= src_reg_12_64 src_reg_12_134)
           (= src_reg_12_65 src_reg_12_135)
           (= src_reg_12_66 src_reg_12_136)
           (= src_reg_12_67 src_reg_12_137)
           (= src_reg_12_68 src_reg_12_138)
           (= src_reg_12_69 src_reg_12_139)
           (= src_reg_12_70 src_reg_12_140)
           (= src_reg_12_71 src_reg_12_141)
           (= src_reg_12_72 src_reg_12_142)
           (= src_reg_12_73 src_reg_12_143)
           (= src_reg_12_74 src_reg_12_144)
           (= src_reg_12_75 src_reg_12_145)
           (= src_reg_12_76 src_reg_12_146)
           (= src_reg_12_77 src_reg_12_147)
           (= dst_reg_12_50 dst_reg_12_120)
           (= dst_reg_12_51 dst_reg_12_121)
           (= dst_reg_12_52 dst_reg_12_122)
           (= dst_reg_12_53 dst_reg_12_123)
           (= dst_reg_12_54 dst_reg_12_124)
           (= dst_reg_12_55 dst_reg_12_125)
           (= storemerge21_12_114 dst_reg_12_126)
           (= storemerge_12_116 dst_reg_12_127)
           (= add.i.i_12_110 dst_reg_12_128)
           (= storemerge.i.i_12_80 dst_reg_12_129)
           (= dst_reg_12_60 dst_reg_12_130)
           (= dst_reg_12_61 dst_reg_12_131)
           (= dst_reg_12_62 dst_reg_12_132)
           (= dst_reg_12_63 dst_reg_12_133))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (= if.else75.i_if.end80.i_12_148 (and (= cmp65.i_12_117 #b0) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (= if.then72.i_if.end80.i_12_149 (and (= cmp65.i_12_117 #b1) a!1)))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_12_46 (bvand i23.i.i_12_40 #x00000000ffffffff))
  (= and8.i.i_12_48 (bvand i24.i.i_12_41 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:16
  (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78
    (= storemerge.i.i_12_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79
    (= storemerge.i.i_12_80 and8.i.i_12_48))
  (= dst_reg_12_58 i27.i.i_12_82)
  (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 #x00000000ffffffff))
  (= and6.i.i6.i_12_86
   (bvand src_reg1.sroa.10.0.copyload_12_31 #x00000000ffffffff))
  (= i25.i13.i_12_87
   (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32))
  (ite (bvult i25.i13.i_12_87 #x0000000100000000)
     (= cmp.i15.i_12_89 #b1)
     (= cmp.i15.i_12_89 #b0))
  (= and6.i16.i_12_91
   (bvand src_reg1.sroa.17.0.copyload_12_32 #x00000000ffffffff))
  (= and8.i17.i_12_93
   (bvand src_reg1.sroa.22.0.copyload_12_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_12_89 #b1)
     (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91)
     (= src_reg1.sroa.17.0_12_95 #x0000000000000000))
  (ite (= cmp.i15.i_12_89 #b1)
     (= storemerge.i20.i_12_97 and8.i17.i_12_93)
     (= storemerge.i20.i_12_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_12_86 #x0000000000000000)
     (= tobool.not.i.i_12_99 #b1)
     (= tobool.not.i.i_12_99 #b0))
  (=> (= cmp.i.i_12_44 #b1)
    (and (= #x00000001 src_reg_12_64)
         (= src_reg_12_15 src_reg_12_65)
         (= src_reg_12_16 src_reg_12_66)
         (= src_reg_12_17 src_reg_12_67)
         (= src_reg_12_18 src_reg_12_68)
         (= src_reg_12_19 src_reg_12_69)
         (= src_reg_12_20 src_reg_12_70)
         (= src_reg_12_21 src_reg_12_71)
         (= src_reg_12_22 src_reg_12_72)
         (= src_reg_12_23 src_reg_12_73)
         (= src_reg_12_24 src_reg_12_74)
         (= src_reg_12_25 src_reg_12_75)
         (= src_reg_12_26 src_reg_12_76)
         (= src_reg_12_27 src_reg_12_77)
         (= #x00000001 dst_reg_12_50)
         (= dst_reg_12_1 dst_reg_12_51)
         (= dst_reg_12_2 dst_reg_12_52)
         (= dst_reg_12_3 dst_reg_12_53)
         (= and.i.i.i_12_37 dst_reg_12_54)
         (= and6.i.i.i_12_39 dst_reg_12_55)
         (= dst_reg_12_6 dst_reg_12_56)
         (= dst_reg_12_7 dst_reg_12_57)
         (= and6.i.i_12_46 dst_reg_12_58)
         (= dst_reg_12_9 dst_reg_12_59)
         (= dst_reg_12_10 dst_reg_12_60)
         (= dst_reg_12_11 dst_reg_12_61)
         (= dst_reg_12_12 dst_reg_12_62)
         (= dst_reg_12_13 dst_reg_12_63)))
  (=> (= cmp.i.i_12_44 #b0)
    (and (= #x00000001 src_reg_12_64)
         (= src_reg_12_15 src_reg_12_65)
         (= src_reg_12_16 src_reg_12_66)
         (= src_reg_12_17 src_reg_12_67)
         (= src_reg_12_18 src_reg_12_68)
         (= src_reg_12_19 src_reg_12_69)
         (= src_reg_12_20 src_reg_12_70)
         (= src_reg_12_21 src_reg_12_71)
         (= src_reg_12_22 src_reg_12_72)
         (= src_reg_12_23 src_reg_12_73)
         (= src_reg_12_24 src_reg_12_74)
         (= src_reg_12_25 src_reg_12_75)
         (= src_reg_12_26 src_reg_12_76)
         (= src_reg_12_27 src_reg_12_77)
         (= #x00000001 dst_reg_12_50)
         (= dst_reg_12_1 dst_reg_12_51)
         (= dst_reg_12_2 dst_reg_12_52)
         (= dst_reg_12_3 dst_reg_12_53)
         (= and.i.i.i_12_37 dst_reg_12_54)
         (= and6.i.i.i_12_39 dst_reg_12_55)
         (= dst_reg_12_6 dst_reg_12_56)
         (= dst_reg_12_7 dst_reg_12_57)
         (= #x0000000000000000 dst_reg_12_58)
         (= dst_reg_12_9 dst_reg_12_59)
         (= dst_reg_12_10 dst_reg_12_60)
         (= dst_reg_12_11 dst_reg_12_61)
         (= dst_reg_12_12 dst_reg_12_62)
         (= dst_reg_12_13 dst_reg_12_63)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_12_78 (= cmp.i.i_12_44 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_12_79 (= cmp.i.i_12_44 #b1))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:30
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_12_210 #b0) a!3)
          (and (= cmp.i.i.i.i_12_210 #b1) a!3))
      (and (= src_reg_12_189 src_reg_12_292)
           (= src_reg_12_190 src_reg_12_293)
           (= src_reg_12_191 src_reg_12_294)
           (= src_reg_12_192 src_reg_12_295)
           (= src_reg_12_193 src_reg_12_296)
           (= src_reg_12_194 src_reg_12_297)
           (= src_reg_12_195 src_reg_12_298)
           (= src_reg_12_196 src_reg_12_299)
           (= src_reg_12_197 src_reg_12_300)
           (= src_reg_12_198 src_reg_12_301)
           (= src_reg_12_199 src_reg_12_302)
           (= src_reg_12_200 src_reg_12_303)
           (= src_reg_12_201 src_reg_12_304)
           (= src_reg_12_202 src_reg_12_305)
           (= dst_reg_12_175 dst_reg_12_278)
           (= dst_reg_12_176 dst_reg_12_279)
           (= dst_reg_12_177 dst_reg_12_280)
           (= dst_reg_12_178 dst_reg_12_281)
           (= and4.i.i.i_12_277 dst_reg_12_282)
           (= and.i1.i.i_12_274 dst_reg_12_283)
           (= i27.i317.i_12_207 dst_reg_12_284)
           (= storemerge.i316.i_12_205 dst_reg_12_285)
           (= dst_reg_12_183 dst_reg_12_286)
           (= storemerge.i316.i_12_205 dst_reg_12_287)
           (= dst_reg_12_185 dst_reg_12_288)
           (= dst_reg_12_186 dst_reg_12_289)
           (= dst_reg_12_187 dst_reg_12_290)
           (= dst_reg_12_188 dst_reg_12_291))))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b1)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b0)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (=> a!1
      (and (= src_reg_12_64 src_reg_12_292)
           (= src_reg_12_65 src_reg_12_293)
           (= src_reg_12_66 src_reg_12_294)
           (= src_reg_12_67 src_reg_12_295)
           (= src_reg_12_68 src_reg_12_296)
           (= src_reg_12_69 src_reg_12_297)
           (= src_reg_12_70 src_reg_12_298)
           (= src_reg_12_71 src_reg_12_299)
           (= src_reg_12_72 src_reg_12_300)
           (= src_reg_12_73 src_reg_12_301)
           (= src_reg_12_74 src_reg_12_302)
           (= src_reg_12_75 src_reg_12_303)
           (= src_reg_12_76 src_reg_12_304)
           (= src_reg_12_77 src_reg_12_305)
           (= #x00000001 dst_reg_12_278)
           (= dst_reg_12_51 dst_reg_12_279)
           (= dst_reg_12_52 dst_reg_12_280)
           (= dst_reg_12_53 dst_reg_12_281)
           (= #x0000000000000000 dst_reg_12_282)
           (= #xffffffffffffffff dst_reg_12_283)
           (= #x8000000000000000 dst_reg_12_284)
           (= #x7fffffffffffffff dst_reg_12_285)
           (= #x0000000000000000 dst_reg_12_286)
           (= #xffffffffffffffff dst_reg_12_287)
           (= #x00000000 dst_reg_12_288)
           (= dst_reg_12_61 dst_reg_12_289)
           (= dst_reg_12_62 dst_reg_12_290)
           (= dst_reg_12_63 dst_reg_12_291))))
  (= dst_reg_12_278 dst_reg_12_306)
  (= dst_reg_12_279 dst_reg_12_307)
  (= dst_reg_12_280 dst_reg_12_308)
  (= dst_reg_12_281 dst_reg_12_309)
  (= dst_reg_12_282 dst_reg_12_310)
  (= dst_reg_12_283 dst_reg_12_311)
  (= dst_reg_12_284 dst_reg_12_312)
  (= dst_reg_12_285 dst_reg_12_313)
  (= dst_reg_12_286 dst_reg_12_314)
  (= dst_reg_12_287 dst_reg_12_315)
  (= dst_reg_12_288 dst_reg_12_316)
  (= dst_reg_12_289 dst_reg_12_317)
  (= dst_reg_12_290 dst_reg_12_318)
  (= dst_reg_12_291 dst_reg_12_319)
  (= src_reg_12_292 src_reg_12_320)
  (= src_reg_12_293 src_reg_12_321)
  (= src_reg_12_294 src_reg_12_322)
  (= src_reg_12_295 src_reg_12_323)
  (= src_reg_12_296 src_reg_12_324)
  (= src_reg_12_297 src_reg_12_325)
  (= src_reg_12_298 src_reg_12_326)
  (= src_reg_12_299 src_reg_12_327)
  (= src_reg_12_300 src_reg_12_328)
  (= src_reg_12_301 src_reg_12_329)
  (= src_reg_12_302 src_reg_12_330)
  (= src_reg_12_303 src_reg_12_331)
  (= src_reg_12_304 src_reg_12_332)
  (= src_reg_12_305 src_reg_12_333)
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp18.not.i.not_12_100 #b1)
     (= cmp18.not.i.not_12_100 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97)
     (= cmp24.old.i_12_101 #b1)
     (= cmp24.old.i_12_101 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:6
  (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))
  (ite (bvslt add.i.i_12_110 i27.i.i_12_82)
     (= cmp2.i.i_12_111 #b1)
     (= cmp2.i.i_12_111 #b0))
  (= add.i36.i_12_112 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge21_12_114 #x8000000000000000)
     (= storemerge21_12_114 add.i.i_12_110))
  (ite (= cmp2.i.i_12_111 #b1)
     (= storemerge_12_116 #x7fffffffffffffff)
     (= storemerge_12_116 add.i36.i_12_112))
  (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95)
     (= cmp65.i_12_117 #b1)
     (= cmp65.i_12_117 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:9
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203
    (= storemerge.i316.i_12_205 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204
    (= storemerge.i316.i_12_205 and8.i313.i_12_173))
  (= dst_reg_12_183 i27.i317.i_12_207)
  (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))
  (ite (= xor.i.i.i_12_208 #x0000000000000000)
     (= cmp.i.i.i.i_12_210 #b1)
     (= cmp.i.i.i.i_12_210 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b1)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_12_134 src_reg_12_189)
           (= src_reg_12_135 src_reg_12_190)
           (= src_reg_12_136 src_reg_12_191)
           (= src_reg_12_137 src_reg_12_192)
           (= src_reg_12_138 src_reg_12_193)
           (= src_reg_12_139 src_reg_12_194)
           (= src_reg_12_140 src_reg_12_195)
           (= src_reg_12_141 src_reg_12_196)
           (= src_reg_12_142 src_reg_12_197)
           (= src_reg_12_143 src_reg_12_198)
           (= src_reg_12_144 src_reg_12_199)
           (= src_reg_12_145 src_reg_12_200)
           (= src_reg_12_146 src_reg_12_201)
           (= src_reg_12_147 src_reg_12_202)
           (= dst_reg_12_120 dst_reg_12_175)
           (= dst_reg_12_121 dst_reg_12_176)
           (= dst_reg_12_122 dst_reg_12_177)
           (= dst_reg_12_123 dst_reg_12_178)
           (= and.i.i301.i_12_162 dst_reg_12_179)
           (= and6.i.i302.i_12_164 dst_reg_12_180)
           (= dst_reg_12_126 dst_reg_12_181)
           (= dst_reg_12_127 dst_reg_12_182)
           (= and6.i312.i_12_171 dst_reg_12_183)
           (= storemerge22_12_150 dst_reg_12_184)
           (= dst_reg_12_130 dst_reg_12_185)
           (= dst_reg_12_131 dst_reg_12_186)
           (= dst_reg_12_132 dst_reg_12_187)
           (= dst_reg_12_133 dst_reg_12_188)))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b0)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_12_134 src_reg_12_189)
           (= src_reg_12_135 src_reg_12_190)
           (= src_reg_12_136 src_reg_12_191)
           (= src_reg_12_137 src_reg_12_192)
           (= src_reg_12_138 src_reg_12_193)
           (= src_reg_12_139 src_reg_12_194)
           (= src_reg_12_140 src_reg_12_195)
           (= src_reg_12_141 src_reg_12_196)
           (= src_reg_12_142 src_reg_12_197)
           (= src_reg_12_143 src_reg_12_198)
           (= src_reg_12_144 src_reg_12_199)
           (= src_reg_12_145 src_reg_12_200)
           (= src_reg_12_146 src_reg_12_201)
           (= src_reg_12_147 src_reg_12_202)
           (= dst_reg_12_120 dst_reg_12_175)
           (= dst_reg_12_121 dst_reg_12_176)
           (= dst_reg_12_122 dst_reg_12_177)
           (= dst_reg_12_123 dst_reg_12_178)
           (= and.i.i301.i_12_162 dst_reg_12_179)
           (= and6.i.i302.i_12_164 dst_reg_12_180)
           (= dst_reg_12_126 dst_reg_12_181)
           (= dst_reg_12_127 dst_reg_12_182)
           (= #x0000000000000000 dst_reg_12_183)
           (= storemerge22_12_150 dst_reg_12_184)
           (= dst_reg_12_130 dst_reg_12_185)
           (= dst_reg_12_131 dst_reg_12_186)
           (= dst_reg_12_132 dst_reg_12_187)
           (= dst_reg_12_133 dst_reg_12_188)))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b0)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_12_203 a!2)))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (and (= cmp.i311.i_12_169 #b1)
                (or (and (= cmp65.i_12_117 #b0) a!1)
                    (and (= cmp65.i_12_117 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_12_204 a!2)))
BasicBlock: if.else75.i, Size:1
  (= add79.i_12_119 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97))
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_12_257
    (= retval.0.i.i.i.i_12_259 phi.bo_12_256))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258
    (= retval.0.i.i.i.i_12_259 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_12_259 #x0000003f)
     (= cmp.i.i.i_12_262 #b1)
     (= cmp.i.i.i_12_262 #b0))
  (= sh_prom.i.i.i_12_263 ((_ zero_extend 32) retval.0.i.i.i.i_12_259))
  (= notmask.i.i.i_12_265 (bvshl #xffffffffffffffff sh_prom.i.i.i_12_263))
  (= sub.i.i.i_12_267 (bvxor notmask.i.i.i_12_265 #xffffffffffffffff))
  (= and.i.i336.i_12_268 (bvand notmask.i.i.i_12_265 i27.i317.i_12_207))
  (ite (= cmp.i.i.i_12_262 #b1)
     (= retval.sroa.0.0.i.i.i_12_270 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_12_270 and.i.i336.i_12_268))
  (ite (= cmp.i.i.i_12_262 #b1)
     (= retval.sroa.3.0.i.i.i_12_272 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_12_272 sub.i.i.i_12_267))
  (= or.i.i.i_12_273 (bvor retval.sroa.0.0.i.i.i_12_270 and.i.i301.i_12_162))
  (= and.i1.i.i_12_274 (bvand retval.sroa.3.0.i.i.i_12_272 and6.i.i302.i_12_164))
  (= neg.i.i.i_12_276 (bvxor and.i1.i.i_12_274 #xffffffffffffffff))
  (= and4.i.i.i_12_277 (bvand or.i.i.i_12_273 neg.i.i.i_12_276))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_12_210 #b0)
                (or (and (= cmp.i311.i_12_169 #b0) a!2)
                    (and (= cmp.i311.i_12_169 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_12_257 a!3))))
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_12_210 #b1)
                (or (and (= cmp.i311.i_12_169 #b0) a!2)
                    (and (= cmp.i311.i_12_169 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258 a!3))))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 #x00000000ffffffff))
  (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_12_44 #b1)
if.else.i.i
  (= cmp.i.i_12_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_12_99 #b0)
                (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
      (a!2 (and (= tobool.not.i.i_12_99 #b1)
                (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_12_101 #b0) a!1)
               (and (= cmp18.not.i.not_12_100 #b1) a!2))))
(let ((a!4 (or (and (= cmp65.i_12_117 #b0) a!3)
               (and (= cmp65.i_12_117 #b1) a!3))))
(let ((a!5 (or (and (= cmp.i311.i_12_169 #b0) a!4)
               (and (= cmp.i311.i_12_169 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!5)
      (and (= cmp.i.i.i.i_12_210 #b1) a!5)
      (and (= cmp24.old.i_12_101 #b1) a!1)
      (and (= cmp18.not.i.not_12_100 #b0) a!2))))))
land.lhs.true.i
  (and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
if.then72.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_12_101 #b0)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b1)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (or (and (= cmp.i311.i_12_169 #b0) a!2) (and (= cmp.i311.i_12_169 #b1) a!2))))
if.else75.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
if.end80.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
[encodeFunctionBody] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_12_169 #b0) a!2)
               (and (= cmp.i311.i_12_169 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_12_210 #b0) a!3) (and (= cmp.i.i.i.i_12_210 #b1) a!3)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b1)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.end80.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b0)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.end80.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp.i311.i_12_169 #b1)
       (or (and (= cmp65.i_12_117 #b0) a!1) (and (= cmp65.i_12_117 #b1) a!1))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_12_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b1)
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_12_101 #b0)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_12_44 #b0)
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_12_100 #b0)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_12_44 #b1)
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_12_100 #b1)
     (= tobool.not.i.i_12_99 #b1)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end27.i, if.then72.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b1) a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_12_101 #b1)
     (= tobool.not.i.i_12_99 #b0)
     (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
(let ((a!2 (or (and (= cmp65.i_12_117 #b0) a!1)
               (and (= cmp65.i_12_117 #b1) a!1))))
  (and (= cmp.i.i.i.i_12_210 #b0)
       (or (and (= cmp.i311.i_12_169 #b0) a!2)
           (and (= cmp.i311.i_12_169 #b1) a!2)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_12_101 #b1)
         (= tobool.not.i.i_12_99 #b0)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
    (and (= cmp18.not.i.not_12_100 #b0)
         (= tobool.not.i.i_12_99 #b1)
         (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))
<if.end27.i, if.else75.i> :(let ((a!1 (or (and (= cmp24.old.i_12_101 #b0)
                    (= tobool.not.i.i_12_99 #b0)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1)))
               (and (= cmp18.not.i.not_12_100 #b1)
                    (= tobool.not.i.i_12_99 #b1)
                    (or (= cmp.i.i_12_44 #b0) (= cmp.i.i_12_44 #b1))))))
  (and (= cmp65.i_12_117 #b0) a!1))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ and4.i.i.i_12_277 ] [ and.i1.i.i_12_274 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
38 = MemoryPhi({if.then.i314.i,27},{if.else.i315.i,28}) : {
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ dst_reg_12_184 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
}
28 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ #x0000000000000000 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
7 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ #x0000000000000000 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
23 = MemoryDef(22) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ and6.i.i_12_46 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
40 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ dst_reg_12_56 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ dst_reg_12_59 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
21 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ add.i.i_12_110 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ i27.i317.i_12_207 ] [ storemerge.i316.i_12_205 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
37 = MemoryPhi({__reg_bound_offset.exit.i,36},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_12_292 ] [ ] [ src_reg_12_293 ] [ src_reg_12_294 ] [ src_reg_12_295 ] [ [ src_reg_12_296 ] [ src_reg_12_297 ] ] [ src_reg_12_298 ] [ src_reg_12_299 ] [ src_reg_12_300 ] [ src_reg_12_301 ] [ ] [ src_reg_12_302 ] [ src_reg_12_303 ] [ src_reg_12_304 ] [ src_reg_12_305 ] ] 
- dst_reg: [ [ dst_reg_12_278 ] [ ] [ dst_reg_12_279 ] [ dst_reg_12_280 ] [ dst_reg_12_281 ] [ [ dst_reg_12_282 ] [ dst_reg_12_283 ] ] [ dst_reg_12_284 ] [ dst_reg_12_285 ] [ dst_reg_12_286 ] [ dst_reg_12_287 ] [ ] [ dst_reg_12_288 ] [ dst_reg_12_289 ] [ dst_reg_12_290 ] [ dst_reg_12_291 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ and6.i312.i_12_171 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i_12_160 ] [ or7.i.i_12_157 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ dst_reg_12_57 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ i27.i.i_12_82 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge_12_116 ] [ #x0000000000000000 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
39 = MemoryPhi({if.then72.i,20},{if.else75.i,21}) : {
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ dst_reg_12_129 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ and.i.i.i_12_37 ] [ and6.i.i.i_12_39 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_12_64 ] [ ] [ src_reg_12_65 ] [ src_reg_12_66 ] [ src_reg_12_67 ] [ [ src_reg_12_68 ] [ src_reg_12_69 ] ] [ src_reg_12_70 ] [ src_reg_12_71 ] [ src_reg_12_72 ] [ src_reg_12_73 ] [ ] [ src_reg_12_74 ] [ src_reg_12_75 ] [ src_reg_12_76 ] [ src_reg_12_77 ] ] 
- dst_reg: [ [ dst_reg_12_50 ] [ ] [ dst_reg_12_51 ] [ dst_reg_12_52 ] [ dst_reg_12_53 ] [ [ dst_reg_12_54 ] [ dst_reg_12_55 ] ] [ storemerge21_12_114 ] [ storemerge.i.i_12_80 ] [ dst_reg_12_58 ] [ storemerge.i.i_12_80 ] [ ] [ dst_reg_12_60 ] [ dst_reg_12_61 ] [ dst_reg_12_62 ] [ dst_reg_12_63 ] ] 
}
22 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ dst_reg_12_124 ] [ dst_reg_12_125 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}
29 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_12_175 ] [ ] [ dst_reg_12_176 ] [ dst_reg_12_177 ] [ dst_reg_12_178 ] [ [ dst_reg_12_179 ] [ dst_reg_12_180 ] ] [ dst_reg_12_181 ] [ dst_reg_12_182 ] [ dst_reg_12_183 ] [ storemerge.i316.i_12_205 ] [ ] [ dst_reg_12_185 ] [ dst_reg_12_186 ] [ dst_reg_12_187 ] [ dst_reg_12_188 ] ] 
- src_reg: [ [ src_reg_12_189 ] [ ] [ src_reg_12_190 ] [ src_reg_12_191 ] [ src_reg_12_192 ] [ [ src_reg_12_193 ] [ src_reg_12_194 ] ] [ src_reg_12_195 ] [ src_reg_12_196 ] [ src_reg_12_197 ] [ src_reg_12_198 ] [ ] [ src_reg_12_199 ] [ src_reg_12_200 ] [ src_reg_12_201 ] [ src_reg_12_202 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_12_120 ] [ ] [ dst_reg_12_121 ] [ dst_reg_12_122 ] [ dst_reg_12_123 ] [ [ and.i.i301.i_12_162 ] [ and6.i.i302.i_12_164 ] ] [ dst_reg_12_126 ] [ dst_reg_12_127 ] [ dst_reg_12_128 ] [ storemerge22_12_150 ] [ ] [ dst_reg_12_130 ] [ dst_reg_12_131 ] [ dst_reg_12_132 ] [ dst_reg_12_133 ] ] 
- src_reg: [ [ src_reg_12_134 ] [ ] [ src_reg_12_135 ] [ src_reg_12_136 ] [ src_reg_12_137 ] [ [ src_reg_12_138 ] [ src_reg_12_139 ] ] [ src_reg_12_140 ] [ src_reg_12_141 ] [ src_reg_12_142 ] [ src_reg_12_143 ] [ ] [ src_reg_12_144 ] [ src_reg_12_145 ] [ src_reg_12_146 ] [ src_reg_12_147 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_12_0 ] [ ] [ dst_reg_12_1 ] [ dst_reg_12_2 ] [ dst_reg_12_3 ] [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] [ dst_reg_12_6 ] [ dst_reg_12_7 ] [ dst_reg_12_8 ] [ dst_reg_12_9 ] [ ] [ dst_reg_12_10 ] [ dst_reg_12_11 ] [ dst_reg_12_12 ] [ dst_reg_12_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_12_4 ] [ dst_reg_12_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_4",
	"dst_reg_12_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7",
	"dst_reg_12_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7",
	"dst_reg_12_8",
	"dst_reg_12_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7",
	"dst_reg_12_8",
	"dst_reg_12_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7",
	"dst_reg_12_8",
	"dst_reg_12_9",
	"",
	"",
	"dst_reg_12_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7",
	"dst_reg_12_8",
	"dst_reg_12_9",
	"",
	"",
	"dst_reg_12_10",
	"dst_reg_12_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_12_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_0",
	[
		""
	],
	"dst_reg_12_1",
	"dst_reg_12_2",
	"dst_reg_12_3",
	[
		"dst_reg_12_4",
		"dst_reg_12_5"
	],
	"dst_reg_12_6",
	"dst_reg_12_7",
	"dst_reg_12_8",
	"dst_reg_12_9",
	"",
	"",
	"dst_reg_12_10",
	"dst_reg_12_11",
	"dst_reg_12_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_12_14 ] [ ] [ src_reg_12_15 ] [ src_reg_12_16 ] [ src_reg_12_17 ] [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] [ src_reg_12_20 ] [ src_reg_12_21 ] [ src_reg_12_22 ] [ src_reg_12_23 ] [ ] [ src_reg_12_24 ] [ src_reg_12_25 ] [ src_reg_12_26 ] [ src_reg_12_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_12_18 ] [ src_reg_12_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_12_18 ] [ src_reg_12_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_18",
	"src_reg_12_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21",
	"src_reg_12_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21",
	"src_reg_12_22",
	"src_reg_12_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21",
	"src_reg_12_22",
	"src_reg_12_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21",
	"src_reg_12_22",
	"src_reg_12_23",
	"",
	"",
	"src_reg_12_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21",
	"src_reg_12_22",
	"src_reg_12_23",
	"",
	"",
	"src_reg_12_24",
	"src_reg_12_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_12_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_14",
	[
		""
	],
	"src_reg_12_15",
	"src_reg_12_16",
	"src_reg_12_17",
	[
		"src_reg_12_18",
		"src_reg_12_19"
	],
	"src_reg_12_20",
	"src_reg_12_21",
	"src_reg_12_22",
	"src_reg_12_23",
	"",
	"",
	"src_reg_12_24",
	"src_reg_12_25",
	"src_reg_12_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_12_320 ] [ ] [ src_reg_12_321 ] [ src_reg_12_322 ] [ src_reg_12_323 ] [ [ src_reg_12_324 ] [ src_reg_12_325 ] ] [ src_reg_12_326 ] [ src_reg_12_327 ] [ src_reg_12_328 ] [ src_reg_12_329 ] [ ] [ src_reg_12_330 ] [ src_reg_12_331 ] [ src_reg_12_332 ] [ src_reg_12_333 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_12_320 ] [ ] [ src_reg_12_321 ] [ src_reg_12_322 ] [ src_reg_12_323 ] [ [ src_reg_12_324 ] [ src_reg_12_325 ] ] [ src_reg_12_326 ] [ src_reg_12_327 ] [ src_reg_12_328 ] [ src_reg_12_329 ] [ ] [ src_reg_12_330 ] [ src_reg_12_331 ] [ src_reg_12_332 ] [ src_reg_12_333 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_320 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_321 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_322 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_323 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_12_324 ] [ src_reg_12_325 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_12_324 ] [ src_reg_12_325 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_324 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_324"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_325 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_324",
	"src_reg_12_325"
]

[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_326 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_327 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_328 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327",
	"src_reg_12_328"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_12_329 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327",
	"src_reg_12_328",
	"src_reg_12_329"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327",
	"src_reg_12_328",
	"src_reg_12_329",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_330 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327",
	"src_reg_12_328",
	"src_reg_12_329",
	"",
	"",
	"src_reg_12_330"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_12_331 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327",
	"src_reg_12_328",
	"src_reg_12_329",
	"",
	"",
	"src_reg_12_330",
	"src_reg_12_331"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_12_332 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_12_320",
	[
		""
	],
	"src_reg_12_321",
	"src_reg_12_322",
	"src_reg_12_323",
	[
		"src_reg_12_324",
		"src_reg_12_325"
	],
	"src_reg_12_326",
	"src_reg_12_327",
	"src_reg_12_328",
	"src_reg_12_329",
	"",
	"",
	"src_reg_12_330",
	"src_reg_12_331",
	"src_reg_12_332"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_12_306 ] [ ] [ dst_reg_12_307 ] [ dst_reg_12_308 ] [ dst_reg_12_309 ] [ [ dst_reg_12_310 ] [ dst_reg_12_311 ] ] [ dst_reg_12_312 ] [ dst_reg_12_313 ] [ dst_reg_12_314 ] [ dst_reg_12_315 ] [ ] [ dst_reg_12_316 ] [ dst_reg_12_317 ] [ dst_reg_12_318 ] [ dst_reg_12_319 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_12_306 ] [ ] [ dst_reg_12_307 ] [ dst_reg_12_308 ] [ dst_reg_12_309 ] [ [ dst_reg_12_310 ] [ dst_reg_12_311 ] ] [ dst_reg_12_312 ] [ dst_reg_12_313 ] [ dst_reg_12_314 ] [ dst_reg_12_315 ] [ ] [ dst_reg_12_316 ] [ dst_reg_12_317 ] [ dst_reg_12_318 ] [ dst_reg_12_319 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_306 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_307 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_308 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_309 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_12_310 ] [ dst_reg_12_311 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_12_310 ] [ dst_reg_12_311 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_310 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_310"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_311 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_310",
	"dst_reg_12_311"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_312 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_313 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_314 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313",
	"dst_reg_12_314"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_12_315 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313",
	"dst_reg_12_314",
	"dst_reg_12_315"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313",
	"dst_reg_12_314",
	"dst_reg_12_315",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_316 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313",
	"dst_reg_12_314",
	"dst_reg_12_315",
	"",
	"",
	"dst_reg_12_316"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_12_317 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313",
	"dst_reg_12_314",
	"dst_reg_12_315",
	"",
	"",
	"dst_reg_12_316",
	"dst_reg_12_317"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_12_318 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_12_306",
	[
		""
	],
	"dst_reg_12_307",
	"dst_reg_12_308",
	"dst_reg_12_309",
	[
		"dst_reg_12_310",
		"dst_reg_12_311"
	],
	"dst_reg_12_312",
	"dst_reg_12_313",
	"dst_reg_12_314",
	"dst_reg_12_315",
	"",
	"",
	"dst_reg_12_316",
	"dst_reg_12_317",
	"dst_reg_12_318"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_ADD_32
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_12_0",
      [ "" ],
      "dst_reg_12_1",
      "dst_reg_12_2",
      "dst_reg_12_3",
      [ "dst_reg_12_4", "dst_reg_12_5" ],
      "dst_reg_12_6",
      "dst_reg_12_7",
      "dst_reg_12_8",
      "dst_reg_12_9",
      "",
      "",
      "dst_reg_12_10",
      "dst_reg_12_11",
      "dst_reg_12_12"
   ],
   "src_reg" : [
      "src_reg_12_14",
      [ "" ],
      "src_reg_12_15",
      "src_reg_12_16",
      "src_reg_12_17",
      [ "src_reg_12_18", "src_reg_12_19" ],
      "src_reg_12_20",
      "src_reg_12_21",
      "src_reg_12_22",
      "src_reg_12_23",
      "",
      "",
      "src_reg_12_24",
      "src_reg_12_25",
      "src_reg_12_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_12_306",
      [ "" ],
      "dst_reg_12_307",
      "dst_reg_12_308",
      "dst_reg_12_309",
      [ "dst_reg_12_310", "dst_reg_12_311" ],
      "dst_reg_12_312",
      "dst_reg_12_313",
      "dst_reg_12_314",
      "dst_reg_12_315",
      "",
      "",
      "dst_reg_12_316",
      "dst_reg_12_317",
      "dst_reg_12_318"
   ],
   "src_reg" : [
      "src_reg_12_320",
      [ "" ],
      "src_reg_12_321",
      "src_reg_12_322",
      "src_reg_12_323",
      [ "src_reg_12_324", "src_reg_12_325" ],
      "src_reg_12_326",
      "src_reg_12_327",
      "src_reg_12_328",
      "src_reg_12_329",
      "",
      "",
      "src_reg_12_330",
      "src_reg_12_331",
      "src_reg_12_332"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun i24.i308.i_12_166 () (_ BitVec 64))
(declare-fun and8.i313.i_12_173 () (_ BitVec 64))
(declare-fun i23.i306.i_12_165 () (_ BitVec 64))
(declare-fun and6.i312.i_12_171 () (_ BitVec 64))
(declare-fun cmp.i.i_12_44 () (_ BitVec 1))
(declare-fun tobool.not.i.i_12_99 () (_ BitVec 1))
(declare-fun cmp18.not.i.not_12_100 () (_ BitVec 1))
(declare-fun cmp24.old.i_12_101 () (_ BitVec 1))
(declare-fun cmp65.i_12_117 () (_ BitVec 1))
(declare-fun cmp.i311.i_12_169 () (_ BitVec 1))
(declare-fun cmp.i.i.i.i_12_210 () (_ BitVec 1))
(declare-fun coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_12_257 () Bool)
(declare-fun neg.i.i.i_12_276 () (_ BitVec 64))
(declare-fun or.i.i.i_12_273 () (_ BitVec 64))
(declare-fun and4.i.i.i_12_277 () (_ BitVec 64))
(declare-fun and.i1.i.i_12_274 () (_ BitVec 64))
(declare-fun and6.i.i302.i_12_164 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_12_272 () (_ BitVec 64))
(declare-fun and.i.i301.i_12_162 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_12_270 () (_ BitVec 64))
(declare-fun sub.i.i.i_12_267 () (_ BitVec 64))
(declare-fun cmp.i.i.i_12_262 () (_ BitVec 1))
(declare-fun and.i.i336.i_12_268 () (_ BitVec 64))
(declare-fun i27.i317.i_12_207 () (_ BitVec 64))
(declare-fun notmask.i.i.i_12_265 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_12_263 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_12_259 () (_ BitVec 32))
(declare-fun phi.bo_12_256 () (_ BitVec 32))
(declare-fun storemerge.i20.i_12_97 () (_ BitVec 64))
(declare-fun storemerge.i.i_12_80 () (_ BitVec 64))
(declare-fun add79.i_12_119 () (_ BitVec 64))
(declare-fun if.then.i314.i_coerce_reg_to_size.exit320.i_12_204 () Bool)
(declare-fun if.else.i315.i_coerce_reg_to_size.exit320.i_12_203 () Bool)
(declare-fun dst_reg_12_188 () (_ BitVec 8))
(declare-fun dst_reg_12_133 () (_ BitVec 8))
(declare-fun dst_reg_12_187 () (_ BitVec 32))
(declare-fun dst_reg_12_132 () (_ BitVec 32))
(declare-fun dst_reg_12_186 () (_ BitVec 32))
(declare-fun dst_reg_12_131 () (_ BitVec 32))
(declare-fun dst_reg_12_185 () (_ BitVec 32))
(declare-fun dst_reg_12_130 () (_ BitVec 32))
(declare-fun dst_reg_12_184 () (_ BitVec 64))
(declare-fun storemerge22_12_150 () (_ BitVec 64))
(declare-fun dst_reg_12_183 () (_ BitVec 64))
(declare-fun dst_reg_12_182 () (_ BitVec 64))
(declare-fun dst_reg_12_127 () (_ BitVec 64))
(declare-fun dst_reg_12_181 () (_ BitVec 64))
(declare-fun dst_reg_12_126 () (_ BitVec 64))
(declare-fun dst_reg_12_180 () (_ BitVec 64))
(declare-fun dst_reg_12_179 () (_ BitVec 64))
(declare-fun dst_reg_12_178 () (_ BitVec 32))
(declare-fun dst_reg_12_123 () (_ BitVec 32))
(declare-fun dst_reg_12_177 () (_ BitVec 32))
(declare-fun dst_reg_12_122 () (_ BitVec 32))
(declare-fun dst_reg_12_176 () (_ BitVec 32))
(declare-fun dst_reg_12_121 () (_ BitVec 32))
(declare-fun dst_reg_12_175 () (_ BitVec 32))
(declare-fun dst_reg_12_120 () (_ BitVec 32))
(declare-fun src_reg_12_202 () (_ BitVec 8))
(declare-fun src_reg_12_147 () (_ BitVec 8))
(declare-fun src_reg_12_201 () (_ BitVec 32))
(declare-fun src_reg_12_146 () (_ BitVec 32))
(declare-fun src_reg_12_200 () (_ BitVec 32))
(declare-fun src_reg_12_145 () (_ BitVec 32))
(declare-fun src_reg_12_199 () (_ BitVec 32))
(declare-fun src_reg_12_144 () (_ BitVec 32))
(declare-fun src_reg_12_198 () (_ BitVec 64))
(declare-fun src_reg_12_143 () (_ BitVec 64))
(declare-fun src_reg_12_197 () (_ BitVec 64))
(declare-fun src_reg_12_142 () (_ BitVec 64))
(declare-fun src_reg_12_196 () (_ BitVec 64))
(declare-fun src_reg_12_141 () (_ BitVec 64))
(declare-fun src_reg_12_195 () (_ BitVec 64))
(declare-fun src_reg_12_140 () (_ BitVec 64))
(declare-fun src_reg_12_194 () (_ BitVec 64))
(declare-fun src_reg_12_139 () (_ BitVec 64))
(declare-fun src_reg_12_193 () (_ BitVec 64))
(declare-fun src_reg_12_138 () (_ BitVec 64))
(declare-fun src_reg_12_192 () (_ BitVec 32))
(declare-fun src_reg_12_137 () (_ BitVec 32))
(declare-fun src_reg_12_191 () (_ BitVec 32))
(declare-fun src_reg_12_136 () (_ BitVec 32))
(declare-fun src_reg_12_190 () (_ BitVec 32))
(declare-fun src_reg_12_135 () (_ BitVec 32))
(declare-fun src_reg_12_189 () (_ BitVec 32))
(declare-fun src_reg_12_134 () (_ BitVec 32))
(declare-fun xor.i.i.i_12_208 () (_ BitVec 64))
(declare-fun storemerge.i316.i_12_205 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0_12_95 () (_ BitVec 64))
(declare-fun add.i.i_12_110 () (_ BitVec 64))
(declare-fun add.i36.i_12_112 () (_ BitVec 64))
(declare-fun storemerge_12_116 () (_ BitVec 64))
(declare-fun cmp2.i.i_12_111 () (_ BitVec 1))
(declare-fun storemerge21_12_114 () (_ BitVec 64))
(declare-fun i27.i.i_12_82 () (_ BitVec 64))
(declare-fun src_reg_12_333 () (_ BitVec 8))
(declare-fun src_reg_12_305 () (_ BitVec 8))
(declare-fun src_reg_12_332 () (_ BitVec 32))
(declare-fun src_reg_12_304 () (_ BitVec 32))
(declare-fun src_reg_12_331 () (_ BitVec 32))
(declare-fun src_reg_12_303 () (_ BitVec 32))
(declare-fun src_reg_12_330 () (_ BitVec 32))
(declare-fun src_reg_12_302 () (_ BitVec 32))
(declare-fun src_reg_12_329 () (_ BitVec 64))
(declare-fun src_reg_12_301 () (_ BitVec 64))
(declare-fun src_reg_12_328 () (_ BitVec 64))
(declare-fun src_reg_12_300 () (_ BitVec 64))
(declare-fun src_reg_12_327 () (_ BitVec 64))
(declare-fun src_reg_12_299 () (_ BitVec 64))
(declare-fun src_reg_12_326 () (_ BitVec 64))
(declare-fun src_reg_12_298 () (_ BitVec 64))
(declare-fun src_reg_12_325 () (_ BitVec 64))
(declare-fun src_reg_12_297 () (_ BitVec 64))
(declare-fun src_reg_12_324 () (_ BitVec 64))
(declare-fun src_reg_12_296 () (_ BitVec 64))
(declare-fun src_reg_12_323 () (_ BitVec 32))
(declare-fun src_reg_12_295 () (_ BitVec 32))
(declare-fun src_reg_12_322 () (_ BitVec 32))
(declare-fun src_reg_12_294 () (_ BitVec 32))
(declare-fun src_reg_12_321 () (_ BitVec 32))
(declare-fun src_reg_12_293 () (_ BitVec 32))
(declare-fun src_reg_12_320 () (_ BitVec 32))
(declare-fun src_reg_12_292 () (_ BitVec 32))
(declare-fun dst_reg_12_319 () (_ BitVec 8))
(declare-fun dst_reg_12_291 () (_ BitVec 8))
(declare-fun dst_reg_12_318 () (_ BitVec 32))
(declare-fun dst_reg_12_290 () (_ BitVec 32))
(declare-fun dst_reg_12_317 () (_ BitVec 32))
(declare-fun dst_reg_12_289 () (_ BitVec 32))
(declare-fun dst_reg_12_316 () (_ BitVec 32))
(declare-fun dst_reg_12_288 () (_ BitVec 32))
(declare-fun dst_reg_12_315 () (_ BitVec 64))
(declare-fun dst_reg_12_287 () (_ BitVec 64))
(declare-fun dst_reg_12_314 () (_ BitVec 64))
(declare-fun dst_reg_12_286 () (_ BitVec 64))
(declare-fun dst_reg_12_313 () (_ BitVec 64))
(declare-fun dst_reg_12_285 () (_ BitVec 64))
(declare-fun dst_reg_12_312 () (_ BitVec 64))
(declare-fun dst_reg_12_284 () (_ BitVec 64))
(declare-fun dst_reg_12_311 () (_ BitVec 64))
(declare-fun dst_reg_12_283 () (_ BitVec 64))
(declare-fun dst_reg_12_310 () (_ BitVec 64))
(declare-fun dst_reg_12_282 () (_ BitVec 64))
(declare-fun dst_reg_12_309 () (_ BitVec 32))
(declare-fun dst_reg_12_281 () (_ BitVec 32))
(declare-fun dst_reg_12_308 () (_ BitVec 32))
(declare-fun dst_reg_12_280 () (_ BitVec 32))
(declare-fun dst_reg_12_307 () (_ BitVec 32))
(declare-fun dst_reg_12_279 () (_ BitVec 32))
(declare-fun dst_reg_12_306 () (_ BitVec 32))
(declare-fun dst_reg_12_278 () (_ BitVec 32))
(declare-fun dst_reg_12_63 () (_ BitVec 8))
(declare-fun dst_reg_12_62 () (_ BitVec 32))
(declare-fun dst_reg_12_61 () (_ BitVec 32))
(declare-fun dst_reg_12_53 () (_ BitVec 32))
(declare-fun dst_reg_12_52 () (_ BitVec 32))
(declare-fun dst_reg_12_51 () (_ BitVec 32))
(declare-fun src_reg_12_77 () (_ BitVec 8))
(declare-fun src_reg_12_76 () (_ BitVec 32))
(declare-fun src_reg_12_75 () (_ BitVec 32))
(declare-fun src_reg_12_74 () (_ BitVec 32))
(declare-fun src_reg_12_73 () (_ BitVec 64))
(declare-fun src_reg_12_72 () (_ BitVec 64))
(declare-fun src_reg_12_71 () (_ BitVec 64))
(declare-fun src_reg_12_70 () (_ BitVec 64))
(declare-fun src_reg_12_69 () (_ BitVec 64))
(declare-fun src_reg_12_68 () (_ BitVec 64))
(declare-fun src_reg_12_67 () (_ BitVec 32))
(declare-fun src_reg_12_66 () (_ BitVec 32))
(declare-fun src_reg_12_65 () (_ BitVec 32))
(declare-fun src_reg_12_64 () (_ BitVec 32))
(declare-fun if.then.i.i_coerce_reg_to_size.exit.i_12_79 () Bool)
(declare-fun if.else.i.i_coerce_reg_to_size.exit.i_12_78 () Bool)
(declare-fun dst_reg_12_13 () (_ BitVec 8))
(declare-fun dst_reg_12_12 () (_ BitVec 32))
(declare-fun dst_reg_12_11 () (_ BitVec 32))
(declare-fun dst_reg_12_60 () (_ BitVec 32))
(declare-fun dst_reg_12_10 () (_ BitVec 32))
(declare-fun dst_reg_12_59 () (_ BitVec 64))
(declare-fun dst_reg_12_9 () (_ BitVec 64))
(declare-fun dst_reg_12_58 () (_ BitVec 64))
(declare-fun dst_reg_12_57 () (_ BitVec 64))
(declare-fun dst_reg_12_7 () (_ BitVec 64))
(declare-fun dst_reg_12_56 () (_ BitVec 64))
(declare-fun dst_reg_12_6 () (_ BitVec 64))
(declare-fun dst_reg_12_55 () (_ BitVec 64))
(declare-fun and6.i.i.i_12_39 () (_ BitVec 64))
(declare-fun dst_reg_12_54 () (_ BitVec 64))
(declare-fun and.i.i.i_12_37 () (_ BitVec 64))
(declare-fun dst_reg_12_3 () (_ BitVec 32))
(declare-fun dst_reg_12_2 () (_ BitVec 32))
(declare-fun dst_reg_12_1 () (_ BitVec 32))
(declare-fun dst_reg_12_50 () (_ BitVec 32))
(declare-fun src_reg_12_27 () (_ BitVec 8))
(declare-fun src_reg_12_26 () (_ BitVec 32))
(declare-fun src_reg_12_25 () (_ BitVec 32))
(declare-fun src_reg_12_24 () (_ BitVec 32))
(declare-fun src_reg_12_23 () (_ BitVec 64))
(declare-fun src_reg_12_22 () (_ BitVec 64))
(declare-fun src_reg_12_21 () (_ BitVec 64))
(declare-fun src_reg_12_20 () (_ BitVec 64))
(declare-fun src_reg_12_19 () (_ BitVec 64))
(declare-fun src_reg_12_18 () (_ BitVec 64))
(declare-fun src_reg_12_17 () (_ BitVec 32))
(declare-fun src_reg_12_16 () (_ BitVec 32))
(declare-fun src_reg_12_15 () (_ BitVec 32))
(declare-fun and6.i.i_12_46 () (_ BitVec 64))
(declare-fun and6.i.i6.i_12_86 () (_ BitVec 64))
(declare-fun and8.i17.i_12_93 () (_ BitVec 64))
(declare-fun cmp.i15.i_12_89 () (_ BitVec 1))
(declare-fun and6.i16.i_12_91 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_12_33 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_12_32 () (_ BitVec 64))
(declare-fun i25.i13.i_12_87 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_12_31 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_12_30 () (_ BitVec 64))
(declare-fun and.i.i5.i_12_84 () (_ BitVec 64))
(declare-fun and8.i.i_12_48 () (_ BitVec 64))
(declare-fun i24.i.i_12_41 () (_ BitVec 64))
(declare-fun i23.i.i_12_40 () (_ BitVec 64))
(declare-fun if.then72.i_if.end80.i_12_149 () Bool)
(declare-fun if.else75.i_if.end80.i_12_148 () Bool)
(declare-fun dst_reg_12_129 () (_ BitVec 64))
(declare-fun dst_reg_12_128 () (_ BitVec 64))
(declare-fun dst_reg_12_125 () (_ BitVec 64))
(declare-fun dst_reg_12_124 () (_ BitVec 64))
(declare-fun i25.i309.i_12_167 () (_ BitVec 64))
(declare-fun or7.i.i_12_157 () (_ BitVec 64))
(declare-fun and.i.i_12_160 () (_ BitVec 64))
(declare-fun neg.i.i_12_159 () (_ BitVec 64))
(declare-fun add3.i.i_12_153 () (_ BitVec 64))
(declare-fun xor.i.i_12_155 () (_ BitVec 64))
(declare-fun or.i.i_12_156 () (_ BitVec 64))
(declare-fun add4.i.i_12_154 () (_ BitVec 64))
(declare-fun add.i41.i_12_152 () (_ BitVec 64))
(declare-fun i25.i.i_12_42 () (_ BitVec 64))
(declare-fun dst_reg_12_8 () (_ BitVec 64))
(declare-fun i20.i.i_12_35 () (_ BitVec 64))
(declare-fun i18.i.i_12_34 () (_ BitVec 64))
(declare-fun dst_reg_12_5 () (_ BitVec 64))
(declare-fun dst_reg_12_4 () (_ BitVec 64))
(declare-fun src_reg_12_14 () (_ BitVec 32))
(declare-fun dst_reg_12_0 () (_ BitVec 32))
(declare-fun add.i.i.i335.i_12_254 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_12_253 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_12_250 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_12_252 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_12_249 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_12_242 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_12_246 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_12_244 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_12_241 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_12_248 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_12_234 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_12_238 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_12_236 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_12_233 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_12_240 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_12_226 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_12_230 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_12_228 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_12_225 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_12_232 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_12_218 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_12_222 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_12_220 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_12_215 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_12_224 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_12_212 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_12_214 () (_ BitVec 64))
(assert
 (let (($x353 (= and8.i313.i_12_173 (bvand i24.i308.i_12_166 (_ bv4294967295 64)))))
 (let (($x350 (= and6.i312.i_12_171 (bvand i23.i306.i_12_165 (_ bv4294967295 64)))))
 (let (($x94 (= cmp.i.i_12_44 (_ bv1 1))))
 (let (($x92 (= cmp.i.i_12_44 (_ bv0 1))))
 (let (($x677 (or $x92 $x94)))
 (let (($x200 (= tobool.not.i.i_12_99 (_ bv1 1))))
 (let (($x678 (and $x200 $x677)))
 (let (($x205 (= cmp18.not.i.not_12_100 (_ bv1 1))))
 (let (($x680 (and $x205 $x678)))
 (let (($x199 (= tobool.not.i.i_12_99 (_ bv0 1))))
 (let (($x679 (and $x199 $x677)))
 (let (($x209 (= cmp24.old.i_12_101 (_ bv0 1))))
 (let (($x683 (and $x209 $x679)))
 (let (($x685 (or $x683 $x680)))
 (let (($x238 (= cmp65.i_12_117 (_ bv1 1))))
 (let (($x686 (and $x238 $x685)))
 (let (($x237 (= cmp65.i_12_117 (_ bv0 1))))
 (let (($x687 (and $x237 $x685)))
 (let (($x688 (or $x687 $x686)))
 (let (($x346 (= cmp.i311.i_12_169 (_ bv1 1))))
 (let (($x689 (and $x346 $x688)))
 (let (($x799 (=> $x689 (and $x350 $x353))))
 (let (($x345 (= cmp.i311.i_12_169 (_ bv0 1))))
 (let (($x690 (and $x345 $x688)))
 (let (($x691 (or $x690 $x689)))
 (let (($x426 (= cmp.i.i.i.i_12_210 (_ bv1 1))))
 (let (($x692 (and $x426 $x691)))
 (let (($x715 (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258 $x692)))
 (let (($x425 (= cmp.i.i.i.i_12_210 (_ bv0 1))))
 (let (($x693 (and $x425 $x691)))
 (let (($x714 (= if.end.i.i.i.i___reg_bound_offset.exit.i_12_257 $x693)))
 (let (($x592 (= and4.i.i.i_12_277 (bvand or.i.i.i_12_273 neg.i.i.i_12_276))))
 (let (($x589 (= neg.i.i.i_12_276 (bvxor and.i1.i.i_12_274 (_ bv18446744073709551615 64)))))
 (let (($x586 (= and.i1.i.i_12_274 (bvand retval.sroa.3.0.i.i.i_12_272 and6.i.i302.i_12_164))))
 (let (($x583 (= or.i.i.i_12_273 (bvor retval.sroa.0.0.i.i.i_12_270 and.i.i301.i_12_162))))
 (let (($x559 (= cmp.i.i.i_12_262 (_ bv1 1))))
 (let (($x580 (ite $x559 (= retval.sroa.3.0.i.i.i_12_272 (_ bv4294967295 64)) (= retval.sroa.3.0.i.i.i_12_272 sub.i.i.i_12_267))))
 (let (($x576 (ite $x559 (= retval.sroa.0.0.i.i.i_12_270 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_12_270 and.i.i336.i_12_268))))
 (let (($x572 (= and.i.i336.i_12_268 (bvand notmask.i.i.i_12_265 i27.i317.i_12_207))))
 (let (($x569 (= sub.i.i.i_12_267 (bvxor notmask.i.i.i_12_265 (_ bv18446744073709551615 64)))))
 (let (($x566 (= notmask.i.i.i_12_265 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_12_263))))
 (let (($x563 (= sh_prom.i.i.i_12_263 ((_ zero_extend 32) retval.0.i.i.i.i_12_259))))
 (let (($x558 (= cmp.i.i.i_12_262 (_ bv0 1))))
 (let (($x560 (ite (bvugt retval.0.i.i.i.i_12_259 (_ bv63 32)) $x559 $x558)))
 (let (($x554 (= retval.0.i.i.i.i_12_259 (_ bv0 32))))
 (let (($x555 (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_12_258 $x554)))
 (let (($x552 (= retval.0.i.i.i.i_12_259 phi.bo_12_256)))
 (let (($x553 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_12_257 $x552)))
 (let (($x796 (and $x553 $x555 $x560 $x563 $x566 $x569 $x572 $x576 $x580 $x583 $x586 $x589 $x592 $x714 $x715)))
 (let (($x694 (or $x693 $x692)))
 (let (($x797 (=> $x694 $x796)))
 (let ((?x225 (bvadd storemerge.i.i_12_80 storemerge.i20.i_12_97)))
 (let (($x241 (= add79.i_12_119 ?x225)))
 (let (($x795 (=> $x687 (and $x241))))
 (let (($x713 (= if.then.i314.i_coerce_reg_to_size.exit320.i_12_204 $x689)))
 (let (($x712 (= if.else.i315.i_coerce_reg_to_size.exit320.i_12_203 $x690)))
 (let (($x409 (= dst_reg_12_133 dst_reg_12_188)))
 (let (($x408 (= dst_reg_12_132 dst_reg_12_187)))
 (let (($x407 (= dst_reg_12_131 dst_reg_12_186)))
 (let (($x406 (= dst_reg_12_130 dst_reg_12_185)))
 (let (($x405 (= storemerge22_12_150 dst_reg_12_184)))
 (let (($x410 (= (_ bv0 64) dst_reg_12_183)))
 (let (($x403 (= dst_reg_12_127 dst_reg_12_182)))
 (let (($x402 (= dst_reg_12_126 dst_reg_12_181)))
 (let (($x401 (= and6.i.i302.i_12_164 dst_reg_12_180)))
 (let (($x400 (= and.i.i301.i_12_162 dst_reg_12_179)))
 (let (($x399 (= dst_reg_12_123 dst_reg_12_178)))
 (let (($x398 (= dst_reg_12_122 dst_reg_12_177)))
 (let (($x397 (= dst_reg_12_121 dst_reg_12_176)))
 (let (($x396 (= dst_reg_12_120 dst_reg_12_175)))
 (let (($x395 (= src_reg_12_147 src_reg_12_202)))
 (let (($x394 (= src_reg_12_146 src_reg_12_201)))
 (let (($x393 (= src_reg_12_145 src_reg_12_200)))
 (let (($x392 (= src_reg_12_144 src_reg_12_199)))
 (let (($x391 (= src_reg_12_143 src_reg_12_198)))
 (let (($x390 (= src_reg_12_142 src_reg_12_197)))
 (let (($x389 (= src_reg_12_141 src_reg_12_196)))
 (let (($x388 (= src_reg_12_140 src_reg_12_195)))
 (let (($x387 (= src_reg_12_139 src_reg_12_194)))
 (let (($x386 (= src_reg_12_138 src_reg_12_193)))
 (let (($x385 (= src_reg_12_137 src_reg_12_192)))
 (let (($x384 (= src_reg_12_136 src_reg_12_191)))
 (let (($x383 (= src_reg_12_135 src_reg_12_190)))
 (let (($x382 (= src_reg_12_134 src_reg_12_189)))
 (let (($x710 (and $x382 $x383 $x384 $x385 $x386 $x387 $x388 $x389 $x390 $x391 $x392 $x393 $x394 $x395 $x396 $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x410 $x405 $x406 $x407 $x408 $x409)))
 (let (($x711 (=> $x690 $x710)))
 (let (($x404 (= and6.i312.i_12_171 dst_reg_12_183)))
 (let (($x708 (and $x382 $x383 $x384 $x385 $x386 $x387 $x388 $x389 $x390 $x391 $x392 $x393 $x394 $x395 $x396 $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409)))
 (let (($x709 (=> $x689 $x708)))
 (let (($x427 (ite (= xor.i.i.i_12_208 (_ bv0 64)) $x426 $x425)))
 (let (($x422 (= xor.i.i.i_12_208 (bvxor i27.i317.i_12_207 storemerge.i316.i_12_205))))
 (let (($x419 (= dst_reg_12_183 i27.i317.i_12_207)))
 (let (($x416 (= storemerge.i316.i_12_205 and8.i313.i_12_173)))
 (let (($x417 (=> if.then.i314.i_coerce_reg_to_size.exit320.i_12_204 $x416)))
 (let (($x414 (= storemerge.i316.i_12_205 (_ bv4294967295 64))))
 (let (($x415 (=> if.else.i315.i_coerce_reg_to_size.exit320.i_12_203 $x414)))
 (let (($x793 (=> $x691 (and $x415 $x417 $x419 $x422 $x427 $x709 $x711 $x712 $x713))))
 (let (($x239 (ite (bvult add.i.i_12_110 src_reg1.sroa.17.0_12_95) $x238 $x237)))
 (let (($x222 (= cmp2.i.i_12_111 (_ bv1 1))))
 (let (($x234 (ite $x222 (= storemerge_12_116 (_ bv9223372036854775807 64)) (= storemerge_12_116 add.i36.i_12_112))))
 (let (($x230 (ite $x222 (= storemerge21_12_114 (_ bv9223372036854775808 64)) (= storemerge21_12_114 add.i.i_12_110))))
 (let (($x226 (= add.i36.i_12_112 ?x225)))
 (let (($x221 (= cmp2.i.i_12_111 (_ bv0 1))))
 (let (($x223 (ite (bvslt add.i.i_12_110 i27.i.i_12_82) $x222 $x221)))
 (let (($x218 (= add.i.i_12_110 (bvadd i27.i.i_12_82 src_reg1.sroa.17.0_12_95))))
 (let (($x791 (=> $x685 (and $x218 $x223 $x226 $x230 $x234 $x239))))
 (let (($x210 (= cmp24.old.i_12_101 (_ bv1 1))))
 (let (($x211 (ite (bvugt src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97) $x210 $x209)))
 (let (($x789 (=> $x679 (and $x211))))
 (let (($x204 (= cmp18.not.i.not_12_100 (_ bv0 1))))
 (let (($x206 (ite (= src_reg1.sroa.17.0_12_95 storemerge.i20.i_12_97) $x205 $x204)))
 (let (($x787 (=> $x678 (and $x206))))
 (let (($x775 (= src_reg_12_305 src_reg_12_333)))
 (let (($x774 (= src_reg_12_304 src_reg_12_332)))
 (let (($x773 (= src_reg_12_303 src_reg_12_331)))
 (let (($x772 (= src_reg_12_302 src_reg_12_330)))
 (let (($x771 (= src_reg_12_301 src_reg_12_329)))
 (let (($x770 (= src_reg_12_300 src_reg_12_328)))
 (let (($x769 (= src_reg_12_299 src_reg_12_327)))
 (let (($x768 (= src_reg_12_298 src_reg_12_326)))
 (let (($x767 (= src_reg_12_297 src_reg_12_325)))
 (let (($x766 (= src_reg_12_296 src_reg_12_324)))
 (let (($x765 (= src_reg_12_295 src_reg_12_323)))
 (let (($x764 (= src_reg_12_294 src_reg_12_322)))
 (let (($x763 (= src_reg_12_293 src_reg_12_321)))
 (let (($x762 (= src_reg_12_292 src_reg_12_320)))
 (let (($x747 (= dst_reg_12_291 dst_reg_12_319)))
 (let (($x746 (= dst_reg_12_290 dst_reg_12_318)))
 (let (($x745 (= dst_reg_12_289 dst_reg_12_317)))
 (let (($x744 (= dst_reg_12_288 dst_reg_12_316)))
 (let (($x743 (= dst_reg_12_287 dst_reg_12_315)))
 (let (($x742 (= dst_reg_12_286 dst_reg_12_314)))
 (let (($x741 (= dst_reg_12_285 dst_reg_12_313)))
 (let (($x740 (= dst_reg_12_284 dst_reg_12_312)))
 (let (($x739 (= dst_reg_12_283 dst_reg_12_311)))
 (let (($x738 (= dst_reg_12_282 dst_reg_12_310)))
 (let (($x737 (= dst_reg_12_281 dst_reg_12_309)))
 (let (($x736 (= dst_reg_12_280 dst_reg_12_308)))
 (let (($x735 (= dst_reg_12_279 dst_reg_12_307)))
 (let (($x734 (= dst_reg_12_278 dst_reg_12_306)))
 (let (($x676 (= dst_reg_12_63 dst_reg_12_291)))
 (let (($x675 (= dst_reg_12_62 dst_reg_12_290)))
 (let (($x674 (= dst_reg_12_61 dst_reg_12_289)))
 (let (($x673 (= (_ bv0 32) dst_reg_12_288)))
 (let (($x672 (= (_ bv18446744073709551615 64) dst_reg_12_287)))
 (let (($x671 (= (_ bv0 64) dst_reg_12_286)))
 (let (($x670 (= (_ bv9223372036854775807 64) dst_reg_12_285)))
 (let (($x669 (= (_ bv9223372036854775808 64) dst_reg_12_284)))
 (let (($x668 (= (_ bv18446744073709551615 64) dst_reg_12_283)))
 (let (($x667 (= (_ bv0 64) dst_reg_12_282)))
 (let (($x666 (= dst_reg_12_53 dst_reg_12_281)))
 (let (($x665 (= dst_reg_12_52 dst_reg_12_280)))
 (let (($x664 (= dst_reg_12_51 dst_reg_12_279)))
 (let (($x663 (= (_ bv1 32) dst_reg_12_278)))
 (let (($x662 (= src_reg_12_77 src_reg_12_305)))
 (let (($x661 (= src_reg_12_76 src_reg_12_304)))
 (let (($x660 (= src_reg_12_75 src_reg_12_303)))
 (let (($x659 (= src_reg_12_74 src_reg_12_302)))
 (let (($x658 (= src_reg_12_73 src_reg_12_301)))
 (let (($x657 (= src_reg_12_72 src_reg_12_300)))
 (let (($x656 (= src_reg_12_71 src_reg_12_299)))
 (let (($x655 (= src_reg_12_70 src_reg_12_298)))
 (let (($x654 (= src_reg_12_69 src_reg_12_297)))
 (let (($x653 (= src_reg_12_68 src_reg_12_296)))
 (let (($x652 (= src_reg_12_67 src_reg_12_295)))
 (let (($x651 (= src_reg_12_66 src_reg_12_294)))
 (let (($x650 (= src_reg_12_65 src_reg_12_293)))
 (let (($x649 (= src_reg_12_64 src_reg_12_292)))
 (let (($x718 (and $x649 $x650 $x651 $x652 $x653 $x654 $x655 $x656 $x657 $x658 $x659 $x660 $x661 $x662 $x663 $x664 $x665 $x666 $x667 $x668 $x669 $x670 $x671 $x672 $x673 $x674 $x675 $x676)))
 (let (($x681 (and $x204 $x678)))
 (let (($x682 (and $x210 $x679)))
 (let (($x684 (or $x682 $x681)))
 (let (($x719 (=> $x684 $x718)))
 (let (($x648 (= dst_reg_12_188 dst_reg_12_291)))
 (let (($x647 (= dst_reg_12_187 dst_reg_12_290)))
 (let (($x646 (= dst_reg_12_186 dst_reg_12_289)))
 (let (($x645 (= dst_reg_12_185 dst_reg_12_288)))
 (let (($x644 (= storemerge.i316.i_12_205 dst_reg_12_287)))
 (let (($x643 (= dst_reg_12_183 dst_reg_12_286)))
 (let (($x642 (= storemerge.i316.i_12_205 dst_reg_12_285)))
 (let (($x641 (= i27.i317.i_12_207 dst_reg_12_284)))
 (let (($x640 (= and.i1.i.i_12_274 dst_reg_12_283)))
 (let (($x639 (= and4.i.i.i_12_277 dst_reg_12_282)))
 (let (($x638 (= dst_reg_12_178 dst_reg_12_281)))
 (let (($x637 (= dst_reg_12_177 dst_reg_12_280)))
 (let (($x636 (= dst_reg_12_176 dst_reg_12_279)))
 (let (($x635 (= dst_reg_12_175 dst_reg_12_278)))
 (let (($x634 (= src_reg_12_202 src_reg_12_305)))
 (let (($x633 (= src_reg_12_201 src_reg_12_304)))
 (let (($x632 (= src_reg_12_200 src_reg_12_303)))
 (let (($x631 (= src_reg_12_199 src_reg_12_302)))
 (let (($x630 (= src_reg_12_198 src_reg_12_301)))
 (let (($x629 (= src_reg_12_197 src_reg_12_300)))
 (let (($x628 (= src_reg_12_196 src_reg_12_299)))
 (let (($x627 (= src_reg_12_195 src_reg_12_298)))
 (let (($x626 (= src_reg_12_194 src_reg_12_297)))
 (let (($x625 (= src_reg_12_193 src_reg_12_296)))
 (let (($x624 (= src_reg_12_192 src_reg_12_295)))
 (let (($x623 (= src_reg_12_191 src_reg_12_294)))
 (let (($x622 (= src_reg_12_190 src_reg_12_293)))
 (let (($x621 (= src_reg_12_189 src_reg_12_292)))
 (let (($x716 (and $x621 $x622 $x623 $x624 $x625 $x626 $x627 $x628 $x629 $x630 $x631 $x632 $x633 $x634 $x635 $x636 $x637 $x638 $x639 $x640 $x641 $x642 $x643 $x644 $x645 $x646 $x647 $x648)))
 (let (($x717 (=> $x694 $x716)))
 (let (($x784 (and $x717 $x719 $x734 $x735 $x736 $x737 $x738 $x739 $x740 $x741 $x742 $x743 $x744 $x745 $x746 $x747 $x762 $x763 $x764 $x765 $x766 $x767 $x768 $x769 $x770 $x771 $x772 $x773 $x774 $x775)))
 (let (($x695 (or $x694 $x684)))
 (let (($x785 (=> $x695 $x784)))
 (let (($x701 (= if.then.i.i_coerce_reg_to_size.exit.i_12_79 $x94)))
 (let (($x700 (= if.else.i.i_coerce_reg_to_size.exit.i_12_78 $x92)))
 (let (($x158 (= dst_reg_12_13 dst_reg_12_63)))
 (let (($x157 (= dst_reg_12_12 dst_reg_12_62)))
 (let (($x156 (= dst_reg_12_11 dst_reg_12_61)))
 (let (($x155 (= dst_reg_12_10 dst_reg_12_60)))
 (let (($x154 (= dst_reg_12_9 dst_reg_12_59)))
 (let (($x159 (= (_ bv0 64) dst_reg_12_58)))
 (let (($x152 (= dst_reg_12_7 dst_reg_12_57)))
 (let (($x151 (= dst_reg_12_6 dst_reg_12_56)))
 (let (($x150 (= and6.i.i.i_12_39 dst_reg_12_55)))
 (let (($x149 (= and.i.i.i_12_37 dst_reg_12_54)))
 (let (($x148 (= dst_reg_12_3 dst_reg_12_53)))
 (let (($x147 (= dst_reg_12_2 dst_reg_12_52)))
 (let (($x146 (= dst_reg_12_1 dst_reg_12_51)))
 (let (($x145 (= (_ bv1 32) dst_reg_12_50)))
 (let (($x144 (= src_reg_12_27 src_reg_12_77)))
 (let (($x143 (= src_reg_12_26 src_reg_12_76)))
 (let (($x142 (= src_reg_12_25 src_reg_12_75)))
 (let (($x141 (= src_reg_12_24 src_reg_12_74)))
 (let (($x140 (= src_reg_12_23 src_reg_12_73)))
 (let (($x139 (= src_reg_12_22 src_reg_12_72)))
 (let (($x138 (= src_reg_12_21 src_reg_12_71)))
 (let (($x137 (= src_reg_12_20 src_reg_12_70)))
 (let (($x136 (= src_reg_12_19 src_reg_12_69)))
 (let (($x135 (= src_reg_12_18 src_reg_12_68)))
 (let (($x134 (= src_reg_12_17 src_reg_12_67)))
 (let (($x133 (= src_reg_12_16 src_reg_12_66)))
 (let (($x132 (= src_reg_12_15 src_reg_12_65)))
 (let (($x131 (= (_ bv1 32) src_reg_12_64)))
 (let (($x698 (and $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x159 $x154 $x155 $x156 $x157 $x158)))
 (let (($x699 (=> $x92 $x698)))
 (let (($x153 (= and6.i.i_12_46 dst_reg_12_58)))
 (let (($x696 (and $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x153 $x154 $x155 $x156 $x157 $x158)))
 (let (($x697 (=> $x94 $x696)))
 (let (($x201 (ite (= and6.i.i6.i_12_86 (_ bv0 64)) $x200 $x199)))
 (let (($x181 (= cmp.i15.i_12_89 (_ bv1 1))))
 (let (($x196 (ite $x181 (= storemerge.i20.i_12_97 and8.i17.i_12_93) (= storemerge.i20.i_12_97 (_ bv4294967295 64)))))
 (let (($x192 (ite $x181 (= src_reg1.sroa.17.0_12_95 and6.i16.i_12_91) (= src_reg1.sroa.17.0_12_95 (_ bv0 64)))))
 (let (($x188 (= and8.i17.i_12_93 (bvand src_reg1.sroa.22.0.copyload_12_33 (_ bv4294967295 64)))))
 (let (($x185 (= and6.i16.i_12_91 (bvand src_reg1.sroa.17.0.copyload_12_32 (_ bv4294967295 64)))))
 (let (($x180 (= cmp.i15.i_12_89 (_ bv0 1))))
 (let (($x182 (ite (bvult i25.i13.i_12_87 (_ bv4294967296 64)) $x181 $x180)))
 (let ((?x176 (bvxor src_reg1.sroa.22.0.copyload_12_33 src_reg1.sroa.17.0.copyload_12_32)))
 (let (($x177 (= i25.i13.i_12_87 ?x176)))
 (let (($x174 (= and6.i.i6.i_12_86 (bvand src_reg1.sroa.10.0.copyload_12_31 (_ bv4294967295 64)))))
 (let (($x171 (= and.i.i5.i_12_84 (bvand src_reg1.sroa.3.0.copyload_12_30 (_ bv4294967295 64)))))
 (let (($x168 (= dst_reg_12_58 i27.i.i_12_82)))
 (let (($x165 (= storemerge.i.i_12_80 and8.i.i_12_48)))
 (let (($x166 (=> if.then.i.i_coerce_reg_to_size.exit.i_12_79 $x165)))
 (let (($x163 (= storemerge.i.i_12_80 (_ bv4294967295 64))))
 (let (($x164 (=> if.else.i.i_coerce_reg_to_size.exit.i_12_78 $x163)))
 (let (($x782 (and $x164 $x166 $x168 $x171 $x174 $x177 $x182 $x185 $x188 $x192 $x196 $x201 $x697 $x699 $x700 $x701)))
 (let (($x783 (=> $x677 $x782)))
 (let (($x101 (= and8.i.i_12_48 (bvand i24.i.i_12_41 (_ bv4294967295 64)))))
 (let (($x98 (= and6.i.i_12_46 (bvand i23.i.i_12_40 (_ bv4294967295 64)))))
 (let (($x781 (=> $x94 (and $x98 $x101))))
 (let (($x707 (= if.then72.i_if.end80.i_12_149 $x686)))
 (let (($x706 (= if.else75.i_if.end80.i_12_148 $x687)))
 (let (($x297 (= dst_reg_12_63 dst_reg_12_133)))
 (let (($x296 (= dst_reg_12_62 dst_reg_12_132)))
 (let (($x295 (= dst_reg_12_61 dst_reg_12_131)))
 (let (($x294 (= dst_reg_12_60 dst_reg_12_130)))
 (let (($x293 (= storemerge.i.i_12_80 dst_reg_12_129)))
 (let (($x298 (= add.i.i_12_110 dst_reg_12_128)))
 (let (($x291 (= storemerge_12_116 dst_reg_12_127)))
 (let (($x290 (= storemerge21_12_114 dst_reg_12_126)))
 (let (($x289 (= dst_reg_12_55 dst_reg_12_125)))
 (let (($x288 (= dst_reg_12_54 dst_reg_12_124)))
 (let (($x287 (= dst_reg_12_53 dst_reg_12_123)))
 (let (($x286 (= dst_reg_12_52 dst_reg_12_122)))
 (let (($x285 (= dst_reg_12_51 dst_reg_12_121)))
 (let (($x284 (= dst_reg_12_50 dst_reg_12_120)))
 (let (($x283 (= src_reg_12_77 src_reg_12_147)))
 (let (($x282 (= src_reg_12_76 src_reg_12_146)))
 (let (($x281 (= src_reg_12_75 src_reg_12_145)))
 (let (($x280 (= src_reg_12_74 src_reg_12_144)))
 (let (($x279 (= src_reg_12_73 src_reg_12_143)))
 (let (($x278 (= src_reg_12_72 src_reg_12_142)))
 (let (($x277 (= src_reg_12_71 src_reg_12_141)))
 (let (($x276 (= src_reg_12_70 src_reg_12_140)))
 (let (($x275 (= src_reg_12_69 src_reg_12_139)))
 (let (($x274 (= src_reg_12_68 src_reg_12_138)))
 (let (($x273 (= src_reg_12_67 src_reg_12_137)))
 (let (($x272 (= src_reg_12_66 src_reg_12_136)))
 (let (($x271 (= src_reg_12_65 src_reg_12_135)))
 (let (($x270 (= src_reg_12_64 src_reg_12_134)))
 (let (($x704 (and $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x283 $x284 $x285 $x286 $x287 $x288 $x289 $x290 $x291 $x298 $x293 $x294 $x295 $x296 $x297)))
 (let (($x705 (=> $x687 $x704)))
 (let (($x292 (= (_ bv0 64) dst_reg_12_128)))
 (let (($x702 (and $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x283 $x284 $x285 $x286 $x287 $x288 $x289 $x290 $x291 $x292 $x293 $x294 $x295 $x296 $x297)))
 (let (($x703 (=> $x686 $x702)))
 (let (($x347 (ite (bvult i25.i309.i_12_167 (_ bv4294967296 64)) $x346 $x345)))
 (let (($x342 (= i25.i309.i_12_167 (bvxor i24.i308.i_12_166 i23.i306.i_12_165))))
 (let (($x339 (= storemerge22_12_150 i24.i308.i_12_166)))
 (let (($x337 (= dst_reg_12_128 i23.i306.i_12_165)))
 (let (($x335 (= and6.i.i302.i_12_164 (bvand or7.i.i_12_157 (_ bv4294967295 64)))))
 (let (($x332 (= and.i.i301.i_12_162 (bvand and.i.i_12_160 (_ bv4294967295 64)))))
 (let (($x329 (= and.i.i_12_160 (bvand add3.i.i_12_153 neg.i.i_12_159))))
 (let (($x326 (= neg.i.i_12_159 (bvxor or7.i.i_12_157 (_ bv18446744073709551615 64)))))
 (let (($x323 (= or7.i.i_12_157 (bvor or.i.i_12_156 xor.i.i_12_155))))
 (let (($x320 (= or.i.i_12_156 (bvor and6.i.i.i_12_39 and6.i.i6.i_12_86))))
 (let (($x317 (= xor.i.i_12_155 (bvxor add4.i.i_12_154 add3.i.i_12_153))))
 (let (($x314 (= add4.i.i_12_154 (bvadd add.i41.i_12_152 add3.i.i_12_153))))
 (let (($x311 (= add3.i.i_12_153 (bvadd and.i.i.i_12_37 and.i.i5.i_12_84))))
 (let (($x308 (= add.i41.i_12_152 (bvadd and6.i.i.i_12_39 and6.i.i6.i_12_86))))
 (let (($x304 (= storemerge22_12_150 (_ bv18446744073709551615 64))))
 (let (($x305 (=> if.then72.i_if.end80.i_12_149 $x304)))
 (let (($x302 (= storemerge22_12_150 add79.i_12_119)))
 (let (($x303 (=> if.else75.i_if.end80.i_12_148 $x302)))
 (let (($x778 (and $x303 $x305 $x308 $x311 $x314 $x317 $x320 $x323 $x326 $x329 $x332 $x335 $x337 $x339 $x342 $x347 $x703 $x705 $x706 $x707)))
 (let (($x779 (=> $x688 $x778)))
 (let (($x95 (ite (bvult i25.i.i_12_42 (_ bv4294967296 64)) $x94 $x92)))
 (let (($x87 (= i25.i.i_12_42 (bvxor i24.i.i_12_41 i23.i.i_12_40))))
 (let (($x84 (= dst_reg_12_9 i24.i.i_12_41)))
 (let (($x82 (= dst_reg_12_8 i23.i.i_12_40)))
 (let (($x80 (= and6.i.i.i_12_39 (bvand i20.i.i_12_35 (_ bv4294967295 64)))))
 (let (($x77 (= and.i.i.i_12_37 (bvand i18.i.i_12_34 (_ bv4294967295 64)))))
 (let (($x73 (= dst_reg_12_5 i20.i.i_12_35)))
 (let (($x71 (= dst_reg_12_4 i18.i.i_12_34)))
 (let (($x69 (= src_reg_12_23 src_reg1.sroa.22.0.copyload_12_33)))
 (let (($x67 (= src_reg_12_22 src_reg1.sroa.17.0.copyload_12_32)))
 (let (($x65 (= src_reg_12_19 src_reg1.sroa.10.0.copyload_12_31)))
 (let (($x63 (= src_reg_12_18 src_reg1.sroa.3.0.copyload_12_30)))
 (let (($x60 (= src_reg_12_27 src_reg_12_27)))
 (let (($x59 (= src_reg_12_26 src_reg_12_26)))
 (let (($x58 (= src_reg_12_25 src_reg_12_25)))
 (let (($x57 (= src_reg_12_24 src_reg_12_24)))
 (let (($x56 (= src_reg_12_23 src_reg_12_23)))
 (let (($x55 (= src_reg_12_22 src_reg_12_22)))
 (let (($x54 (= src_reg_12_21 src_reg_12_21)))
 (let (($x53 (= src_reg_12_20 src_reg_12_20)))
 (let (($x52 (= src_reg_12_19 src_reg_12_19)))
 (let (($x51 (= src_reg_12_18 src_reg_12_18)))
 (let (($x50 (= src_reg_12_17 src_reg_12_17)))
 (let (($x49 (= src_reg_12_16 src_reg_12_16)))
 (let (($x48 (= src_reg_12_15 src_reg_12_15)))
 (let (($x47 (= src_reg_12_14 src_reg_12_14)))
 (let (($x32 (= dst_reg_12_13 dst_reg_12_13)))
 (let (($x31 (= dst_reg_12_12 dst_reg_12_12)))
 (let (($x30 (= dst_reg_12_11 dst_reg_12_11)))
 (let (($x29 (= dst_reg_12_10 dst_reg_12_10)))
 (let (($x28 (= dst_reg_12_9 dst_reg_12_9)))
 (let (($x27 (= dst_reg_12_8 dst_reg_12_8)))
 (let (($x26 (= dst_reg_12_7 dst_reg_12_7)))
 (let (($x25 (= dst_reg_12_6 dst_reg_12_6)))
 (let (($x24 (= dst_reg_12_5 dst_reg_12_5)))
 (let (($x23 (= dst_reg_12_4 dst_reg_12_4)))
 (let (($x22 (= dst_reg_12_3 dst_reg_12_3)))
 (let (($x21 (= dst_reg_12_2 dst_reg_12_2)))
 (let (($x20 (= dst_reg_12_1 dst_reg_12_1)))
 (let (($x19 (= dst_reg_12_0 dst_reg_12_0)))
 (let (($x548 (= phi.bo_12_256 (bvand add.i.i.i335.i_12_254 (_ bv255 32)))))
 (let (($x544 (= add.i.i.i335.i_12_254 (bvadd num.4.i.i.i.i.i_12_250 i.i.i.i.i.i.neg_12_253))))
 (let (($x541 (= i.i.i.i.i.i.neg_12_253 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_12_252))))
 (let (($x538 (= word.addr.4.lobit.i.i.i.i.i.neg_12_252 (bvlshr word.addr.4.i.i.i.i.i_12_249 (_ bv63 64)))))
 (let (($x517 (= tobool20.not.i.i.i.i.i_12_244 (_ bv1 1))))
 (let (($x534 (ite $x517 (= num.4.i.i.i.i.i_12_250 sub22.i.i.i.i.i_12_246) (= num.4.i.i.i.i.i_12_250 num.3.i.i.i.i.i_12_242))))
 (let (($x530 (ite $x517 (= word.addr.4.i.i.i.i.i_12_249 shl23.i.i.i.i.i_12_248) (= word.addr.4.i.i.i.i.i_12_249 word.addr.3.i.i.i.i.i_12_241))))
 (let (($x526 (= shl23.i.i.i.i.i_12_248 (bvshl word.addr.3.i.i.i.i.i_12_241 (_ bv2 64)))))
 (let (($x522 (= sub22.i.i.i.i.i_12_246 (bvadd num.3.i.i.i.i.i_12_242 (_ bv254 32)))))
 (let (($x516 (= tobool20.not.i.i.i.i.i_12_244 (_ bv0 1))))
 (let (($x518 (ite (bvult word.addr.3.i.i.i.i.i_12_241 (_ bv4611686018427387904 64)) $x517 $x516)))
 (let (($x495 (= tobool14.not.i.i.i.i.i_12_236 (_ bv1 1))))
 (let (($x512 (ite $x495 (= num.3.i.i.i.i.i_12_242 sub16.i.i.i.i.i_12_238) (= num.3.i.i.i.i.i_12_242 num.2.i.i.i.i.i_12_234))))
 (let (($x508 (ite $x495 (= word.addr.3.i.i.i.i.i_12_241 shl17.i.i.i.i.i_12_240) (= word.addr.3.i.i.i.i.i_12_241 word.addr.2.i.i.i.i.i_12_233))))
 (let (($x504 (= shl17.i.i.i.i.i_12_240 (bvshl word.addr.2.i.i.i.i.i_12_233 (_ bv4 64)))))
 (let (($x500 (= sub16.i.i.i.i.i_12_238 (bvadd num.2.i.i.i.i.i_12_234 (_ bv4294967292 32)))))
 (let (($x494 (= tobool14.not.i.i.i.i.i_12_236 (_ bv0 1))))
 (let (($x496 (ite (bvult word.addr.2.i.i.i.i.i_12_233 (_ bv1152921504606846976 64)) $x495 $x494)))
 (let (($x473 (= tobool8.not.i.i.i.i.i_12_228 (_ bv1 1))))
 (let (($x490 (ite $x473 (= num.2.i.i.i.i.i_12_234 sub10.i.i.i.i.i_12_230) (= num.2.i.i.i.i.i_12_234 num.1.i.i.i.i.i_12_226))))
 (let (($x486 (ite $x473 (= word.addr.2.i.i.i.i.i_12_233 shl11.i.i.i.i.i_12_232) (= word.addr.2.i.i.i.i.i_12_233 word.addr.1.i.i.i.i.i_12_225))))
 (let (($x482 (= shl11.i.i.i.i.i_12_232 (bvshl word.addr.1.i.i.i.i.i_12_225 (_ bv8 64)))))
 (let (($x478 (= sub10.i.i.i.i.i_12_230 (bvadd num.1.i.i.i.i.i_12_226 (_ bv4294967288 32)))))
 (let (($x472 (= tobool8.not.i.i.i.i.i_12_228 (_ bv0 1))))
 (let (($x474 (ite (bvult word.addr.1.i.i.i.i.i_12_225 (_ bv72057594037927936 64)) $x473 $x472)))
 (let (($x451 (= tobool2.not.i.i.i.i.i_12_220 (_ bv1 1))))
 (let (($x468 (ite $x451 (= num.1.i.i.i.i.i_12_226 sub4.i.i.i.i.i_12_222) (= num.1.i.i.i.i.i_12_226 spec.select17.i.i.i.i.i_12_218))))
 (let (($x464 (ite $x451 (= word.addr.1.i.i.i.i.i_12_225 shl5.i.i.i.i.i_12_224) (= word.addr.1.i.i.i.i.i_12_225 spec.select.i.i.i.i.i_12_215))))
 (let (($x460 (= shl5.i.i.i.i.i_12_224 (bvshl spec.select.i.i.i.i.i_12_215 (_ bv16 64)))))
 (let (($x456 (= sub4.i.i.i.i.i_12_222 (bvadd spec.select17.i.i.i.i.i_12_218 (_ bv4294967280 32)))))
 (let (($x450 (= tobool2.not.i.i.i.i.i_12_220 (_ bv0 1))))
 (let (($x452 (ite (bvult spec.select.i.i.i.i.i_12_215 (_ bv281474976710656 64)) $x451 $x450)))
 (let (($x431 (= tobool.not.i.i.i.i.i_12_212 (_ bv1 1))))
 (let (($x446 (ite $x431 (= spec.select17.i.i.i.i.i_12_218 (_ bv31 32)) (= spec.select17.i.i.i.i.i_12_218 (_ bv63 32)))))
 (let (($x440 (ite $x431 (= spec.select.i.i.i.i.i_12_215 shl.i.i.i.i.i_12_214) (= spec.select.i.i.i.i.i_12_215 xor.i.i.i_12_208))))
 (let (($x436 (= shl.i.i.i.i.i_12_214 (bvshl xor.i.i.i_12_208 (_ bv32 64)))))
 (let (($x430 (= tobool.not.i.i.i.i.i_12_212 (_ bv0 1))))
 (let (($x432 (ite (bvult xor.i.i.i_12_208 (_ bv4294967296 64)) $x431 $x430)))
 (let (($x776 (and $x432 $x436 $x440 $x446 $x452 $x456 $x460 $x464 $x468 $x474 $x478 $x482 $x486 $x490 $x496 $x500 $x504 $x508 $x512 $x518 $x522 $x526 $x530 $x534 $x538 $x541 $x544 $x548)))
 (let (($x777 (=> $x693 $x776)))
 (and $x777 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x77 $x80 $x82 $x84 $x87 $x95 $x779 $x781 $x783 $x785 $x787 $x789 $x791 $x793 $x795 $x797 $x799))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32/BPF_ADD_32.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD_32 BPF_ADD_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD_32 12 BPF_ADD_32.smt2

Finished llvm_to_smt_pass
